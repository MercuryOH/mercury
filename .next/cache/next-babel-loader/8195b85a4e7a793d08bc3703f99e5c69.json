{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nvar __jsx = React.createElement;\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component } from 'react';\nimport { Label, Button } from 'semantic-ui-react';\nimport styled from 'styled-components';\nimport QueueWebSocket from './queuews';\nimport * as api from '../../util/mercuryService';\nimport { AuthRequired } from '../../components/authProvider';\nimport YourTurnModal from '../yourTurnModal';\nvar QueueDiv = styled.div.withConfig({\n  displayName: \"queue__QueueDiv\",\n  componentId: \"sc-1vy3urw-0\"\n})([\"grid-gap:2vh;\"]);\n_c = QueueDiv;\nvar QueueLabel = styled(Label).withConfig({\n  displayName: \"queue__QueueLabel\",\n  componentId: \"sc-1vy3urw-1\"\n})([\"text-align:center;\"]);\n_c2 = QueueLabel;\n\nvar Queue = /*#__PURE__*/function (_Component) {\n  _inherits(Queue, _Component);\n\n  var _super = _createSuper(Queue);\n\n  function Queue(props) {\n    var _this;\n\n    _classCallCheck(this, Queue);\n\n    _this = _super.call(this, props);\n    _this.state = {\n      displayStudentsStyle: {\n        display: 'grid'\n      },\n      iconToDisplay: 'caret square down outline',\n      connection: new QueueWebSocket(_assertThisInitialized(_this)),\n      studentsInQueue: [],\n      me: {},\n      classData: [],\n      inQueue: false,\n      isYourTurn: false\n    };\n\n    _this.getRoleForClass.bind(_assertThisInitialized(_this));\n\n    return _this;\n  }\n\n  _createClass(Queue, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      this.courseId = Number(window.location.href.split('/')[4]);\n      this.state.connection.start();\n      var me = {};\n      var classData = {};\n      api.getMe().then(function (meData) {\n        me = meData;\n      }).then(function () {\n        return api.getClasses();\n      }).then(function (classPayload) {\n        classData = classPayload;\n      }).then(function () {\n        return _this2.setState({\n          me: me,\n          classData: classData\n        });\n      });\n    }\n  }, {\n    key: \"isStudentDisplayed\",\n    value: function isStudentDisplayed() {\n      var display = this.state.displayStudentsStyle.display;\n      return display === 'grid';\n    }\n  }, {\n    key: \"alterStudentDisplay\",\n    value: function alterStudentDisplay() {\n      var displayStudentsStyle = this.isStudentDisplayed() ? {\n        display: 'none'\n      } : {\n        display: 'grid'\n      };\n      var iconToDisplay = this.isStudentDisplayed() ? 'caret square up outline' : 'caret square down outline';\n      this.setState({\n        displayStudentsStyle: displayStudentsStyle,\n        iconToDisplay: iconToDisplay\n      });\n    }\n  }, {\n    key: \"addMeToQueue\",\n    value: function addMeToQueue() {\n      var _this$state$me = this.state.me,\n          firstName = _this$state$me.firstName,\n          lastName = _this$state$me.lastName;\n      var fullName = \"\".concat(firstName, \" \").concat(lastName);\n\n      if (this.state.studentsInQueue.indexOf(fullName) >= 0) {\n        return;\n      }\n\n      this.state.connection.addMeToQueue();\n    }\n  }, {\n    key: \"removeMeFromQueue\",\n    value: function removeMeFromQueue() {\n      var _this$state$me2 = this.state.me,\n          firstName = _this$state$me2.firstName,\n          lastName = _this$state$me2.lastName;\n      var fullName = \"\".concat(firstName, \" \").concat(lastName);\n\n      if (this.state.studentsInQueue.indexOf(fullName) < 0) {\n        return;\n      }\n\n      this.state.connection.removeMeFromQueue();\n    }\n  }, {\n    key: \"getRoleForClass\",\n    value: function getRoleForClass() {\n      var _this3 = this;\n\n      var classData = this.state.classData;\n      var userRole = null;\n      classData.forEach(function (row) {\n        var id = row.id,\n            role = row.role;\n\n        if (_this3.courseId === Number(id)) {\n          userRole = role;\n        }\n      });\n      return userRole;\n    }\n  }, {\n    key: \"getNextStudentInQueue\",\n    value: function getNextStudentInQueue() {\n      this.state.connection.getNextStudent();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var connection = this.state.connection;\n\n      if (!connection) {\n        return null;\n      }\n\n      var userRole = this.getRoleForClass();\n\n      var buttonToDisplay = __jsx(\"div\", {\n        style: {\n          position: 'absolute',\n          width: 'calc(100% - 38px)',\n          bottom: 14,\n          display: 'inline-flex'\n        }\n      }, __jsx(Button, {\n        onClick: this.addMeToQueue.bind(this),\n        style: {\n          width: '50%',\n          fontSize: '1vw'\n        },\n        primary: true\n      }, \"Join Queue\"), __jsx(Button, {\n        onClick: this.removeMeFromQueue.bind(this),\n        style: {\n          width: '50%',\n          fontSize: '1vw'\n        },\n        secondary: true\n      }, \"Leave Queue\"));\n\n      if (userRole !== 'Student') {\n        buttonToDisplay = __jsx(\"div\", {\n          style: {\n            position: 'absolute',\n            width: 'calc(100% - 38px)',\n            bottom: 14,\n            display: 'inline-flex'\n          }\n        }, __jsx(Button, {\n          onClick: this.getNextStudentInQueue.bind(this),\n          primary: true\n        }, \"Next\"));\n      }\n\n      var queueLabels = this.state.displayStudentsStyle.display == 'none' ? __jsx(React.Fragment, null) : this.state.studentsInQueue.map(function (student) {\n        return __jsx(QueueLabel, {\n          vertical: true,\n          style: {\n            fontSize: '1.2vw',\n            textAlign: 'center',\n            width: '95%',\n            marginBottom: '2%',\n            minWidth: '41px',\n            marginLeft: '.8%',\n            marginRight: '1%'\n          },\n          key: student\n        }, student);\n      });\n      return __jsx(QueueDiv, null, __jsx(YourTurnModal, {\n        isYourTurn: this.state.isYourTurn\n      }), __jsx(Button.Group, {\n        size: \"huge\",\n        style: {\n          marginBottom: 12,\n          width: '95%'\n        },\n        fluid: true,\n        vertical: true\n      }, __jsx(Button, {\n        compact: true,\n        content: \"Queue\",\n        icon: this.state.iconToDisplay,\n        labelPosition: \"right\",\n        onClick: this.alterStudentDisplay.bind(this),\n        style: {\n          fontSize: '1.5vw',\n          textAlign: 'center',\n          width: '100%',\n          marginBottom: '2%',\n          minWidth: '41px'\n        }\n      })), __jsx(QueueDiv, {\n        style: {\n          width: '100%',\n          marginBottom: '2%',\n          minWidth: '41px'\n        }\n      }, queueLabels), buttonToDisplay);\n    }\n  }]);\n\n  return Queue;\n}(Component);\n\nexport default _c3 = AuthRequired(Queue);\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"QueueDiv\");\n$RefreshReg$(_c2, \"QueueLabel\");\n$RefreshReg$(_c3, \"%default%\");","map":{"version":3,"sources":["C:/Users/ryanj/Documents/mercury/components/queue/queue.js"],"names":["React","Component","Label","Button","styled","QueueWebSocket","api","AuthRequired","YourTurnModal","QueueDiv","div","QueueLabel","Queue","props","state","displayStudentsStyle","display","iconToDisplay","connection","studentsInQueue","me","classData","inQueue","isYourTurn","getRoleForClass","bind","courseId","Number","window","location","href","split","start","getMe","then","meData","getClasses","classPayload","setState","isStudentDisplayed","firstName","lastName","fullName","indexOf","addMeToQueue","removeMeFromQueue","userRole","forEach","row","id","role","getNextStudent","buttonToDisplay","position","width","bottom","fontSize","getNextStudentInQueue","queueLabels","map","student","textAlign","marginBottom","minWidth","marginLeft","marginRight","alterStudentDisplay"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\r\nimport { Label, Button } from 'semantic-ui-react'\r\nimport styled from 'styled-components'\r\nimport QueueWebSocket from './queuews'\r\nimport * as api from '../../util/mercuryService'\r\nimport { AuthRequired } from '../../components/authProvider'\r\nimport YourTurnModal from '../yourTurnModal'\r\n\r\nconst QueueDiv = styled.div`\r\n  grid-gap: 2vh;\r\n`\r\n\r\nconst QueueLabel = styled(Label)`\r\n  text-align: center;\r\n`\r\n\r\nclass Queue extends Component {\r\n  constructor(props) {\r\n    super(props)\r\n    this.state = {\r\n      displayStudentsStyle: { display: 'grid' },\r\n      iconToDisplay: 'caret square down outline',\r\n      connection: new QueueWebSocket(this),\r\n      studentsInQueue: [],\r\n      me: {},\r\n      classData: [],\r\n      inQueue: false,\r\n      isYourTurn: false,\r\n    }\r\n\r\n    this.getRoleForClass.bind(this)\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.courseId = Number(window.location.href.split('/')[4])\r\n    this.state.connection.start()\r\n\r\n    let me = {}\r\n    let classData = {}\r\n\r\n    api\r\n      .getMe()\r\n      .then((meData) => {\r\n        me = meData\r\n      })\r\n      .then(() => api.getClasses())\r\n      .then((classPayload) => {\r\n        classData = classPayload\r\n      })\r\n      .then(() => this.setState({ me, classData }))\r\n  }\r\n\r\n  isStudentDisplayed() {\r\n    let { display } = this.state.displayStudentsStyle\r\n    return display === 'grid'\r\n  }\r\n\r\n  alterStudentDisplay() {\r\n    let displayStudentsStyle = this.isStudentDisplayed()\r\n      ? { display: 'none' }\r\n      : { display: 'grid' }\r\n\r\n    let iconToDisplay = this.isStudentDisplayed()\r\n      ? 'caret square up outline'\r\n      : 'caret square down outline'\r\n\r\n    this.setState({ displayStudentsStyle, iconToDisplay })\r\n  }\r\n\r\n  addMeToQueue() {\r\n    const { firstName, lastName } = this.state.me\r\n    const fullName = `${firstName} ${lastName}`\r\n\r\n    if (this.state.studentsInQueue.indexOf(fullName) >= 0) {\r\n      return\r\n    }\r\n\r\n    this.state.connection.addMeToQueue()\r\n  }\r\n\r\n  removeMeFromQueue() {\r\n    const { firstName, lastName } = this.state.me\r\n    const fullName = `${firstName} ${lastName}`\r\n\r\n    if (this.state.studentsInQueue.indexOf(fullName) < 0) {\r\n      return\r\n    }\r\n\r\n    this.state.connection.removeMeFromQueue()\r\n  }\r\n\r\n  getRoleForClass() {\r\n    const { classData } = this.state\r\n    let userRole = null\r\n\r\n    classData.forEach((row) => {\r\n      let { id, role } = row\r\n      if (this.courseId === Number(id)) {\r\n        userRole = role\r\n      }\r\n    })\r\n\r\n    return userRole\r\n  }\r\n\r\n  getNextStudentInQueue() {\r\n    this.state.connection.getNextStudent()\r\n  }\r\n\r\n  render() {\r\n    const { connection } = this.state\r\n\r\n    if (!connection) {\r\n      return null\r\n    }\r\n\r\n    const userRole = this.getRoleForClass()\r\n\r\n    let buttonToDisplay = (\r\n      <div\r\n        style={{\r\n          position: 'absolute',\r\n          width: 'calc(100% - 38px)',\r\n          bottom: 14,\r\n          display: 'inline-flex',\r\n        }}\r\n      >\r\n        <Button onClick={this.addMeToQueue.bind(this)} style = {{width: '50%', fontSize: '1vw'}} primary>\r\n          Join Queue\r\n        </Button>\r\n        <Button onClick={this.removeMeFromQueue.bind(this)} style = {{width: '50%', fontSize: '1vw'}} secondary>\r\n          Leave Queue\r\n        </Button>\r\n      </div>\r\n    )\r\n\r\n    if (userRole !== 'Student') {\r\n      buttonToDisplay = (\r\n        <div\r\n          style={{\r\n            position: 'absolute',\r\n            width: 'calc(100% - 38px)',\r\n            bottom: 14,\r\n            display: 'inline-flex',\r\n          }}\r\n        >\r\n          <Button onClick={this.getNextStudentInQueue.bind(this)} primary>\r\n            Next\r\n          </Button>\r\n        </div>\r\n      )\r\n    }\r\n\r\n    const queueLabels =\r\n      this.state.displayStudentsStyle.display == 'none' ? (\r\n        <></>\r\n      ) : (\r\n        this.state.studentsInQueue.map((student) => (\r\n          <QueueLabel\r\n            vertical\r\n            style={{\r\n              fontSize: '1.2vw',\r\n              textAlign: 'center',\r\n              width: '95%',\r\n              marginBottom: '2%',\r\n              minWidth: '41px',\r\n              marginLeft: '.8%',\r\n              marginRight: '1%',\r\n            }}\r\n            key={student}\r\n          >\r\n            {student}\r\n          </QueueLabel>\r\n        ))\r\n      )\r\n\r\n    return (\r\n      <QueueDiv>\r\n        <YourTurnModal isYourTurn={this.state.isYourTurn} />\r\n\r\n        <Button.Group\r\n          size=\"huge\"\r\n          style={{ marginBottom: 12, width: '95%' }}\r\n          fluid\r\n          vertical\r\n        >\r\n          <Button\r\n            compact\r\n            content=\"Queue\"\r\n            icon={this.state.iconToDisplay}\r\n            labelPosition=\"right\"\r\n            onClick={this.alterStudentDisplay.bind(this)}\r\n            style={{\r\n              fontSize: '1.5vw',\r\n              textAlign: 'center',\r\n              width: '100%',\r\n              marginBottom: '2%',\r\n              minWidth: '41px',\r\n            }}\r\n          />\r\n        </Button.Group>\r\n\r\n        <QueueDiv\r\n          style={{ width: '100%', marginBottom: '2%', minWidth: '41px' }}\r\n        >\r\n          {queueLabels}\r\n        </QueueDiv>\r\n\r\n        {buttonToDisplay}\r\n      </QueueDiv>\r\n    )\r\n  }\r\n}\r\n\r\nexport default AuthRequired(Queue)\r\n"]},"metadata":{},"sourceType":"module"}