{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { Component } from 'react';\nimport { Modal, Button, Header, Label, Icon } from 'semantic-ui-react';\nimport { EventEmitter } from '../../util/EventEmitter';\nconst timeOutTime = 15;\nlet currTime = timeOutTime;\nconst granularity = 1000;\nlet timeOut = null;\n\nclass YourTurnModal extends Component {\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"handleJoin\", () => {\n      const {\n        TAName\n      } = this.state;\n\n      if (timeOut) {\n        clearTimeout(timeOut);\n      }\n\n      EventEmitter.publish('studentJoinTA', TAName);\n      this.setState({\n        modalState: false\n      });\n    });\n\n    _defineProperty(this, \"handleInvite\", () => {\n      const {\n        TAName\n      } = this.state;\n\n      if (timeOut) {\n        clearTimeout(timeOut);\n      }\n\n      EventEmitter.publish('studentInviteTA', TAName);\n      this.setState({\n        modalState: false\n      });\n    });\n\n    _defineProperty(this, \"handleDecline\", () => {\n      const {\n        TAName\n      } = this.state;\n\n      if (timeOut) {\n        clearTimeout(timeOut);\n      }\n\n      EventEmitter.publish('studentDeclineTA', TAName);\n      this.setState({\n        modalState: false\n      });\n    });\n\n    this.state = {\n      modalState: false,\n      currentGroup: {\n        id: '',\n        name: ''\n      },\n      TAName: '',\n      timeRemaining: currTime\n    };\n    EventEmitter.subscribe('startYourTurnModalTimer', TAName => {\n      this.setState({\n        TAName,\n        modalState: true\n      }, this.startTimer);\n    });\n    EventEmitter.subscribe('currentGroupChange', currentGroup => {\n      this.setState({\n        currentGroup\n      });\n    });\n  }\n\n  startTimer() {\n    currTime = timeOutTime;\n    timeOut = setTimeout(this.tick.bind(this), granularity);\n    this.setState({\n      timeRemaining: currTime\n    });\n  }\n\n  tick() {\n    currTime -= 1;\n\n    if (currTime === 0) {\n      this.handleTimerEnd();\n    } else {\n      timeOut = setTimeout(this.tick.bind(this), granularity);\n      this.setState({\n        timeRemaining: currTime\n      });\n    }\n  }\n\n  handleTimerEnd() {\n    const {\n      TAName\n    } = this.state;\n    EventEmitter.publish('studentTimeout', TAName);\n    this.setState({\n      modalState: false,\n      TAName: ''\n    });\n  }\n\n  enableInviteTA() {\n    return this.state.currentGroup.id !== '' && __jsx(Button, {\n      color: \"teal\",\n      onClick: this.handleInvite,\n      style: {\n        fontSize: '1vw',\n        textAlign: 'center',\n        width: '25%',\n        marginRight: '5%',\n        flex: 1\n      }\n    }, \"Invite TA\");\n  }\n\n  render() {\n    return __jsx(\"div\", null, __jsx(Modal, {\n      style: {\n        borderless: 'true',\n        width: '40%',\n        height: '40%'\n      },\n      open: this.state.modalState,\n      onClose: () => this.setState({\n        modalState: false\n      }),\n      closeOnDimmerClick: false,\n      closeOnEscape: false\n    }, __jsx(Label, {\n      style: {\n        width: '100%',\n        textAlign: 'center'\n      }\n    }, __jsx(Icon, {\n      name: \"hourglass\"\n    }), this.state.timeRemaining), __jsx(Modal.Content, {\n      style: {\n        borderless: 'true'\n      }\n    }, __jsx(Header, {\n      style: {\n        fontSize: '2vw',\n        textAlign: 'center',\n        width: '100%',\n        padding: 50,\n        height: '50%',\n        margin: 'auto'\n      }\n    }, \"Your Turn!\"), __jsx(\"div\", {\n      style: {\n        textAlign: 'center',\n        marginTop: '5%',\n        padding: 30,\n        flexDirection: 'row'\n      }\n    }, __jsx(Button, {\n      color: \"green\",\n      onClick: this.handleJoin,\n      style: {\n        fontSize: '1vw',\n        textAlign: 'center',\n        width: '25%',\n        marginRight: '5%',\n        flex: 1\n      }\n    }, \"Join TA\"), this.enableInviteTA(), __jsx(Button, {\n      color: \"red\",\n      onClick: this.handleDecline,\n      style: {\n        fontSize: '1vw',\n        textAlign: 'center',\n        width: '25%',\n        //marginLeft: '5%',\n        flex: 1\n      }\n    }, \"Decline\")))));\n  }\n\n}\n\nexport default YourTurnModal;","map":null,"metadata":{},"sourceType":"module"}