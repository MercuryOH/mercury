{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nconst url = 'ws://localhost:8080';\nimport { EventEmitter } from '../components/util/EventEmitter';\nconst role = 'Student';\n/**\r\n * QueueWebSocket controls the web socket business logic for the course queue and\r\n * functions as a controller for the queue state\r\n */\n\nexport default class StudentWebSocketClient {\n  start({\n    me,\n    courseId\n  }) {\n    const {\n      id\n    } = me;\n    this.id = id;\n    this.courseId = courseId;\n    this.connection = new WebSocket(url);\n    this.connection.onopen = this.processConnectionOpen.bind(this);\n    this.connection.onerror = this.processConnectionError.bind(this);\n    this.connection.onmessage = this.processConnectionMessage.bind(this);\n    this.defineEventEmitterCallbacks();\n  }\n\n  defineEventEmitterCallbacks() {\n    EventEmitter.subscribe('greeting', () => {\n      this.connection.send(this.prepareMessage({\n        msgType: 'greeting',\n        msg: this.id\n      }));\n    });\n    EventEmitter.subscribe('signalStudentTimeout', TAName => this.signalStudentTimeout(TAName));\n    EventEmitter.subscribe('signalJoinTA', ({\n      group,\n      TAName,\n      me\n    }) => {\n      this.signalJoinTA(group, TAName, me);\n    });\n    EventEmitter.subscribe('signalDeclineTA', TAName => {\n      this.signalDeclineTA(TAName);\n    });\n    EventEmitter.subscribe('signalCallOver', () => {\n      this.signalCallOver();\n    });\n    EventEmitter.subscribe('signalAddMeToQueue', () => {\n      this.addMeToQueue();\n    });\n    EventEmitter.subscribe('signalRemoveMeFromQueue', () => {\n      this.removeMeFromQueue();\n    });\n    EventEmitter.subscribe('sendOutInvite', ({\n      sender,\n      recepientIds,\n      group\n    }) => {\n      recepientIds.forEach(id => {\n        this.sendOutInvite(sender, id, group);\n      });\n    });\n    EventEmitter.subscribe('requestJoinGroup', data => {\n      this.connection.send(this.prepareMessage({\n        msgType: 'requestJoinGroup',\n        msg: JSON.stringify(data)\n      }));\n    });\n    EventEmitter.subscribe('acceptGroupJoinRequest', msg => {\n      this.connection.send(this.prepareMessage({\n        msgType: 'acceptGroupJoinRequest',\n        msg\n      }));\n    });\n    EventEmitter.subscribe('declineGroupJoinRequest', msg => {\n      this.connection.send(this.prepareMessage({\n        msgType: 'declineGroupJoinRequest',\n        msg\n      }));\n    });\n    EventEmitter.subscribe('classGroupSetChanged', classId => {\n      this.connection.send(this.prepareMessage({\n        msgType: 'classGroupSetChanged',\n        msg: classId\n      }));\n    });\n    EventEmitter.subscribe('userLeaveGroup', group => {\n      this.connection.send(this.prepareMessage({\n        msgType: 'userLeaveGroup',\n        msg: group\n      }));\n    });\n    EventEmitter.subscribe('userJoinGroup', groupId => {\n      this.connection.send(this.prepareMessage({\n        msgType: 'userJoinGroup',\n        msg: groupId\n      }));\n    });\n  }\n\n  processConnectionOpen() {\n    this.connection.send(this.prepareMessage({\n      msgType: 'greeting',\n      msg: this.id\n    })); // notify the server which courseId this websocket belongs to\n  }\n\n  processConnectionError(error) {\n    console.log(`WebSocket error: ${error}`);\n  }\n\n  activateYourTurnModal(TAName) {\n    EventEmitter.publish('activateYourTurnModal', TAName);\n  }\n\n  updateStudentsInQueue(msg) {\n    EventEmitter.publish('updateStudentsInQueue', msg);\n  }\n\n  updateCurrStudent(msg) {\n    EventEmitter.publish('updateCurrStudent', msg);\n  }\n\n  initializeQueueOnGreeting(msg) {\n    EventEmitter.publish('initializeQueueOnGreeting', msg);\n  }\n\n  activateReceiveInviteModal(msg) {\n    EventEmitter.publish('activateReceiveInviteModal', msg);\n  }\n\n  activateGroupJoinRequestModal(msg) {\n    EventEmitter.publish('activateGroupJoinRequestModal', msg);\n  }\n\n  joinPrivateGroupOnApproval(msg) {\n    EventEmitter.publish('joinPrivateGroupOnApproval', msg);\n  }\n\n  notifyJoinRequestDeclined(msg) {\n    EventEmitter.publish('notifyJoinRequestDeclined', msg);\n  }\n\n  notifyFetchGroups() {\n    EventEmitter.publish('fetchGroups');\n  }\n\n  processConnectionMessage(e) {\n    const {\n      msgType,\n      msg\n    } = JSON.parse(e.data);\n\n    switch (msgType) {\n      case 'greetingAck':\n        this.initializeQueueOnGreeting(msg);\n        break;\n\n      case 'queue':\n        // in this case, the server will send a message indicating the current students in the queue\n        // msg - the new queue\n        this.updateStudentsInQueue(msg);\n        break;\n\n      case 'yourTurn':\n        // in this case, which is only if you are a student, the server notifies that it is your turn\n        // msg - the TA that notifies you\n        this.activateYourTurnModal(msg);\n        break;\n\n      case 'currStudentUpdate':\n        this.updateCurrStudent(msg);\n        break;\n\n      case 'receiveInvite':\n        // in this case, another user invites you to their group\n        // msg - sender, group\n        this.activateReceiveInviteModal(msg);\n        break;\n\n      case 'groupJoinRequest':\n        this.activateGroupJoinRequestModal(msg); // msg - the name of the student wanting to join\n\n        break;\n\n      case 'groupJoinRequestApproved':\n        this.joinPrivateGroupOnApproval(msg);\n        break;\n\n      case 'groupJoinRequestDeclined':\n        this.notifyJoinRequestDeclined(msg);\n        break;\n\n      case 'fetchGroups':\n        this.notifyFetchGroups();\n        break;\n\n      default:\n        throw new Error(`Message ${msgType} is incorrectly formatted`);\n    }\n  }\n\n  addMeToQueue() {\n    this.connection.send(this.prepareMessage({\n      msgType: 'addToQueue',\n      msg: this.id\n    }));\n    EventEmitter.publish('addMeToQueue');\n  }\n\n  removeMeFromQueue() {\n    this.connection.send(this.prepareMessage({\n      msgType: 'removeFromQueue',\n      msg: this.id\n    }));\n    EventEmitter.publish('removeMeFromQueue');\n  }\n\n  signalStudentTimeout(TAName) {\n    this.connection.send(this.prepareMessage({\n      msgType: 'studentTimeout',\n      msg: TAName\n    }));\n  }\n\n  signalJoinTA(group, TAName, me) {\n    this.connection.send(this.prepareMessage({\n      msgType: 'joinTA',\n      msg: JSON.stringify({\n        group,\n        TAName,\n        me\n      })\n    }));\n    EventEmitter.publish('clearLeftSide');\n  }\n\n  signalDeclineTA(TAName) {\n    this.connection.send(this.prepareMessage({\n      msgType: 'declineTA',\n      msg: TAName\n    }));\n  }\n\n  signalCallOver() {\n    this.connection.send(this.prepareMessage({\n      msgType: 'callOver',\n      msg: 'callOver'\n    }));\n  }\n\n  sendOutInvite(sender, recepientId, group) {\n    this.connection.send(this.prepareMessage({\n      msgType: 'sendOutInvite',\n      msg: JSON.stringify({\n        sender,\n        recepientId,\n        group\n      })\n    }));\n  }\n\n  prepareMessage(msg) {\n    const {\n      courseId\n    } = this;\n\n    const enrichedPayload = _objectSpread(_objectSpread({}, msg), {}, {\n      courseId,\n      role\n    });\n\n    return JSON.stringify(enrichedPayload);\n  }\n\n}","map":{"version":3,"sources":["C:/Users/ryanj/Documents/mercury/util/studentWebSocket.js"],"names":["url","EventEmitter","role","StudentWebSocketClient","start","me","courseId","id","connection","WebSocket","onopen","processConnectionOpen","bind","onerror","processConnectionError","onmessage","processConnectionMessage","defineEventEmitterCallbacks","subscribe","send","prepareMessage","msgType","msg","TAName","signalStudentTimeout","group","signalJoinTA","signalDeclineTA","signalCallOver","addMeToQueue","removeMeFromQueue","sender","recepientIds","forEach","sendOutInvite","data","JSON","stringify","classId","groupId","error","console","log","activateYourTurnModal","publish","updateStudentsInQueue","updateCurrStudent","initializeQueueOnGreeting","activateReceiveInviteModal","activateGroupJoinRequestModal","joinPrivateGroupOnApproval","notifyJoinRequestDeclined","notifyFetchGroups","e","parse","Error","recepientId","enrichedPayload"],"mappings":"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","sourcesContent":["const url = 'ws://localhost:8080'\r\nimport { EventEmitter } from '../components/util/EventEmitter'\r\nconst role = 'Student'\r\n/**\r\n * QueueWebSocket controls the web socket business logic for the course queue and\r\n * functions as a controller for the queue state\r\n */\r\n\r\nexport default class StudentWebSocketClient {\r\n  start({ me, courseId }) {\r\n    const { id } = me\r\n    this.id = id\r\n    this.courseId = courseId\r\n\r\n    this.connection = new WebSocket(url)\r\n    this.connection.onopen = this.processConnectionOpen.bind(this)\r\n    this.connection.onerror = this.processConnectionError.bind(this)\r\n    this.connection.onmessage = this.processConnectionMessage.bind(this)\r\n\r\n    this.defineEventEmitterCallbacks()\r\n  }\r\n\r\n  defineEventEmitterCallbacks() {\r\n    EventEmitter.subscribe('greeting', () => {\r\n      this.connection.send(\r\n        this.prepareMessage({\r\n          msgType: 'greeting',\r\n          msg: this.id,\r\n        })\r\n      )\r\n    })\r\n\r\n    EventEmitter.subscribe('signalStudentTimeout', (TAName) =>\r\n      this.signalStudentTimeout(TAName)\r\n    )\r\n\r\n    EventEmitter.subscribe('signalJoinTA', ({ group, TAName, me }) => {\r\n      this.signalJoinTA(group, TAName, me)\r\n    })\r\n\r\n    EventEmitter.subscribe('signalDeclineTA', (TAName) => {\r\n      this.signalDeclineTA(TAName)\r\n    })\r\n\r\n    EventEmitter.subscribe('signalCallOver', () => {\r\n      this.signalCallOver()\r\n    })\r\n\r\n    EventEmitter.subscribe('signalAddMeToQueue', () => {\r\n      this.addMeToQueue()\r\n    })\r\n\r\n    EventEmitter.subscribe('signalRemoveMeFromQueue', () => {\r\n      this.removeMeFromQueue()\r\n    })\r\n\r\n    EventEmitter.subscribe(\r\n      'sendOutInvite',\r\n      ({ sender, recepientIds, group }) => {\r\n        recepientIds.forEach((id) => {\r\n          this.sendOutInvite(sender, id, group)\r\n        })\r\n      }\r\n    )\r\n\r\n    EventEmitter.subscribe('requestJoinGroup', (data) => {\r\n      this.connection.send(\r\n        this.prepareMessage({\r\n          msgType: 'requestJoinGroup',\r\n          msg: JSON.stringify(data),\r\n        })\r\n      )\r\n    })\r\n\r\n    EventEmitter.subscribe('acceptGroupJoinRequest', (msg) => {\r\n      this.connection.send(\r\n        this.prepareMessage({\r\n          msgType: 'acceptGroupJoinRequest',\r\n          msg,\r\n        })\r\n      )\r\n    })\r\n\r\n    EventEmitter.subscribe('declineGroupJoinRequest', (msg) => {\r\n      this.connection.send(\r\n        this.prepareMessage({\r\n          msgType: 'declineGroupJoinRequest',\r\n          msg,\r\n        })\r\n      )\r\n    })\r\n\r\n    EventEmitter.subscribe('classGroupSetChanged', (classId) => {\r\n      this.connection.send(\r\n        this.prepareMessage({\r\n          msgType: 'classGroupSetChanged',\r\n          msg: classId,\r\n        })\r\n      )\r\n    })\r\n\r\n    EventEmitter.subscribe('userLeaveGroup', (group) => {\r\n      this.connection.send(\r\n        this.prepareMessage({\r\n          msgType: 'userLeaveGroup',\r\n          msg: group,\r\n        })\r\n      )\r\n    })\r\n\r\n    EventEmitter.subscribe('userJoinGroup', (groupId) => {\r\n      this.connection.send(\r\n        this.prepareMessage({\r\n          msgType: 'userJoinGroup',\r\n          msg: groupId,\r\n        })\r\n      )\r\n    })\r\n  }\r\n\r\n  processConnectionOpen() {\r\n    this.connection.send(\r\n      this.prepareMessage({\r\n        msgType: 'greeting',\r\n        msg: this.id,\r\n      })\r\n    ) // notify the server which courseId this websocket belongs to\r\n  }\r\n\r\n  processConnectionError(error) {\r\n    console.log(`WebSocket error: ${error}`)\r\n  }\r\n\r\n  activateYourTurnModal(TAName) {\r\n    EventEmitter.publish('activateYourTurnModal', TAName)\r\n  }\r\n\r\n  updateStudentsInQueue(msg) {\r\n    EventEmitter.publish('updateStudentsInQueue', msg)\r\n  }\r\n\r\n  updateCurrStudent(msg) {\r\n    EventEmitter.publish('updateCurrStudent', msg)\r\n  }\r\n\r\n  initializeQueueOnGreeting(msg) {\r\n    EventEmitter.publish('initializeQueueOnGreeting', msg)\r\n  }\r\n\r\n  activateReceiveInviteModal(msg) {\r\n    EventEmitter.publish('activateReceiveInviteModal', msg)\r\n  }\r\n\r\n  activateGroupJoinRequestModal(msg) {\r\n    EventEmitter.publish('activateGroupJoinRequestModal', msg)\r\n  }\r\n\r\n  joinPrivateGroupOnApproval(msg) {\r\n    EventEmitter.publish('joinPrivateGroupOnApproval', msg)\r\n  }\r\n\r\n  notifyJoinRequestDeclined(msg) {\r\n    EventEmitter.publish('notifyJoinRequestDeclined', msg)\r\n  }\r\n\r\n  notifyFetchGroups() {\r\n    EventEmitter.publish('fetchGroups')\r\n  }\r\n\r\n  processConnectionMessage(e) {\r\n    const { msgType, msg } = JSON.parse(e.data)\r\n\r\n    switch (msgType) {\r\n      case 'greetingAck':\r\n        this.initializeQueueOnGreeting(msg)\r\n        break\r\n\r\n      case 'queue': // in this case, the server will send a message indicating the current students in the queue\r\n        // msg - the new queue\r\n        this.updateStudentsInQueue(msg)\r\n        break\r\n\r\n      case 'yourTurn': // in this case, which is only if you are a student, the server notifies that it is your turn\r\n        // msg - the TA that notifies you\r\n        this.activateYourTurnModal(msg)\r\n        break\r\n\r\n      case 'currStudentUpdate':\r\n        this.updateCurrStudent(msg)\r\n        break\r\n\r\n      case 'receiveInvite': // in this case, another user invites you to their group\r\n        // msg - sender, group\r\n        this.activateReceiveInviteModal(msg)\r\n        break\r\n\r\n      case 'groupJoinRequest':\r\n        this.activateGroupJoinRequestModal(msg) // msg - the name of the student wanting to join\r\n        break\r\n\r\n      case 'groupJoinRequestApproved':\r\n        this.joinPrivateGroupOnApproval(msg)\r\n        break\r\n\r\n      case 'groupJoinRequestDeclined':\r\n        this.notifyJoinRequestDeclined(msg)\r\n        break\r\n\r\n      case 'fetchGroups':\r\n        this.notifyFetchGroups()\r\n        break\r\n\r\n      default:\r\n        throw new Error(`Message ${msgType} is incorrectly formatted`)\r\n    }\r\n  }\r\n\r\n  addMeToQueue() {\r\n    this.connection.send(\r\n      this.prepareMessage({\r\n        msgType: 'addToQueue',\r\n        msg: this.id,\r\n      })\r\n    )\r\n\r\n    EventEmitter.publish('addMeToQueue')\r\n  }\r\n\r\n  removeMeFromQueue() {\r\n    this.connection.send(\r\n      this.prepareMessage({\r\n        msgType: 'removeFromQueue',\r\n        msg: this.id,\r\n      })\r\n    )\r\n\r\n    EventEmitter.publish('removeMeFromQueue')\r\n  }\r\n\r\n  signalStudentTimeout(TAName) {\r\n    this.connection.send(\r\n      this.prepareMessage({\r\n        msgType: 'studentTimeout',\r\n        msg: TAName,\r\n      })\r\n    )\r\n  }\r\n\r\n  signalJoinTA(group, TAName, me) {\r\n    this.connection.send(\r\n      this.prepareMessage({\r\n        msgType: 'joinTA',\r\n        msg: JSON.stringify({ group, TAName, me }),\r\n      })\r\n    )\r\n\r\n    EventEmitter.publish('clearLeftSide')\r\n  }\r\n\r\n  signalDeclineTA(TAName) {\r\n    this.connection.send(\r\n      this.prepareMessage({\r\n        msgType: 'declineTA',\r\n        msg: TAName,\r\n      })\r\n    )\r\n  }\r\n\r\n  signalCallOver() {\r\n    this.connection.send(\r\n      this.prepareMessage({\r\n        msgType: 'callOver',\r\n        msg: 'callOver',\r\n      })\r\n    )\r\n  }\r\n\r\n  sendOutInvite(sender, recepientId, group) {\r\n    this.connection.send(\r\n      this.prepareMessage({\r\n        msgType: 'sendOutInvite',\r\n        msg: JSON.stringify({ sender, recepientId, group }),\r\n      })\r\n    )\r\n  }\r\n\r\n  prepareMessage(msg) {\r\n    const { courseId } = this\r\n    const enrichedPayload = { ...msg, courseId, role }\r\n    return JSON.stringify(enrichedPayload)\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}