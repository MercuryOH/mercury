{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nvar url = 'ws://localhost:8080';\nvar role = 'Student';\n/**\r\n * QueueWebSocket controls the web socket business logic for the course queue and\r\n * functions as a controller for the queue state\r\n */\n\nvar StudentWebSocketController = /*#__PURE__*/function () {\n  function StudentWebSocketController(component) {\n    _classCallCheck(this, StudentWebSocketController);\n\n    this.component = component;\n  }\n\n  _createClass(StudentWebSocketController, [{\n    key: \"start\",\n    value: function start() {\n      var me = this.component.state.me;\n      var firstName = me.firstName,\n          lastName = me.lastName;\n      this.fullName = \"\".concat(firstName, \" \").concat(lastName);\n      this.connection = new WebSocket(url);\n      this.connection.onopen = this.processConnectionOpen.bind(this);\n      this.connection.onerror = this.processConnectionError.bind(this);\n      this.connection.onmessage = this.processConnectionMessage.bind(this);\n    }\n  }, {\n    key: \"processConnectionOpen\",\n    value: function processConnectionOpen() {\n      var fullName = this.fullName;\n      this.connection.send(this.prepareMessage({\n        msgType: 'greeting',\n        msg: fullName\n      })); // notify the server which courseId this websocket belongs to\n    }\n  }, {\n    key: \"processConnectionError\",\n    value: function processConnectionError(error) {\n      console.log(\"WebSocket error: \".concat(error));\n    }\n  }, {\n    key: \"activateYourTurnModal\",\n    value: function activateYourTurnModal(TAName) {\n      this.component.setState({\n        isYourTurn: true,\n        TAName: TAName,\n        inQueue: false\n      });\n    }\n  }, {\n    key: \"updateStudentsInQueue\",\n    value: function updateStudentsInQueue(msg) {\n      this.component.setState({\n        studentsInQueue: msg\n      });\n    }\n  }, {\n    key: \"processConnectionMessage\",\n    value: function processConnectionMessage(e) {\n      var _JSON$parse = JSON.parse(e.data),\n          msgType = _JSON$parse.msgType,\n          msg = _JSON$parse.msg;\n\n      switch (msgType) {\n        case 'queue':\n          // in this case, the server will send a message indicating the current students in the queue\n          // msg - the new queue\n          this.updateStudentsInQueue(msg);\n          break;\n\n        case 'yourTurn':\n          // in this case, which os only if you arw a student, the server notifies that it is your turn\n          // msg - the TA that notifies you\n          this.activateYourTurnModal(msg);\n          break;\n\n        default:\n          throw new Error(\"Message \".concat(msg, \" is incorrectly formatted\"));\n      }\n    }\n  }, {\n    key: \"addMeToQueue\",\n    value: function addMeToQueue() {\n      this.connection.send(this.prepareMessage({\n        msgType: 'addToQueue',\n        msg: this.fullName\n      }));\n      this.component.setState({\n        inQueue: true\n      });\n    }\n  }, {\n    key: \"removeMeFromQueue\",\n    value: function removeMeFromQueue() {\n      this.connection.send(this.prepareMessage({\n        msgType: 'removeFromQueue',\n        msg: this.fullName\n      }));\n      this.component.setState({\n        inQueue: false\n      });\n    }\n  }, {\n    key: \"signalStudentTimeout\",\n    value: function signalStudentTimeout() {\n      this.connection.send(this.prepareMessage({\n        msgType: 'studentTimeout',\n        msg: this.component.state.TAName\n      }));\n    }\n  }, {\n    key: \"signalJoinTA\",\n    value: function signalJoinTA(group) {\n      var TAName = this.component.state.TAName;\n      this.connection.send(this.prepareMessage({\n        msgType: 'joinTA',\n        msg: JSON.stringify({\n          group: group,\n          TAName: TAName\n        })\n      }));\n    }\n  }, {\n    key: \"signalDeclineTA\",\n    value: function signalDeclineTA() {\n      this.connection.send(this.prepareMessage({\n        msgType: 'declineTA',\n        msg: this.component.state.TAName\n      }));\n    }\n  }, {\n    key: \"prepareMessage\",\n    value: function prepareMessage(msg) {\n      var courseId = this.component.courseId;\n\n      var enrichedPayload = _objectSpread(_objectSpread({}, msg), {}, {\n        courseId: courseId,\n        role: role\n      });\n\n      return JSON.stringify(enrichedPayload);\n    }\n  }]);\n\n  return StudentWebSocketController;\n}();\n\nexport { StudentWebSocketController as default };","map":{"version":3,"sources":["C:/Users/ryanj/Documents/mercury/components/queue/student/studentWebSocket.js"],"names":["url","role","StudentWebSocketController","component","me","state","firstName","lastName","fullName","connection","WebSocket","onopen","processConnectionOpen","bind","onerror","processConnectionError","onmessage","processConnectionMessage","send","prepareMessage","msgType","msg","error","console","log","TAName","setState","isYourTurn","inQueue","studentsInQueue","e","JSON","parse","data","updateStudentsInQueue","activateYourTurnModal","Error","group","stringify","courseId","enrichedPayload"],"mappings":"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","sourcesContent":["const url = 'ws://localhost:8080'\r\nconst role = 'Student'\r\n\r\n/**\r\n * QueueWebSocket controls the web socket business logic for the course queue and\r\n * functions as a controller for the queue state\r\n */\r\n\r\nexport default class StudentWebSocketController {\r\n  constructor(component) {\r\n    this.component = component\r\n  }\r\n\r\n  start() {\r\n    const { me } = this.component.state\r\n    const { firstName, lastName } = me\r\n    this.fullName = `${firstName} ${lastName}`\r\n\r\n    this.connection = new WebSocket(url)\r\n    this.connection.onopen = this.processConnectionOpen.bind(this)\r\n    this.connection.onerror = this.processConnectionError.bind(this)\r\n    this.connection.onmessage = this.processConnectionMessage.bind(this)\r\n  }\r\n\r\n  processConnectionOpen() {\r\n    const { fullName } = this\r\n\r\n    this.connection.send(\r\n      this.prepareMessage({\r\n        msgType: 'greeting',\r\n        msg: fullName,\r\n      })\r\n    ) // notify the server which courseId this websocket belongs to\r\n  }\r\n\r\n  processConnectionError(error) {\r\n    console.log(`WebSocket error: ${error}`)\r\n  }\r\n\r\n  activateYourTurnModal(TAName) {\r\n    this.component.setState({ isYourTurn: true, TAName, inQueue: false })\r\n  }\r\n\r\n  updateStudentsInQueue(msg) {\r\n    this.component.setState({ studentsInQueue: msg })\r\n  }\r\n\r\n  processConnectionMessage(e) {\r\n    const { msgType, msg } = JSON.parse(e.data)\r\n\r\n    switch (msgType) {\r\n      case 'queue': // in this case, the server will send a message indicating the current students in the queue\r\n        // msg - the new queue\r\n        this.updateStudentsInQueue(msg)\r\n        break\r\n\r\n      case 'yourTurn': // in this case, which os only if you arw a student, the server notifies that it is your turn\r\n        // msg - the TA that notifies you\r\n        this.activateYourTurnModal(msg)\r\n        break\r\n\r\n      default:\r\n        throw new Error(`Message ${msg} is incorrectly formatted`)\r\n    }\r\n  }\r\n\r\n  addMeToQueue() {\r\n    this.connection.send(\r\n      this.prepareMessage({\r\n        msgType: 'addToQueue',\r\n        msg: this.fullName,\r\n      })\r\n    )\r\n\r\n    this.component.setState({ inQueue: true })\r\n  }\r\n\r\n  removeMeFromQueue() {\r\n    this.connection.send(\r\n      this.prepareMessage({\r\n        msgType: 'removeFromQueue',\r\n        msg: this.fullName,\r\n      })\r\n    )\r\n\r\n    this.component.setState({ inQueue: false })\r\n  }\r\n\r\n  signalStudentTimeout() {\r\n    this.connection.send(\r\n      this.prepareMessage({\r\n        msgType: 'studentTimeout',\r\n        msg: this.component.state.TAName,\r\n      })\r\n    )\r\n  }\r\n\r\n  signalJoinTA(group) {\r\n    const { TAName } = this.component.state\r\n    this.connection.send(\r\n      this.prepareMessage({\r\n        msgType: 'joinTA',\r\n        msg: JSON.stringify({ group, TAName }),\r\n      })\r\n    )\r\n  }\r\n\r\n  signalDeclineTA() {\r\n    this.connection.send(\r\n      this.prepareMessage({\r\n        msgType: 'declineTA',\r\n        msg: this.component.state.TAName,\r\n      })\r\n    )\r\n  }\r\n  prepareMessage(msg) {\r\n    const { courseId } = this.component\r\n    const enrichedPayload = { ...msg, courseId, role }\r\n    return JSON.stringify(enrichedPayload)\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}