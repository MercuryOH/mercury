{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport Publisher from './publisher';\nimport { EventEmitter } from './util/EventEmitter';\nimport { OTSubscriber, createSession } from 'opentok-react';\nimport { Button } from 'semantic-ui-react';\n\nclass ScreenContainer extends React.Component {\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"handlePublish\", () => {\n      console.log('Successfully published!');\n    });\n\n    _defineProperty(this, \"handleSubscribe\", () => {\n      console.log('Subscribed!');\n    });\n\n    _defineProperty(this, \"handleSessionError\", error => {\n      console.error(error);\n    });\n\n    _defineProperty(this, \"handlePublishError\", error => {\n      console.error(error);\n    });\n\n    _defineProperty(this, \"handleSubscribeError\", error => {\n      console.error(error);\n    });\n\n    this.state = {\n      ssButton: true,\n      streams: [],\n      focusStream: {},\n      videoButton: true,\n      expand: false,\n      searchName: '',\n      searchSession: ''\n    };\n    this.defineEventEmitterCallbacks();\n    this.sessionEventHandlers = {\n      sessionConnected: () => {},\n      sessionDisconnected: () => {},\n      sessionReconnected: () => {},\n      sessionReconnecting: () => {}\n    };\n    this.publishEventHandlers = {\n      accessDenied: () => {},\n      streamCreated: () => {},\n      streamDestroyed: () => {}\n    };\n    this.subscribeEventHandlers = {\n      videoEnabled: () => {},\n      videoDisabled: () => {}\n    };\n  }\n\n  defineEventEmitterCallbacks() {\n    EventEmitter.subscribe('disableVideoButton', () => {\n      this.setState({\n        videoButton: false\n      });\n    });\n    EventEmitter.subscribe('enableVideoButton', () => {\n      this.setState({\n        videoButton: true\n      });\n    });\n    EventEmitter.subscribe('newScreensharer', msg => {\n      console.log('yeet');\n    });\n  }\n\n  getStreamToDisplay() {\n    return this.state.expand === true ? __jsx(Button, {\n      onDoubleClick: () => {\n        this.setState({\n          focusStream: {}\n        });\n        this.setState({\n          expand: false\n        });\n      },\n      style: {\n        padding: '0px',\n        width: '100%',\n        maxHeight: '75vh',\n        margin: '0px'\n      }\n    }, __jsx(OTSubscriber, {\n      key: this.state.focusStream.id,\n      session: this.sessionHelper.session,\n      stream: this.state.focusStream,\n      properties: {\n        maxWidth: '75vw',\n        maxHeight: '74.5vh',\n        height: '84vh',\n        width: '48vw',\n        style: {\n          buttonDisplayMode: 'on',\n          nameDisplayMode: 'on'\n        }\n      },\n      onSubscribe: this.handleSubscribe,\n      onError: this.handleSubscribeError\n    })) : null;\n  }\n\n  screenShareButton() {\n    return this.state.ssButton === true ? __jsx(Button, {\n      onClick: () => {\n        EventEmitter.publish('startScreenShare');\n        this.setState({\n          ssButton: false\n        });\n      },\n      style: {\n        fontSize: '.8vw',\n        display: 'inline-flex'\n      },\n      icon: \"tv\",\n      content: \"Share Screen\"\n    }) : __jsx(Button, {\n      onClick: () => {\n        EventEmitter.publish('stopScreenShare');\n        this.setState({\n          ssButton: true\n        });\n      },\n      icon: \"tv\",\n      style: {\n        fontSize: '.8vw',\n        display: 'inline-flex'\n      },\n      content: \"Stop Screen Share\"\n    });\n  }\n\n  videoStateButton() {\n    return this.state.videoButton === true ? __jsx(Button, {\n      onClick: () => {\n        EventEmitter.publish('disableVideo');\n      },\n      icon: \"hide\",\n      style: {\n        fontSize: '.8vw',\n        display: 'inline-flex'\n      },\n      content: \"Disable video\"\n    }) : __jsx(Button, {\n      onClick: () => {\n        EventEmitter.publish('enableVideo');\n      },\n      icon: \"eye\",\n      style: {\n        fontSize: '.8vw',\n        display: 'inline-flex'\n      },\n      content: \"Enable video\"\n    });\n  }\n\n  componentWillMount() {\n    const {\n      sessionId,\n      token\n    } = this.props;\n    this.sessionHelper = createSession({\n      apiKey: `${process.env.NEXT_PUBLIC_VV_API_KEY}`,\n      sessionId: `${sessionId}`,\n      token: `${token}`,\n      onStreamsUpdated: streams => {\n        this.setState({\n          streams\n        });\n      }\n    });\n  }\n\n  componentWillUnmount() {\n    this.sessionHelper.disconnect();\n  }\n\n  render() {\n    const {\n      onLeave\n    } = this.props;\n    return __jsx(React.Fragment, null, __jsx(\"div\", {\n      style: {\n        display: 'inline-flex',\n        width: '100%',\n        maxHeight: '86vh'\n      }\n    }, __jsx(\"div\", {\n      style: {\n        width: '78%',\n        maxHeight: '85vh',\n        overflow: 'auto'\n      }\n    }, this.getStreamToDisplay()), __jsx(\"div\", {\n      style: {\n        width: '22%',\n        maxHeight: '85vh',\n        overflow: 'auto',\n        height: '1000px'\n      }\n    }, __jsx(Publisher, {\n      style: {\n        width: '13.57vw',\n        maxWidth: '13.57vw',\n        marginBottom: '5px'\n      },\n      session: this.sessionHelper.session,\n      name: this.props.name\n    }), this.state.streams.map(stream => __jsx(React.Fragment, null, __jsx(Button, {\n      onDoubleClick: () => {\n        this.setState({\n          focusStream: stream\n        });\n        this.setState({\n          expand: true\n        });\n      },\n      style: {\n        padding: '0px',\n        width: '100%',\n        maxHeight: '18vh',\n        margin: '0px'\n      }\n    }, __jsx(OTSubscriber, {\n      key: stream.id,\n      session: this.sessionHelper.session,\n      stream: stream,\n      properties: {\n        width: '100%',\n        height: '18vh',\n        maxHeight: '18vh',\n        margin: '0px',\n        style: {\n          buttonDisplayMode: 'on',\n          nameDisplayMode: 'on'\n        }\n      },\n      onSubscribe: this.handleSubscribe,\n      onError: this.handleSubscribeError\n    })))))), this.videoStateButton(), this.screenShareButton(), __jsx(Button, {\n      onClick: onLeave,\n      color: \"red\",\n      icon: \"close\",\n      style: {\n        fontSize: '.8vw',\n        display: 'inline-flex'\n      },\n      content: \"Leave call\"\n    }));\n  }\n\n}\n\nScreenContainer.propTypes = {\n  sessionId: PropTypes.string.isRequired,\n  token: PropTypes.string.isRequired,\n  onLeave: PropTypes.func.isRequired\n};\nexport default ScreenContainer;","map":{"version":3,"sources":["C:/Users/ryanj/Documents/mercury/components/screenContainer.js"],"names":["React","PropTypes","Publisher","EventEmitter","OTSubscriber","createSession","Button","ScreenContainer","Component","constructor","props","console","log","error","state","ssButton","streams","focusStream","videoButton","expand","searchName","searchSession","defineEventEmitterCallbacks","sessionEventHandlers","sessionConnected","sessionDisconnected","sessionReconnected","sessionReconnecting","publishEventHandlers","accessDenied","streamCreated","streamDestroyed","subscribeEventHandlers","videoEnabled","videoDisabled","subscribe","setState","msg","getStreamToDisplay","padding","width","maxHeight","margin","id","sessionHelper","session","maxWidth","height","style","buttonDisplayMode","nameDisplayMode","handleSubscribe","handleSubscribeError","screenShareButton","publish","fontSize","display","videoStateButton","componentWillMount","sessionId","token","apiKey","process","env","NEXT_PUBLIC_VV_API_KEY","onStreamsUpdated","componentWillUnmount","disconnect","render","onLeave","overflow","marginBottom","name","map","stream","propTypes","string","isRequired","func"],"mappings":"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","sourcesContent":["import React from 'react'\nimport PropTypes from 'prop-types'\nimport Publisher from './publisher'\nimport { EventEmitter } from './util/EventEmitter'\nimport { OTSubscriber, createSession } from 'opentok-react'\nimport { Button } from 'semantic-ui-react'\n\nclass ScreenContainer extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      ssButton: true,\n      streams: [],\n      focusStream: {},\n      videoButton: true,\n      expand: false,\n      searchName: '',\n      searchSession: '',\n    }\n\n    this.defineEventEmitterCallbacks()\n\n    this.sessionEventHandlers = {\n      sessionConnected: () => {},\n      sessionDisconnected: () => {},\n      sessionReconnected: () => {},\n      sessionReconnecting: () => {},\n    }\n\n    this.publishEventHandlers = {\n      accessDenied: () => {},\n      streamCreated: () => {},\n      streamDestroyed: () => {},\n    }\n\n    this.subscribeEventHandlers = {\n      videoEnabled: () => {},\n      videoDisabled: () => {},\n    }\n  }\n\n  handlePublish = () => {\n    console.log('Successfully published!')\n  }\n\n  handleSubscribe = () => {\n    console.log('Subscribed!')\n  }\n\n  handleSessionError = (error) => {\n    console.error(error)\n  }\n\n  handlePublishError = (error) => {\n    console.error(error)\n  }\n\n  handleSubscribeError = (error) => {\n    console.error(error)\n  }\n\n  defineEventEmitterCallbacks() {\n    EventEmitter.subscribe('disableVideoButton', () => {\n      this.setState({ videoButton: false })\n    })\n\n    EventEmitter.subscribe('enableVideoButton', () => {\n      this.setState({ videoButton: true })\n    })\n\n    EventEmitter.subscribe('newScreensharer', (msg) => {\n      console.log('yeet')\n    })\n  }\n\n  getStreamToDisplay() {\n    return this.state.expand === true ? (\n      <Button\n        onDoubleClick={() => {\n          this.setState({ focusStream: {} })\n          this.setState({ expand: false })\n        }}\n        style={{\n          padding: '0px',\n          width: '100%',\n          maxHeight: '75vh',\n          margin: '0px',\n        }}\n      >\n        <OTSubscriber\n          key={this.state.focusStream.id}\n          session={this.sessionHelper.session}\n          stream={this.state.focusStream}\n          properties={{\n            maxWidth: '75vw',\n            maxHeight: '74.5vh',\n            height: '84vh',\n            width: '48vw',\n            style: {\n              buttonDisplayMode: 'on',\n              nameDisplayMode: 'on',\n            },\n          }}\n          onSubscribe={this.handleSubscribe}\n          onError={this.handleSubscribeError}\n        />\n      </Button>\n    ) : null\n  }\n\n  screenShareButton() {\n    return this.state.ssButton === true ? (\n      <Button\n        onClick={() => {\n          EventEmitter.publish('startScreenShare')\n          this.setState({ ssButton: false })\n        }}\n        style={{ fontSize: '.8vw', display: 'inline-flex' }}\n        icon=\"tv\"\n        content=\"Share Screen\"\n      />\n    ) : (\n      <Button\n        onClick={() => {\n          EventEmitter.publish('stopScreenShare')\n          this.setState({ ssButton: true })\n        }}\n        icon=\"tv\"\n        style={{ fontSize: '.8vw', display: 'inline-flex' }}\n        content=\"Stop Screen Share\"\n      />\n    )\n  }\n\n  videoStateButton() {\n    return this.state.videoButton === true ? (\n      <Button\n        onClick={() => {\n          EventEmitter.publish('disableVideo')\n        }}\n        icon=\"hide\"\n        style={{ fontSize: '.8vw', display: 'inline-flex' }}\n        content=\"Disable video\"\n      />\n    ) : (\n      <Button\n        onClick={() => {\n          EventEmitter.publish('enableVideo')\n        }}\n        icon=\"eye\"\n        style={{ fontSize: '.8vw', display: 'inline-flex' }}\n        content=\"Enable video\"\n      />\n    )\n  }\n\n  componentWillMount() {\n    const { sessionId, token } = this.props\n    this.sessionHelper = createSession({\n      apiKey: `${process.env.NEXT_PUBLIC_VV_API_KEY}`,\n      sessionId: `${sessionId}`,\n      token: `${token}`,\n      onStreamsUpdated: (streams) => {\n        this.setState({ streams })\n      },\n    })\n  }\n\n  componentWillUnmount() {\n    this.sessionHelper.disconnect()\n  }\n\n  render() {\n    const { onLeave } = this.props\n    return (\n      <>\n        <div\n          style={{ display: 'inline-flex', width: '100%', maxHeight: '86vh' }}\n        >\n          <div style={{ width: '78%', maxHeight: '85vh', overflow: 'auto' }}>\n            {this.getStreamToDisplay()}\n          </div>\n          <div\n            style={{\n              width: '22%',\n              maxHeight: '85vh',\n              overflow: 'auto',\n              height: '1000px',\n            }}\n          >\n            <Publisher\n              style={{\n                width: '13.57vw',\n                maxWidth: '13.57vw',\n                marginBottom: '5px',\n              }}\n              session={this.sessionHelper.session}\n              name={this.props.name}\n            />\n            {this.state.streams.map((stream) => (\n              <>\n                <Button\n                  onDoubleClick={() => {\n                    this.setState({ focusStream: stream })\n                    this.setState({ expand: true })\n                  }}\n                  style={{\n                    padding: '0px',\n                    width: '100%',\n                    maxHeight: '18vh',\n                    margin: '0px',\n                  }}\n                >\n                  <OTSubscriber\n                    key={stream.id}\n                    session={this.sessionHelper.session}\n                    stream={stream}\n                    properties={{\n                      width: '100%',\n                      height: '18vh',\n                      maxHeight: '18vh',\n                      margin: '0px',\n                      style: {\n                        buttonDisplayMode: 'on',\n                        nameDisplayMode: 'on',\n                      },\n                    }}\n                    onSubscribe={this.handleSubscribe}\n                    onError={this.handleSubscribeError}\n                  />\n                </Button>\n              </>\n            ))}\n          </div>\n        </div>\n        {this.videoStateButton()}\n        {this.screenShareButton()}\n        <Button\n          onClick={onLeave}\n          color=\"red\"\n          icon=\"close\"\n          style={{ fontSize: '.8vw', display: 'inline-flex' }}\n          content=\"Leave call\"\n        />\n      </>\n    )\n  }\n}\n\nScreenContainer.propTypes = {\n  sessionId: PropTypes.string.isRequired,\n  token: PropTypes.string.isRequired,\n  onLeave: PropTypes.func.isRequired,\n}\n\nexport default ScreenContainer\n"]},"metadata":{},"sourceType":"module"}