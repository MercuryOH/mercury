{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport Publisher from './publisher';\nimport { EventEmitter } from './util/EventEmitter';\nimport { OTSession, OTPublisher, OTStreams, OTSubscriber, createSession } from 'opentok-react';\nimport { Button, List } from 'semantic-ui-react';\n\nclass Vonage extends React.Component {\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"handlePublish\", () => {\n      console.log('Successfully published!');\n    });\n\n    _defineProperty(this, \"handleSubscribe\", () => {\n      console.log('Subscribed!');\n    });\n\n    _defineProperty(this, \"handleSessionError\", error => {\n      console.error(error);\n    });\n\n    _defineProperty(this, \"handlePublishError\", error => {\n      console.error(error);\n    });\n\n    _defineProperty(this, \"handleSubscribeError\", error => {\n      console.error(error);\n    });\n\n    this.state = {\n      ssButton: true,\n      streams: []\n    };\n    this.sessionEventHandlers = {\n      sessionConnected: () => {},\n      sessionDisconnected: () => {},\n      sessionReconnected: () => {},\n      sessionReconnecting: () => {}\n    };\n    this.publishEventHandlers = {\n      accessDenied: () => {},\n      streamCreated: () => {},\n      streamDestroyed: () => {}\n    };\n    this.subscribeEventHandlers = {\n      videoEnabled: () => {},\n      videoDisabled: () => {}\n    };\n  }\n\n  screenShareButton() {\n    return this.state.ssButton === true ? __jsx(Button, {\n      onClick: () => {\n        EventEmitter.publish('startScreenShare');\n        EventEmitter.publish('disableVideo');\n        this.setState({\n          ssButton: false\n        });\n      },\n      style: {\n        fontSize: '.8vw',\n        display: 'inline-flex'\n      },\n      content: \"Share Screen\"\n    }) : __jsx(Button, {\n      onClick: () => {\n        EventEmitter.publish('stopScreenShare');\n        EventEmitter.publish('enableVideo');\n        this.setState({\n          ssButton: true\n        });\n      },\n      style: {\n        fontSize: '.8vw',\n        display: 'inline-flex'\n      },\n      content: \"Stop Screen Share\"\n    });\n  }\n\n  componentWillMount() {\n    this.sessionHelper = createSession({\n      apiKey: `${process.env.NEXT_PUBLIC_VV_API_KEY}`,\n      sessionId: `${sessionId}`,\n      token: `${token}`,\n      onStreamsUpdated: streams => {\n        this.setState({\n          streams\n        });\n      }\n    });\n  }\n\n  componentWillUnmount() {\n    this.sessionHelper.disconnect();\n  }\n\n  render() {\n    const {\n      sessionId,\n      token,\n      onLeave\n    } = this.props;\n    return __jsx(\"div\", null, __jsx(Publisher, {\n      session: this.sessionHelper.session\n    }), this.state.streams.map(stream => __jsx(OTSubscriber, {\n      key: stream.id,\n      session: this.sessionHelper.session,\n      stream: stream,\n      properties: {\n        width: '100%',\n        height: '50vh'\n      },\n      onSubscribe: this.handleSubscribe,\n      onError: this.handleSubscribeError\n    })), this.screenShareButton(), __jsx(Button, {\n      onClick: onLeave,\n      color: \"red\",\n      icon: \"close\",\n      style: {\n        fontSize: '.8vw',\n        display: 'inline-flex'\n      },\n      content: \"Leave call\"\n    }));\n  }\n\n}\n\nVonage.propTypes = {\n  sessionId: PropTypes.string.isRequired,\n  token: PropTypes.string.isRequired,\n  onLeave: PropTypes.func.isRequired\n};\nexport default Vonage;","map":{"version":3,"sources":["C:/Users/ryanj/Documents/mercury/components/vonage.js"],"names":["React","PropTypes","Publisher","EventEmitter","OTSession","OTPublisher","OTStreams","OTSubscriber","createSession","Button","List","Vonage","Component","constructor","props","console","log","error","state","ssButton","streams","sessionEventHandlers","sessionConnected","sessionDisconnected","sessionReconnected","sessionReconnecting","publishEventHandlers","accessDenied","streamCreated","streamDestroyed","subscribeEventHandlers","videoEnabled","videoDisabled","screenShareButton","publish","setState","fontSize","display","componentWillMount","sessionHelper","apiKey","process","env","NEXT_PUBLIC_VV_API_KEY","sessionId","token","onStreamsUpdated","componentWillUnmount","disconnect","render","onLeave","session","map","stream","id","width","height","handleSubscribe","handleSubscribeError","propTypes","string","isRequired","func"],"mappings":"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","sourcesContent":["import React from 'react'\nimport PropTypes from 'prop-types'\nimport Publisher from './publisher'\nimport { EventEmitter } from './util/EventEmitter'\nimport { OTSession, OTPublisher, OTStreams, OTSubscriber, createSession } from 'opentok-react'\nimport { Button, List } from 'semantic-ui-react'\n\nclass Vonage extends React.Component {\n  constructor(props) {\n    super(props)\n\n    this.state = {\n      ssButton: true,\n      streams: []\n    }\n\n\n    this.sessionEventHandlers = {\n      sessionConnected: () => {},\n      sessionDisconnected: () => {},\n      sessionReconnected: () => {},\n      sessionReconnecting: () => {},\n    }\n\n    this.publishEventHandlers = {\n      accessDenied: () => {},\n      streamCreated: () => {},\n      streamDestroyed: () => {},\n    }\n\n    this.subscribeEventHandlers = {\n      videoEnabled: () => {},\n      videoDisabled: () => {},\n    }\n  }\n\n  handlePublish = () => {\n    console.log('Successfully published!')\n  }\n\n  handleSubscribe = () => {\n    console.log('Subscribed!')\n  }\n\n  handleSessionError = (error) => {\n    console.error(error)\n  }\n\n  handlePublishError = (error) => {\n    console.error(error)\n  }\n\n  handleSubscribeError = (error) => {\n    console.error(error)\n  }\n\n  screenShareButton() {\n    return this.state.ssButton === true ? (\n      <Button\n        onClick = {() => {\n          EventEmitter.publish('startScreenShare')\n          EventEmitter.publish('disableVideo')\n          this.setState({ssButton: false})\n          }\n        }\n        style = {{fontSize: '.8vw', display: 'inline-flex'}}\n        content = \"Share Screen\"\n      />\n    ) : (\n      <Button\n          onClick = {() => {\n              EventEmitter.publish('stopScreenShare')\n              EventEmitter.publish('enableVideo')\n              this.setState({ssButton: true})\n            }\n          }\n          style = {{fontSize: '.8vw', display: 'inline-flex'}}\n          content = \"Stop Screen Share\"\n        />\n    )\n  }\n\n  componentWillMount() {\n    this.sessionHelper = createSession({\n      apiKey: `${process.env.NEXT_PUBLIC_VV_API_KEY}`,\n      sessionId: `${sessionId}`,\n      token: `${token}`,\n      onStreamsUpdated: streams => { this.setState({ streams }); }\n    });\n  }\n\n  componentWillUnmount() {\n    this.sessionHelper.disconnect();\n  }\n\n  render() {\n    const { sessionId, token, onLeave } = this.props\n    return (\n      <div>\n          <Publisher session={this.sessionHelper.session}/>\n          {this.state.streams.map(stream => (\n            <OTSubscriber\n              key={stream.id}\n              session={this.sessionHelper.session}\n              stream={stream}\n              properties={{ width: '100%', height: '50vh' }}\n              onSubscribe={this.handleSubscribe}\n              onError={this.handleSubscribeError}\n            />\n          ))}\n          {this.screenShareButton()}\n          <Button\n            onClick={onLeave}\n            color=\"red\"\n            icon=\"close\"\n            style = {{fontSize: '.8vw', display: 'inline-flex'}}\n            content=\"Leave call\"\n          />\n      </div>\n    )\n  }\n}\n\n\nVonage.propTypes = {\n  sessionId: PropTypes.string.isRequired,\n  token: PropTypes.string.isRequired,\n  onLeave: PropTypes.func.isRequired,\n}\n\nexport default Vonage\n"]},"metadata":{},"sourceType":"module"}