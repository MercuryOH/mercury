{"ast":null,"code":"/**\r\n * Map group ID to the set of websockets involved in the group\r\n * Controls deletion of groups when they become non-empty\r\n * Manages leader designation\r\n */\nclass GroupManager {\n  constructor() {\n    this.groupToSockets = new Map();\n  }\n\n  addSocketToGroup(groupId, ws) {\n    if (!this.groupToSockets.has(groupId)) {\n      this.groupToSockets.set(groupId, new Set());\n    }\n\n    this.groupToSockets.get(groupId).add(ws);\n  }\n\n  removeSocketFromGroup(groupId, ws) {\n    if (this.groupToSockets.has(groupId)) {\n      const sockets = this.groupToSockets.get(groupId);\n\n      if (sockets.has(ws)) {\n        sockets.delete(ws);\n      }\n    }\n  }\n\n  getGroupSize(groupId) {\n    if (this.groupToSockets.has(groupId)) {\n      return this.groupToSockets.get(groupId).size;\n    }\n\n    return 0;\n  }\n\n}\n\nmodule.exports = {\n  groupManager: new GroupManager()\n};","map":{"version":3,"sources":["C:/Users/ryanj/Documents/mercury/websocket/util/groupmanager.js"],"names":["GroupManager","constructor","groupToSockets","Map","addSocketToGroup","groupId","ws","has","set","Set","get","add","removeSocketFromGroup","sockets","delete","getGroupSize","size","module","exports","groupManager"],"mappings":"AAAA;;;;;AAMA,MAAMA,YAAN,CAAmB;AACjBC,EAAAA,WAAW,GAAG;AACZ,SAAKC,cAAL,GAAsB,IAAIC,GAAJ,EAAtB;AACD;;AAEDC,EAAAA,gBAAgB,CAACC,OAAD,EAAUC,EAAV,EAAc;AAC5B,QAAI,CAAC,KAAKJ,cAAL,CAAoBK,GAApB,CAAwBF,OAAxB,CAAL,EAAuC;AACrC,WAAKH,cAAL,CAAoBM,GAApB,CAAwBH,OAAxB,EAAiC,IAAII,GAAJ,EAAjC;AACD;;AAED,SAAKP,cAAL,CAAoBQ,GAApB,CAAwBL,OAAxB,EAAiCM,GAAjC,CAAqCL,EAArC;AACD;;AAEDM,EAAAA,qBAAqB,CAACP,OAAD,EAAUC,EAAV,EAAc;AACjC,QAAI,KAAKJ,cAAL,CAAoBK,GAApB,CAAwBF,OAAxB,CAAJ,EAAsC;AACpC,YAAMQ,OAAO,GAAG,KAAKX,cAAL,CAAoBQ,GAApB,CAAwBL,OAAxB,CAAhB;;AACA,UAAIQ,OAAO,CAACN,GAAR,CAAYD,EAAZ,CAAJ,EAAqB;AACnBO,QAAAA,OAAO,CAACC,MAAR,CAAeR,EAAf;AACD;AACF;AACF;;AAEDS,EAAAA,YAAY,CAACV,OAAD,EAAU;AACpB,QAAI,KAAKH,cAAL,CAAoBK,GAApB,CAAwBF,OAAxB,CAAJ,EAAsC;AACpC,aAAO,KAAKH,cAAL,CAAoBQ,GAApB,CAAwBL,OAAxB,EAAiCW,IAAxC;AACD;;AAED,WAAO,CAAP;AACD;;AA5BgB;;AA+BnBC,MAAM,CAACC,OAAP,GAAiB;AACfC,EAAAA,YAAY,EAAE,IAAInB,YAAJ;AADC,CAAjB","sourcesContent":["/**\r\n * Map group ID to the set of websockets involved in the group\r\n * Controls deletion of groups when they become non-empty\r\n * Manages leader designation\r\n */\r\n\r\nclass GroupManager {\r\n  constructor() {\r\n    this.groupToSockets = new Map()\r\n  }\r\n\r\n  addSocketToGroup(groupId, ws) {\r\n    if (!this.groupToSockets.has(groupId)) {\r\n      this.groupToSockets.set(groupId, new Set())\r\n    }\r\n\r\n    this.groupToSockets.get(groupId).add(ws)\r\n  }\r\n\r\n  removeSocketFromGroup(groupId, ws) {\r\n    if (this.groupToSockets.has(groupId)) {\r\n      const sockets = this.groupToSockets.get(groupId)\r\n      if (sockets.has(ws)) {\r\n        sockets.delete(ws)\r\n      }\r\n    }\r\n  }\r\n\r\n  getGroupSize(groupId) {\r\n    if (this.groupToSockets.has(groupId)) {\r\n      return this.groupToSockets.get(groupId).size\r\n    }\r\n\r\n    return 0\r\n  }\r\n}\r\n\r\nmodule.exports = {\r\n  groupManager: new GroupManager(),\r\n}\r\n"]},"metadata":{},"sourceType":"script"}