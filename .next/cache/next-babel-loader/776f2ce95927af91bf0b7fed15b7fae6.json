{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { Component } from 'react';\nimport styled from 'styled-components';\nimport YourTurnModal from './yourTurnModal';\nimport { Label, Button } from 'semantic-ui-react';\nimport { NotificationContainer, NotificationManager } from 'react-notifications';\nimport { EventEmitter } from '../../util/EventEmitter';\nconst QueueDiv = styled.div.withConfig({\n  displayName: \"studentQueueView__QueueDiv\",\n  componentId: \"sc-1qcvoz5-0\"\n})([\"grid-gap:2vh;\"]);\nconst QueueLabel = styled(Label).withConfig({\n  displayName: \"studentQueueView__QueueLabel\",\n  componentId: \"sc-1qcvoz5-1\"\n})([\"text-align:center;\"]);\n/**\r\n * This is how the student views the Queue\r\n */\n\nclass StudentQueueView extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      displayStudentsStyle: {\n        display: 'grid'\n      },\n      iconToDisplay: 'caret square down outline',\n      studentsInQueue: [],\n      me: this.props.me,\n      inQueue: false,\n      isYourTurn: false,\n      currStudentBeingHelped: '',\n      isReadyToRender: false,\n      office: this.props.office,\n      inCallWithTA: false,\n      currentGroup: {\n        id: '',\n        name: ''\n      },\n      onJoin: this.props.onJoin\n    };\n    this.defineEventEmitterCallbacks();\n  }\n  /**\r\n   * Define EventEmitter subscribers\r\n   */\n\n\n  defineEventEmitterCallbacks() {\n    EventEmitter.subscribe('activateYourTurnModal', TAName => {\n      this.setState({\n        inQueue: false\n      });\n      EventEmitter.publish('startYourTurnModalTimer', TAName);\n    });\n    EventEmitter.subscribe('updateStudentsInQueue', msg => {\n      this.setState({\n        studentsInQueue: msg.map(({\n          fullName\n        }) => fullName)\n      });\n    });\n    EventEmitter.subscribe('addMeToQueue', () => {\n      this.setState({\n        inQueue: true\n      });\n    });\n    EventEmitter.subscribe('removeMeFromQueue', () => {\n      this.setState({\n        inQueue: false\n      });\n    });\n    EventEmitter.subscribe('studentTimeout', TAName => {\n      EventEmitter.publish('signalStudentTimeout', TAName);\n      this.createTimeoutNotification();\n    });\n    EventEmitter.subscribe('studentJoinTA', TAName => {\n      const {\n        office,\n        onJoin,\n        me\n      } = this.state;\n      EventEmitter.publish('signalJoinTA', {\n        group: office,\n        TAName,\n        me\n      });\n      onJoin(office);\n      this.setState({\n        inQueue: false,\n        inCallWithTA: true\n      });\n    });\n    EventEmitter.subscribe('studentInviteTA', TAName => {\n      const {\n        currentGroup,\n        me\n      } = this.state;\n      EventEmitter.publish('signalJoinTA', {\n        group: currentGroup,\n        TAName,\n        me\n      });\n      this.setState({\n        inQueue: false,\n        inCallWithTA: true\n      });\n    });\n    EventEmitter.subscribe('studentDeclineTA', TAName => {\n      EventEmitter.publish('signalDeclineTA', TAName);\n      this.setState({\n        inQueue: false\n      });\n    });\n    EventEmitter.subscribe('currentGroupChange', currentGroup => {\n      this.setState({\n        currentGroup\n      });\n    });\n    EventEmitter.subscribe('callOver', classId => {\n      const {\n        inCallWithTA\n      } = this.state;\n\n      if (inCallWithTA) {\n        EventEmitter.publish('signalCallOver');\n        EventEmitter.publish('activateFeedbackModal', classId);\n        this.setState({\n          inCallWithTA: false,\n          currStudentBeingHelped: ''\n        });\n      }\n    });\n    EventEmitter.subscribe('updateCurrStudent', currStudentBeingHelped => {\n      this.setState({\n        currStudentBeingHelped\n      });\n    });\n    EventEmitter.subscribe('initializeQueueOnGreeting', ({\n      currStudent,\n      studentsInQueue\n    }) => {\n      const {\n        id: myId\n      } = this.state.me;\n      const inQueue = studentsInQueue.filter(({\n        id\n      }) => id === myId).length > 0;\n      this.setState({\n        currStudentBeingHelped: currStudent,\n        studentsInQueue: studentsInQueue.map(({\n          fullName\n        }) => fullName),\n        inQueue\n      });\n    });\n  }\n\n  createTimeoutNotification() {\n    NotificationManager.info('Your Invitation Has Expired');\n  }\n\n  isStudentDisplayed() {\n    let {\n      display\n    } = this.state.displayStudentsStyle;\n    return display === 'grid';\n  }\n\n  alterStudentDisplay() {\n    let displayStudentsStyle = this.isStudentDisplayed() ? {\n      display: 'none'\n    } : {\n      display: 'grid'\n    };\n    let iconToDisplay = this.isStudentDisplayed() ? 'caret square up outline' : 'caret square down outline';\n    this.setState({\n      displayStudentsStyle,\n      iconToDisplay\n    });\n  }\n\n  addMeToQueue() {\n    const {\n      firstName,\n      lastName\n    } = this.state.me;\n    const fullName = `${firstName} ${lastName}`;\n\n    if (this.state.studentsInQueue.indexOf(fullName) >= 0 || this.state.currStudentBeingHelped === fullName) {\n      return;\n    }\n\n    EventEmitter.publish('signalAddMeToQueue');\n  }\n\n  removeMeFromQueue() {\n    const {\n      firstName,\n      lastName\n    } = this.state.me;\n    const fullName = `${firstName} ${lastName}`;\n\n    if (this.state.studentsInQueue.indexOf(fullName) < 0) {\n      return;\n    }\n\n    EventEmitter.publish('signalRemoveMeFromQueue');\n  }\n\n  getButtonToDisplay() {\n    if (this.state.inCallWithTA) {\n      return null;\n    }\n\n    const buttonToDisplay = this.state.inQueue ? __jsx(Button, {\n      onClick: this.removeMeFromQueue.bind(this),\n      style: {\n        width: '100%',\n        fontSize: '1vw'\n      },\n      secondary: true\n    }, \"Leave Queue\") : __jsx(Button, {\n      onClick: this.addMeToQueue.bind(this),\n      style: {\n        width: '100%',\n        fontSize: '1vw'\n      },\n      primary: true\n    }, \"Join Queue\");\n    return __jsx(\"div\", {\n      style: {\n        position: 'absolute',\n        width: 'calc(100% - 38px)',\n        bottom: 14,\n        display: 'inline-flex'\n      }\n    }, buttonToDisplay);\n  }\n\n  componentDidMount() {\n    EventEmitter.publish('greeting');\n    this.setState({\n      isReadyToRender: true\n    });\n  }\n\n  createCurrStudentLabel() {\n    const {\n      currStudentBeingHelped\n    } = this.state;\n\n    if (currStudentBeingHelped.length == 0) {\n      return null;\n    }\n\n    return __jsx(QueueLabel, {\n      style: {\n        fontSize: '1.2vw',\n        textAlign: 'center',\n        width: '95%',\n        marginBottom: '2%',\n        minWidth: '41px',\n        marginLeft: '.8%',\n        backgroundColor: 'red',\n        marginRight: '1%'\n      },\n      key: currStudentBeingHelped\n    }, currStudentBeingHelped);\n  }\n\n  createQueueLabel(student) {\n    return __jsx(QueueLabel, {\n      style: {\n        fontSize: '1.2vw',\n        textAlign: 'center',\n        width: '95%',\n        marginBottom: '2%',\n        minWidth: '41px',\n        marginLeft: '.8%',\n        marginRight: '1%'\n      },\n      key: student\n    }, student);\n  }\n\n  render() {\n    const {\n      isReadyToRender\n    } = this.state;\n\n    if (!isReadyToRender) {\n      return null;\n    }\n\n    const queueLabels = this.isStudentDisplayed() ? this.state.studentsInQueue.map(this.createQueueLabel) : [];\n    return __jsx(QueueDiv, null, __jsx(YourTurnModal, null), __jsx(Button.Group, {\n      size: \"huge\",\n      style: {\n        marginBottom: 12,\n        width: '95%'\n      },\n      fluid: true,\n      vertical: true\n    }, __jsx(Button, {\n      compact: true,\n      content: \"Queue\",\n      icon: this.state.iconToDisplay,\n      labelPosition: \"right\",\n      onClick: this.alterStudentDisplay.bind(this),\n      style: {\n        fontSize: '1.5vw',\n        textAlign: 'center',\n        width: '100%',\n        marginBottom: '2%',\n        minWidth: '41px'\n      }\n    })), this.createCurrStudentLabel(), __jsx(QueueDiv, {\n      style: {\n        width: '100%',\n        marginBottom: '2%',\n        minWidth: '41px'\n      }\n    }, queueLabels), this.getButtonToDisplay(), __jsx(NotificationContainer, null));\n  }\n\n}\n\nexport default StudentQueueView;","map":null,"metadata":{},"sourceType":"module"}