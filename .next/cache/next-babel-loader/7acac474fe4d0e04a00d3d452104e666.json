{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nconst url = 'ws://localhost:8080';\nconst role = 'Student';\n/**\r\n * QueueWebSocket controls the web socket business logic for the course queue and\r\n * functions as a controller for the queue state\r\n */\n\nexport default class StudentWebSocketController {\n  constructor(component) {\n    this.component = component;\n  }\n\n  start() {\n    const {\n      me\n    } = this.component.state;\n    const {\n      firstName,\n      lastName\n    } = me;\n    this.fullName = `${firstName} ${lastName}`;\n    this.connection = new WebSocket(url);\n    this.connection.onopen = this.processConnectionOpen.bind(this);\n    this.connection.onerror = this.processConnectionError.bind(this);\n    this.connection.onmessage = this.processConnectionMessage.bind(this);\n  }\n\n  processConnectionOpen() {\n    const {\n      fullName\n    } = this;\n    this.connection.send(this.prepareMessage({\n      msgType: 'greeting',\n      msg: fullName\n    })); // notify the server which courseId this websocket belongs to\n  }\n\n  processConnectionError(error) {\n    console.log(`WebSocket error: ${error}`);\n  }\n\n  activateYourTurnModal(TAName) {\n    this.component.setState({\n      isYourTurn: true,\n      TAName,\n      inQueue: false\n    });\n  }\n\n  updateStudentsInQueue(msg) {\n    this.component.setState({\n      studentsInQueue: msg\n    });\n  }\n\n  processConnectionMessage(e) {\n    const {\n      msgType,\n      msg\n    } = JSON.parse(e.data);\n\n    switch (msgType) {\n      case 'queue':\n        // in this case, the server will send a message indicating the current students in the queue\n        // msg - the new queue\n        this.updateStudentsInQueue(msg);\n        break;\n\n      case 'yourTurn':\n        // in this case, which os only if you arw a student, the server notifies that it is your turn\n        // msg - the TA that notifies you\n        this.activateYourTurnModal(msg);\n        break;\n\n      default:\n        throw new Error(`Message ${msg} is incorrectly formatted`);\n    }\n  }\n\n  addMeToQueue() {\n    this.connection.send(this.prepareMessage({\n      msgType: 'addToQueue',\n      msg: this.fullName\n    }));\n    this.component.setState({\n      inQueue: true\n    });\n  }\n\n  removeMeFromQueue() {\n    this.connection.send(this.prepareMessage({\n      msgType: 'removeFromQueue',\n      msg: this.fullName\n    }));\n    this.component.setState({\n      inQueue: false\n    });\n  }\n\n  signalStudentTimeout() {\n    this.connection.send(this.prepareMessage({\n      msgType: 'studentTimeout',\n      msg: this.component.state.TAName\n    }));\n  }\n\n  prepareMessage(msg) {\n    const {\n      courseId\n    } = this.component;\n\n    const enrichedPayload = _objectSpread(_objectSpread({}, msg), {}, {\n      courseId,\n      role\n    });\n\n    return JSON.stringify(enrichedPayload);\n  }\n\n}","map":{"version":3,"sources":["C:/Users/ryanj/Documents/mercury/components/queue/student/studentWebSocket.js"],"names":["url","role","StudentWebSocketController","constructor","component","start","me","state","firstName","lastName","fullName","connection","WebSocket","onopen","processConnectionOpen","bind","onerror","processConnectionError","onmessage","processConnectionMessage","send","prepareMessage","msgType","msg","error","console","log","activateYourTurnModal","TAName","setState","isYourTurn","inQueue","updateStudentsInQueue","studentsInQueue","e","JSON","parse","data","Error","addMeToQueue","removeMeFromQueue","signalStudentTimeout","courseId","enrichedPayload","stringify"],"mappings":";;;;;;AAAA,MAAMA,GAAG,GAAG,qBAAZ;AACA,MAAMC,IAAI,GAAG,SAAb;AAEA;;;;;AAKA,eAAe,MAAMC,0BAAN,CAAiC;AAC9CC,EAAAA,WAAW,CAACC,SAAD,EAAY;AACrB,SAAKA,SAAL,GAAiBA,SAAjB;AACD;;AAEDC,EAAAA,KAAK,GAAG;AACN,UAAM;AAAEC,MAAAA;AAAF,QAAS,KAAKF,SAAL,CAAeG,KAA9B;AACA,UAAM;AAAEC,MAAAA,SAAF;AAAaC,MAAAA;AAAb,QAA0BH,EAAhC;AACA,SAAKI,QAAL,GAAiB,GAAEF,SAAU,IAAGC,QAAS,EAAzC;AAEA,SAAKE,UAAL,GAAkB,IAAIC,SAAJ,CAAcZ,GAAd,CAAlB;AACA,SAAKW,UAAL,CAAgBE,MAAhB,GAAyB,KAAKC,qBAAL,CAA2BC,IAA3B,CAAgC,IAAhC,CAAzB;AACA,SAAKJ,UAAL,CAAgBK,OAAhB,GAA0B,KAAKC,sBAAL,CAA4BF,IAA5B,CAAiC,IAAjC,CAA1B;AACA,SAAKJ,UAAL,CAAgBO,SAAhB,GAA4B,KAAKC,wBAAL,CAA8BJ,IAA9B,CAAmC,IAAnC,CAA5B;AACD;;AAEDD,EAAAA,qBAAqB,GAAG;AACtB,UAAM;AAAEJ,MAAAA;AAAF,QAAe,IAArB;AAEA,SAAKC,UAAL,CAAgBS,IAAhB,CACE,KAAKC,cAAL,CAAoB;AAClBC,MAAAA,OAAO,EAAE,UADS;AAElBC,MAAAA,GAAG,EAAEb;AAFa,KAApB,CADF,EAHsB,CAQpB;AACH;;AAEDO,EAAAA,sBAAsB,CAACO,KAAD,EAAQ;AAC5BC,IAAAA,OAAO,CAACC,GAAR,CAAa,oBAAmBF,KAAM,EAAtC;AACD;;AAEDG,EAAAA,qBAAqB,CAACC,MAAD,EAAS;AAC5B,SAAKxB,SAAL,CAAeyB,QAAf,CAAwB;AAAEC,MAAAA,UAAU,EAAE,IAAd;AAAoBF,MAAAA,MAApB;AAA4BG,MAAAA,OAAO,EAAE;AAArC,KAAxB;AACD;;AAEDC,EAAAA,qBAAqB,CAACT,GAAD,EAAM;AACzB,SAAKnB,SAAL,CAAeyB,QAAf,CAAwB;AAAEI,MAAAA,eAAe,EAAEV;AAAnB,KAAxB;AACD;;AAEDJ,EAAAA,wBAAwB,CAACe,CAAD,EAAI;AAC1B,UAAM;AAAEZ,MAAAA,OAAF;AAAWC,MAAAA;AAAX,QAAmBY,IAAI,CAACC,KAAL,CAAWF,CAAC,CAACG,IAAb,CAAzB;;AAEA,YAAQf,OAAR;AACE,WAAK,OAAL;AAAc;AACZ;AACA,aAAKU,qBAAL,CAA2BT,GAA3B;AACA;;AAEF,WAAK,UAAL;AAAiB;AACf;AACA,aAAKI,qBAAL,CAA2BJ,GAA3B;AACA;;AAEF;AACE,cAAM,IAAIe,KAAJ,CAAW,WAAUf,GAAI,2BAAzB,CAAN;AAZJ;AAcD;;AAEDgB,EAAAA,YAAY,GAAG;AACb,SAAK5B,UAAL,CAAgBS,IAAhB,CACE,KAAKC,cAAL,CAAoB;AAClBC,MAAAA,OAAO,EAAE,YADS;AAElBC,MAAAA,GAAG,EAAE,KAAKb;AAFQ,KAApB,CADF;AAOA,SAAKN,SAAL,CAAeyB,QAAf,CAAwB;AAAEE,MAAAA,OAAO,EAAE;AAAX,KAAxB;AACD;;AAEDS,EAAAA,iBAAiB,GAAG;AAClB,SAAK7B,UAAL,CAAgBS,IAAhB,CACE,KAAKC,cAAL,CAAoB;AAClBC,MAAAA,OAAO,EAAE,iBADS;AAElBC,MAAAA,GAAG,EAAE,KAAKb;AAFQ,KAApB,CADF;AAOA,SAAKN,SAAL,CAAeyB,QAAf,CAAwB;AAAEE,MAAAA,OAAO,EAAE;AAAX,KAAxB;AACD;;AAEDU,EAAAA,oBAAoB,GAAG;AACrB,SAAK9B,UAAL,CAAgBS,IAAhB,CACE,KAAKC,cAAL,CAAoB;AAClBC,MAAAA,OAAO,EAAE,gBADS;AAElBC,MAAAA,GAAG,EAAE,KAAKnB,SAAL,CAAeG,KAAf,CAAqBqB;AAFR,KAApB,CADF;AAMD;;AAEDP,EAAAA,cAAc,CAACE,GAAD,EAAM;AAClB,UAAM;AAAEmB,MAAAA;AAAF,QAAe,KAAKtC,SAA1B;;AACA,UAAMuC,eAAe,mCAAQpB,GAAR;AAAamB,MAAAA,QAAb;AAAuBzC,MAAAA;AAAvB,MAArB;;AACA,WAAOkC,IAAI,CAACS,SAAL,CAAeD,eAAf,CAAP;AACD;;AA7F6C","sourcesContent":["const url = 'ws://localhost:8080'\r\nconst role = 'Student'\r\n\r\n/**\r\n * QueueWebSocket controls the web socket business logic for the course queue and\r\n * functions as a controller for the queue state\r\n */\r\n\r\nexport default class StudentWebSocketController {\r\n  constructor(component) {\r\n    this.component = component\r\n  }\r\n\r\n  start() {\r\n    const { me } = this.component.state\r\n    const { firstName, lastName } = me\r\n    this.fullName = `${firstName} ${lastName}`\r\n\r\n    this.connection = new WebSocket(url)\r\n    this.connection.onopen = this.processConnectionOpen.bind(this)\r\n    this.connection.onerror = this.processConnectionError.bind(this)\r\n    this.connection.onmessage = this.processConnectionMessage.bind(this)\r\n  }\r\n\r\n  processConnectionOpen() {\r\n    const { fullName } = this\r\n\r\n    this.connection.send(\r\n      this.prepareMessage({\r\n        msgType: 'greeting',\r\n        msg: fullName,\r\n      })\r\n    ) // notify the server which courseId this websocket belongs to\r\n  }\r\n\r\n  processConnectionError(error) {\r\n    console.log(`WebSocket error: ${error}`)\r\n  }\r\n\r\n  activateYourTurnModal(TAName) {\r\n    this.component.setState({ isYourTurn: true, TAName, inQueue: false })\r\n  }\r\n\r\n  updateStudentsInQueue(msg) {\r\n    this.component.setState({ studentsInQueue: msg })\r\n  }\r\n\r\n  processConnectionMessage(e) {\r\n    const { msgType, msg } = JSON.parse(e.data)\r\n\r\n    switch (msgType) {\r\n      case 'queue': // in this case, the server will send a message indicating the current students in the queue\r\n        // msg - the new queue\r\n        this.updateStudentsInQueue(msg)\r\n        break\r\n\r\n      case 'yourTurn': // in this case, which os only if you arw a student, the server notifies that it is your turn\r\n        // msg - the TA that notifies you\r\n        this.activateYourTurnModal(msg)\r\n        break\r\n\r\n      default:\r\n        throw new Error(`Message ${msg} is incorrectly formatted`)\r\n    }\r\n  }\r\n\r\n  addMeToQueue() {\r\n    this.connection.send(\r\n      this.prepareMessage({\r\n        msgType: 'addToQueue',\r\n        msg: this.fullName,\r\n      })\r\n    )\r\n\r\n    this.component.setState({ inQueue: true })\r\n  }\r\n\r\n  removeMeFromQueue() {\r\n    this.connection.send(\r\n      this.prepareMessage({\r\n        msgType: 'removeFromQueue',\r\n        msg: this.fullName,\r\n      })\r\n    )\r\n\r\n    this.component.setState({ inQueue: false })\r\n  }\r\n\r\n  signalStudentTimeout() {\r\n    this.connection.send(\r\n      this.prepareMessage({\r\n        msgType: 'studentTimeout',\r\n        msg: this.component.state.TAName,\r\n      })\r\n    )\r\n  }\r\n\r\n  prepareMessage(msg) {\r\n    const { courseId } = this.component\r\n    const enrichedPayload = { ...msg, courseId, role }\r\n    return JSON.stringify(enrichedPayload)\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}