{"ast":null,"code":"var _classCallCheck = require(\"@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"@babel/runtime/helpers/createClass\");\n\n/**\r\n * Map group ID to the set of websockets involved in the group\r\n * Controls deletion of groups when they become non-empty\r\n * Manages leader designation\r\n */\nvar GroupManager = /*#__PURE__*/function () {\n  \"use strict\";\n\n  function GroupManager() {\n    _classCallCheck(this, GroupManager);\n\n    this.groupToSockets = new Map();\n  }\n\n  _createClass(GroupManager, [{\n    key: \"addSocketToGroup\",\n    value: function addSocketToGroup(groupId, ws) {\n      if (!this.groupToSockets.has(groupId)) {\n        this.groupToSockets.set(groupId, new Set());\n      }\n\n      this.groupToSockets.get(groupId).add(ws);\n    }\n  }, {\n    key: \"removeSocketFromGroup\",\n    value: function removeSocketFromGroup(groupId, ws) {\n      if (this.groupToSockets.has(groupId)) {\n        var sockets = this.groupToSockets.get(groupId);\n\n        if (sockets.has(ws)) {\n          sockets[\"delete\"](ws);\n        }\n      }\n    }\n  }, {\n    key: \"getGroupSize\",\n    value: function getGroupSize(groupId) {\n      if (this.groupToSockets.has(groupId)) {\n        return this.groupToSockets.get(groupId).size;\n      }\n\n      return 0;\n    }\n  }]);\n\n  return GroupManager;\n}();\n\nmodule.exports = {\n  groupManager: new GroupManager()\n};","map":{"version":3,"sources":["C:/Users/ryanj/Documents/mercury/websocket/util/groupmanager.js"],"names":["GroupManager","groupToSockets","Map","groupId","ws","has","set","Set","get","add","sockets","size","module","exports","groupManager"],"mappings":";;;;AAAA;;;;;IAMMA,Y;;;AACJ,0BAAc;AAAA;;AACZ,SAAKC,cAAL,GAAsB,IAAIC,GAAJ,EAAtB;AACD;;;;qCAEgBC,O,EAASC,E,EAAI;AAC5B,UAAI,CAAC,KAAKH,cAAL,CAAoBI,GAApB,CAAwBF,OAAxB,CAAL,EAAuC;AACrC,aAAKF,cAAL,CAAoBK,GAApB,CAAwBH,OAAxB,EAAiC,IAAII,GAAJ,EAAjC;AACD;;AAED,WAAKN,cAAL,CAAoBO,GAApB,CAAwBL,OAAxB,EAAiCM,GAAjC,CAAqCL,EAArC;AACD;;;0CAEqBD,O,EAASC,E,EAAI;AACjC,UAAI,KAAKH,cAAL,CAAoBI,GAApB,CAAwBF,OAAxB,CAAJ,EAAsC;AACpC,YAAMO,OAAO,GAAG,KAAKT,cAAL,CAAoBO,GAApB,CAAwBL,OAAxB,CAAhB;;AACA,YAAIO,OAAO,CAACL,GAAR,CAAYD,EAAZ,CAAJ,EAAqB;AACnBM,UAAAA,OAAO,UAAP,CAAeN,EAAf;AACD;AACF;AACF;;;iCAEYD,O,EAAS;AACpB,UAAI,KAAKF,cAAL,CAAoBI,GAApB,CAAwBF,OAAxB,CAAJ,EAAsC;AACpC,eAAO,KAAKF,cAAL,CAAoBO,GAApB,CAAwBL,OAAxB,EAAiCQ,IAAxC;AACD;;AAED,aAAO,CAAP;AACD;;;;;;AAGHC,MAAM,CAACC,OAAP,GAAiB;AACfC,EAAAA,YAAY,EAAE,IAAId,YAAJ;AADC,CAAjB","sourcesContent":["/**\r\n * Map group ID to the set of websockets involved in the group\r\n * Controls deletion of groups when they become non-empty\r\n * Manages leader designation\r\n */\r\n\r\nclass GroupManager {\r\n  constructor() {\r\n    this.groupToSockets = new Map()\r\n  }\r\n\r\n  addSocketToGroup(groupId, ws) {\r\n    if (!this.groupToSockets.has(groupId)) {\r\n      this.groupToSockets.set(groupId, new Set())\r\n    }\r\n\r\n    this.groupToSockets.get(groupId).add(ws)\r\n  }\r\n\r\n  removeSocketFromGroup(groupId, ws) {\r\n    if (this.groupToSockets.has(groupId)) {\r\n      const sockets = this.groupToSockets.get(groupId)\r\n      if (sockets.has(ws)) {\r\n        sockets.delete(ws)\r\n      }\r\n    }\r\n  }\r\n\r\n  getGroupSize(groupId) {\r\n    if (this.groupToSockets.has(groupId)) {\r\n      return this.groupToSockets.get(groupId).size\r\n    }\r\n\r\n    return 0\r\n  }\r\n}\r\n\r\nmodule.exports = {\r\n  groupManager: new GroupManager(),\r\n}\r\n"]},"metadata":{},"sourceType":"script"}