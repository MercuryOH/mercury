{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React from 'react';\nimport Publisher from './publisher';\nimport { EventEmitter } from './util/EventEmitter';\nimport { OTSubscriber, createSession } from 'opentok-react';\nimport { Button } from 'semantic-ui-react';\nimport GroupLeaderModal from './groupLeaderModal';\n\nclass ScreenContainer extends React.Component {\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"handlePublish\", () => {\n      console.log('Successfully published!');\n    });\n\n    _defineProperty(this, \"handleSubscribe\", () => {\n      console.log('Subscribed!');\n    });\n\n    _defineProperty(this, \"handleSessionError\", error => {\n      console.error(error);\n    });\n\n    _defineProperty(this, \"handlePublishError\", error => {\n      console.error(error);\n    });\n\n    _defineProperty(this, \"handleSubscribeError\", error => {\n      console.error(error);\n    });\n\n    this.state = {\n      user: this.props.user,\n      currGroup: this.props.currGroup,\n      ssButton: true,\n      streams: [],\n      focusStream: {},\n      videoButton: true,\n      expand: false\n    };\n    this.defineEventEmitterCallbacks();\n    this.sessionEventHandlers = {\n      sessionConnected: () => {},\n      sessionDisconnected: () => {},\n      sessionReconnected: () => {},\n      sessionReconnecting: () => {}\n    };\n    this.publishEventHandlers = {\n      accessDenied: () => {},\n      streamCreated: () => {},\n      streamDestroyed: () => {}\n    };\n    this.subscribeEventHandlers = {\n      videoEnabled: () => {},\n      videoDisabled: () => {}\n    };\n  }\n\n  defineEventEmitterCallbacks() {\n    EventEmitter.subscribe('disableVideoButton', () => {\n      this.setState({\n        videoButton: false\n      });\n    });\n    EventEmitter.subscribe('enableVideoButton', () => {\n      this.setState({\n        videoButton: true\n      });\n    });\n  }\n\n  getStreamToDisplay() {\n    return this.state.expand === true ? __jsx(OTSubscriber, {\n      key: this.state.focusStream.id,\n      session: this.sessionHelper.session,\n      stream: this.state.focusStream,\n      properties: {\n        maxWidth: '75vw',\n        maxHeight: '75vh',\n        height: '85vh',\n        width: '48vw',\n        style: {\n          buttonDisplayMode: 'on',\n          nameDisplayMode: 'on'\n        }\n      },\n      onSubscribe: this.handleSubscribe,\n      onError: this.handleSubscribeError\n    }) : null;\n  }\n\n  screenShareButton() {\n    return this.state.ssButton === true ? __jsx(Button, {\n      onClick: () => {\n        EventEmitter.publish('startScreenShare');\n        this.setState({\n          ssButton: false\n        });\n      },\n      style: {\n        fontSize: '.8vw',\n        display: 'inline-flex'\n      },\n      icon: \"tv\",\n      content: \"Share Screen\"\n    }) : __jsx(Button, {\n      onClick: () => {\n        EventEmitter.publish('stopScreenShare');\n        this.setState({\n          ssButton: true\n        });\n      },\n      icon: \"tv\",\n      style: {\n        fontSize: '.8vw',\n        display: 'inline-flex'\n      },\n      content: \"Stop Screen Share\"\n    });\n  }\n\n  videoStateButton() {\n    return this.state.videoButton === true ? __jsx(Button, {\n      onClick: () => {\n        EventEmitter.publish('disableVideo');\n      },\n      icon: \"hide\",\n      style: {\n        fontSize: '.8vw',\n        display: 'inline-flex'\n      },\n      content: \"Disable video\"\n    }) : __jsx(Button, {\n      onClick: () => {\n        EventEmitter.publish('enableVideo');\n      },\n      icon: \"eye\",\n      style: {\n        fontSize: '.8vw',\n        display: 'inline-flex'\n      },\n      content: \"Enable video\"\n    });\n  }\n\n  unexpandButton() {\n    return this.state.expand === true ? __jsx(Button, {\n      onClick: () => {\n        this.setState({\n          expand: false\n        });\n        console.log('ore');\n      },\n      style: {\n        fontSize: '.8vw',\n        display: 'inline-flex'\n      },\n      content: \"Unexpand video\"\n    }) : null;\n  }\n\n  componentWillMount() {\n    const {\n      sessionId,\n      token\n    } = this.props;\n    this.sessionHelper = createSession({\n      apiKey: `${process.env.NEXT_PUBLIC_VV_API_KEY}`,\n      sessionId: `${sessionId}`,\n      token: `${token}`,\n      onStreamsUpdated: streams => {\n        this.setState({\n          streams\n        });\n      }\n    });\n  }\n\n  appointLeaderButton() {\n    /**\n     * If this is for a private group and you are the leader, show the appoint new leader button\n     */\n    if (this.state.currGroup.type === 'group' && this.state.user.id === this.state.currGroup.UserId) {\n      return __jsx(Button, {\n        onClick: () => EventEmitter.publish('startLeaderAppointmentProcess', {\n          currGroupId: this.state.currGroup.id,\n          userId: this.state.user.id // the current leader\n\n        }),\n        icon: \"chess king\",\n        style: {\n          fontSize: '.8vw',\n          display: 'inline-flex'\n        },\n        content: \"Appoint Leader\"\n      });\n    }\n\n    return null;\n  }\n\n  componentWillUnmount() {\n    this.sessionHelper.disconnect();\n  }\n\n  render() {\n    const {\n      onLeave\n    } = this.props;\n    return __jsx(React.Fragment, null, __jsx(\"div\", {\n      style: {\n        display: 'inline-flex',\n        width: '100%',\n        maxHeight: '86vh'\n      }\n    }, __jsx(\"div\", {\n      style: {\n        width: '78%',\n        maxHeight: '85vh',\n        overflow: 'auto'\n      }\n    }, this.getStreamToDisplay()), __jsx(\"div\", {\n      style: {\n        width: '22%',\n        maxHeight: '85vh',\n        overflow: 'auto',\n        height: '1000px'\n      }\n    }, __jsx(Publisher, {\n      style: {\n        width: '13.57vw',\n        maxWidth: '13.57vw',\n        marginBottom: '5px'\n      },\n      session: this.sessionHelper.session,\n      name: this.props.name\n    }), this.state.streams.map(stream => __jsx(React.Fragment, null, __jsx(Button, {\n      onClick: () => {\n        this.setState({\n          focusStream: stream\n        });\n        this.setState({\n          expand: true\n        });\n      },\n      style: {\n        padding: '0px',\n        width: '100%',\n        maxHeight: '18vh',\n        margin: '0px'\n      }\n    }, __jsx(OTSubscriber, {\n      key: stream.id,\n      session: this.sessionHelper.session,\n      stream: stream,\n      properties: {\n        width: '100%',\n        height: '18vh',\n        maxHeight: '18vh',\n        margin: '0px',\n        style: {\n          buttonDisplayMode: 'on',\n          nameDisplayMode: 'on'\n        }\n      },\n      onSubscribe: this.handleSubscribe,\n      onError: this.handleSubscribeError\n    })))))), this.videoStateButton(), this.unexpandButton(), this.screenShareButton(), this.appointLeaderButton(), __jsx(Button, {\n      onClick: onLeave,\n      color: \"red\",\n      icon: \"close\",\n      style: {\n        fontSize: '.8vw',\n        display: 'inline-flex'\n      },\n      content: \"Leave call\"\n    }), __jsx(GroupLeaderModal, {\n      props: this.state.currGroup\n    }));\n  }\n\n}\n\nexport default ScreenContainer;","map":null,"metadata":{},"sourceType":"module"}