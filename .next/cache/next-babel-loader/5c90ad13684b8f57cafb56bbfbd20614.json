{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { Component } from 'react';\nimport { OTPublisher } from 'opentok-react';\nimport { Button } from 'semantic-ui-react';\nimport { EventEmitter } from './util/EventEmitter';\nexport default class ScreenPublisher extends Component {\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"onError\", err => {\n      this.setState({\n        error: `Failed to publish: ${err.message}`\n      });\n    });\n\n    this.state = {\n      error: null,\n      audio: true,\n      video: true,\n      videoSource: 'screen',\n      appear: false\n    };\n    this.defineEventEmitterCallbacks();\n  }\n\n  defineEventEmitterCallbacks() {\n    EventEmitter.subscribe('startScreenShare', () => {\n      this.setState({\n        appear: true\n      });\n    });\n    EventEmitter.subscribe('stopScreenShare', () => {\n      this.setState({\n        appear: false\n      });\n    });\n  }\n\n  render() {\n    return this.state.appear === false ? null : __jsx(React.Fragment, null, this.state.error ? __jsx(\"div\", null, this.state.error) : null, __jsx(OTPublisher, {\n      properties: {\n        width: '13.62vw',\n        maxWidth: '13.62vw',\n        height: '20vh',\n        publishAudio: this.state.audio,\n        publishVideo: this.state.video,\n        videoSource: 'screen',\n        name: this.props.name,\n        style: {\n          buttonDisplayMode: 'on',\n          nameDisplayMode: 'on'\n        }\n      },\n      onPublish: () => {\n        EventEmitter.publish('screenShareOn', {\n          name: this.props.name,\n          sessionId: this.props.session.sessionId\n        });\n      },\n      session: this.props.session,\n      onError: this.onError\n    }));\n  }\n\n}","map":{"version":3,"sources":["C:/Users/ryanj/Documents/mercury/components/screenPublisher.js"],"names":["React","Component","OTPublisher","Button","EventEmitter","ScreenPublisher","constructor","props","err","setState","error","message","state","audio","video","videoSource","appear","defineEventEmitterCallbacks","subscribe","render","width","maxWidth","height","publishAudio","publishVideo","name","style","buttonDisplayMode","nameDisplayMode","publish","sessionId","session","onError"],"mappings":";;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,WAAT,QAA4B,eAA5B;AACA,SAASC,MAAT,QAAuB,mBAAvB;AACA,SAASC,YAAT,QAA6B,qBAA7B;AAEA,eAAe,MAAMC,eAAN,SAA8BJ,SAA9B,CAAwC;AACrDK,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;;AADiB,qCAsBRC,GAAD,IAAS;AACjB,WAAKC,QAAL,CAAc;AAAEC,QAAAA,KAAK,EAAG,sBAAqBF,GAAG,CAACG,OAAQ;AAA3C,OAAd;AACD,KAxBkB;;AAGjB,SAAKC,KAAL,GAAa;AACXF,MAAAA,KAAK,EAAE,IADI;AAEXG,MAAAA,KAAK,EAAE,IAFI;AAGXC,MAAAA,KAAK,EAAE,IAHI;AAIXC,MAAAA,WAAW,EAAE,QAJF;AAKXC,MAAAA,MAAM,EAAE;AALG,KAAb;AAOA,SAAKC,2BAAL;AACD;;AAEDA,EAAAA,2BAA2B,GAAG;AAC5Bb,IAAAA,YAAY,CAACc,SAAb,CAAuB,kBAAvB,EAA2C,MAAM;AAC/C,WAAKT,QAAL,CAAc;AAAEO,QAAAA,MAAM,EAAE;AAAV,OAAd;AACD,KAFD;AAGAZ,IAAAA,YAAY,CAACc,SAAb,CAAuB,iBAAvB,EAA0C,MAAM;AAC9C,WAAKT,QAAL,CAAc;AAAEO,QAAAA,MAAM,EAAE;AAAV,OAAd;AACD,KAFD;AAGD;;AAMDG,EAAAA,MAAM,GAAG;AACP,WAAO,KAAKP,KAAL,CAAWI,MAAX,KAAsB,KAAtB,GAA8B,IAA9B,GACL,4BACG,KAAKJ,KAAL,CAAWF,KAAX,GAAmB,mBAAM,KAAKE,KAAL,CAAWF,KAAjB,CAAnB,GAAmD,IADtD,EAEE,MAAC,WAAD;AACE,MAAA,UAAU,EAAE;AACVU,QAAAA,KAAK,EAAE,SADG;AAEVC,QAAAA,QAAQ,EAAE,SAFA;AAGVC,QAAAA,MAAM,EAAE,MAHE;AAIVC,QAAAA,YAAY,EAAE,KAAKX,KAAL,CAAWC,KAJf;AAKVW,QAAAA,YAAY,EAAE,KAAKZ,KAAL,CAAWE,KALf;AAMVC,QAAAA,WAAW,EAAE,QANH;AAOVU,QAAAA,IAAI,EAAE,KAAKlB,KAAL,CAAWkB,IAPP;AAQVC,QAAAA,KAAK,EAAE;AACLC,UAAAA,iBAAiB,EAAE,IADd;AAELC,UAAAA,eAAe,EAAE;AAFZ;AARG,OADd;AAcE,MAAA,SAAS,EAAE,MAAM;AACfxB,QAAAA,YAAY,CAACyB,OAAb,CAAqB,eAArB,EAAsC;AACpCJ,UAAAA,IAAI,EAAE,KAAKlB,KAAL,CAAWkB,IADmB;AAEpCK,UAAAA,SAAS,EAAE,KAAKvB,KAAL,CAAWwB,OAAX,CAAmBD;AAFM,SAAtC;AAID,OAnBH;AAoBE,MAAA,OAAO,EAAE,KAAKvB,KAAL,CAAWwB,OApBtB;AAqBE,MAAA,OAAO,EAAE,KAAKC;AArBhB,MAFF,CADF;AA4BD;;AAxDoD","sourcesContent":["import React, { Component } from 'react'\r\nimport { OTPublisher } from 'opentok-react'\r\nimport { Button } from 'semantic-ui-react'\r\nimport { EventEmitter } from './util/EventEmitter'\r\n\r\nexport default class ScreenPublisher extends Component {\r\n  constructor(props) {\r\n    super(props)\r\n\r\n    this.state = {\r\n      error: null,\r\n      audio: true,\r\n      video: true,\r\n      videoSource: 'screen',\r\n      appear: false,\r\n    }\r\n    this.defineEventEmitterCallbacks()\r\n  }\r\n\r\n  defineEventEmitterCallbacks() {\r\n    EventEmitter.subscribe('startScreenShare', () => {\r\n      this.setState({ appear: true })\r\n    })\r\n    EventEmitter.subscribe('stopScreenShare', () => {\r\n      this.setState({ appear: false })\r\n    })\r\n  }\r\n\r\n  onError = (err) => {\r\n    this.setState({ error: `Failed to publish: ${err.message}` })\r\n  }\r\n\r\n  render() {\r\n    return this.state.appear === false ? null : (\r\n      <>\r\n        {this.state.error ? <div>{this.state.error}</div> : null}\r\n        <OTPublisher\r\n          properties={{\r\n            width: '13.62vw',\r\n            maxWidth: '13.62vw',\r\n            height: '20vh',\r\n            publishAudio: this.state.audio,\r\n            publishVideo: this.state.video,\r\n            videoSource: 'screen',\r\n            name: this.props.name,\r\n            style: {\r\n              buttonDisplayMode: 'on',\r\n              nameDisplayMode: 'on',\r\n            },\r\n          }}\r\n          onPublish={() => {\r\n            EventEmitter.publish('screenShareOn', {\r\n              name: this.props.name,\r\n              sessionId: this.props.session.sessionId,\r\n            })\r\n          }}\r\n          session={this.props.session}\r\n          onError={this.onError}\r\n        />\r\n      </>\r\n    )\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}