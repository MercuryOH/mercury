{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nvar url = 'ws://localhost:8080';\n/**\r\n * QueueWebSocket controls the web socket business logic for the course queue and\r\n * functions as a controller for the queue state\r\n */\n\nvar QueueWebSocketController = /*#__PURE__*/function () {\n  function QueueWebSocketController(component) {\n    _classCallCheck(this, QueueWebSocketController);\n\n    this.component = component;\n    this.started = false;\n  }\n\n  _createClass(QueueWebSocketController, [{\n    key: \"start\",\n    value: function start() {\n      this.connection = new WebSocket(url);\n      this.connection.onopen = this.processConnectionOpen.bind(this);\n      this.connection.onerror = this.processConnectionError.bind(this);\n      this.connection.onmessage = this.processConnectionMessage.bind(this);\n      this.started = true;\n    }\n  }, {\n    key: \"hasStarted\",\n    value: function hasStarted() {\n      return this.started;\n    }\n  }, {\n    key: \"processConnectionOpen\",\n    value: function processConnectionOpen() {\n      var courseId = this.component.courseId;\n      this.connection.send(this.prepareMessage({\n        msgType: 'greeting',\n        msg: courseId\n      })); // notify the server which courseId this websocket belongs to\n    }\n  }, {\n    key: \"processConnectionError\",\n    value: function processConnectionError(error) {\n      console.log(\"WebSocket error: \".concat(error));\n    }\n  }, {\n    key: \"activateYourTurnModal\",\n    value: function activateYourTurnModal() {\n      this.component.setState({\n        isYourTurn: true\n      });\n    }\n  }, {\n    key: \"activateTAWaitingModal\",\n    value: function activateTAWaitingModal(studentName) {\n      this.component.setState({\n        inviteNextStudent: true,\n        nextStudentName: studentName\n      });\n    }\n  }, {\n    key: \"updateStudentsInQueue\",\n    value: function updateStudentsInQueue(msg) {\n      this.component.setState({\n        studentsInQueue: msg\n      });\n    }\n  }, {\n    key: \"processConnectionMessage\",\n    value: function processConnectionMessage(e) {\n      var _JSON$parse = JSON.parse(e.data),\n          msgType = _JSON$parse.msgType,\n          msg = _JSON$parse.msg;\n\n      switch (msgType) {\n        case 'queue':\n          // in this case, the server will send a message indicating the current students in the queue\n          // msg - the new queue\n          this.updateStudentsInQueue(msg);\n          break;\n\n        case 'yourTurn':\n          // in this case, which os only if you arw a student, the server notifies that it is your turn\n          this.activateYourTurnModal();\n          break;\n\n        case 'nextStudentNotified':\n          // in this case, the server lets the TA know that the student has been notified\n          // msg - the name of the student who was notified\n          this.activateTAWaitingModal(msg);\n          break;\n\n        default:\n          throw new Error(\"Message \".concat(msg, \" is incorrectly formatted\"));\n      }\n    }\n  }, {\n    key: \"addMeToQueue\",\n    value: function addMeToQueue() {\n      var me = this.component.state.me;\n      this.connection.send(this.prepareMessage({\n        msgType: 'addToQueue',\n        msg: JSON.stringify(me)\n      }));\n      this.component.setState({\n        inQueue: true\n      });\n    }\n  }, {\n    key: \"removeMeFromQueue\",\n    value: function removeMeFromQueue() {\n      var me = this.component.state.me;\n      this.connection.send(this.prepareMessage({\n        msgType: 'removeFromQueue',\n        msg: JSON.stringify(me)\n      }));\n      this.component.setState({\n        inQueue: false\n      });\n    }\n  }, {\n    key: \"getNextStudent\",\n    value: function getNextStudent() {\n      this.connection.send(this.prepareMessage({\n        msgType: 'next',\n        msg: 'next'\n      }));\n    }\n  }, {\n    key: \"prepareMessage\",\n    value: function prepareMessage(msg) {\n      var courseId = this.component.courseId;\n\n      var enrichedPayload = _objectSpread(_objectSpread({}, msg), {}, {\n        courseId: courseId\n      });\n\n      return JSON.stringify(enrichedPayload);\n    }\n  }]);\n\n  return QueueWebSocketController;\n}();\n\nexport { QueueWebSocketController as default };","map":{"version":3,"sources":["C:/Users/ryanj/Documents/mercury/components/queue/queuews.js"],"names":["url","QueueWebSocketController","component","started","connection","WebSocket","onopen","processConnectionOpen","bind","onerror","processConnectionError","onmessage","processConnectionMessage","courseId","send","prepareMessage","msgType","msg","error","console","log","setState","isYourTurn","studentName","inviteNextStudent","nextStudentName","studentsInQueue","e","JSON","parse","data","updateStudentsInQueue","activateYourTurnModal","activateTAWaitingModal","Error","me","state","stringify","inQueue","enrichedPayload"],"mappings":"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","sourcesContent":["const url = 'ws://localhost:8080'\r\n\r\n/**\r\n * QueueWebSocket controls the web socket business logic for the course queue and\r\n * functions as a controller for the queue state\r\n */\r\n\r\nexport default class QueueWebSocketController {\r\n  constructor(component) {\r\n    this.component = component\r\n    this.started = false\r\n  }\r\n\r\n  start() {\r\n    this.connection = new WebSocket(url)\r\n    this.connection.onopen = this.processConnectionOpen.bind(this)\r\n    this.connection.onerror = this.processConnectionError.bind(this)\r\n    this.connection.onmessage = this.processConnectionMessage.bind(this)\r\n    this.started = true\r\n  }\r\n\r\n  hasStarted() {\r\n    return this.started\r\n  }\r\n\r\n  processConnectionOpen() {\r\n    const { courseId } = this.component\r\n\r\n    this.connection.send(\r\n      this.prepareMessage({\r\n        msgType: 'greeting',\r\n        msg: courseId,\r\n      })\r\n    ) // notify the server which courseId this websocket belongs to\r\n  }\r\n\r\n  processConnectionError(error) {\r\n    console.log(`WebSocket error: ${error}`)\r\n  }\r\n\r\n  activateYourTurnModal() {\r\n    this.component.setState({ isYourTurn: true })\r\n  }\r\n\r\n  activateTAWaitingModal(studentName) {\r\n    this.component.setState({\r\n      inviteNextStudent: true,\r\n      nextStudentName: studentName,\r\n    })\r\n  }\r\n\r\n  updateStudentsInQueue(msg) {\r\n    this.component.setState({ studentsInQueue: msg })\r\n  }\r\n\r\n  processConnectionMessage(e) {\r\n    const { msgType, msg } = JSON.parse(e.data)\r\n\r\n    switch (msgType) {\r\n      case 'queue': // in this case, the server will send a message indicating the current students in the queue\r\n        // msg - the new queue\r\n        this.updateStudentsInQueue(msg)\r\n        break\r\n\r\n      case 'yourTurn': // in this case, which os only if you arw a student, the server notifies that it is your turn\r\n        this.activateYourTurnModal()\r\n        break\r\n\r\n      case 'nextStudentNotified': // in this case, the server lets the TA know that the student has been notified\r\n        // msg - the name of the student who was notified\r\n        this.activateTAWaitingModal(msg)\r\n        break\r\n\r\n      default:\r\n        throw new Error(`Message ${msg} is incorrectly formatted`)\r\n    }\r\n  }\r\n\r\n  addMeToQueue() {\r\n    const { me } = this.component.state\r\n\r\n    this.connection.send(\r\n      this.prepareMessage({\r\n        msgType: 'addToQueue',\r\n        msg: JSON.stringify(me),\r\n      })\r\n    )\r\n\r\n    this.component.setState({ inQueue: true })\r\n  }\r\n\r\n  removeMeFromQueue() {\r\n    const { me } = this.component.state\r\n\r\n    this.connection.send(\r\n      this.prepareMessage({\r\n        msgType: 'removeFromQueue',\r\n        msg: JSON.stringify(me),\r\n      })\r\n    )\r\n\r\n    this.component.setState({ inQueue: false })\r\n  }\r\n\r\n  getNextStudent() {\r\n    this.connection.send(\r\n      this.prepareMessage({\r\n        msgType: 'next',\r\n        msg: 'next',\r\n      })\r\n    )\r\n  }\r\n\r\n  prepareMessage(msg) {\r\n    const { courseId } = this.component\r\n    const enrichedPayload = { ...msg, courseId }\r\n    return JSON.stringify(enrichedPayload)\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}