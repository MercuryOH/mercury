{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nvar url = 'ws://localhost:8080';\nvar role = 'Student';\nimport { EventEmitter } from '../../util/EventEmitter';\n/**\n * QueueWebSocket controls the web socket business logic for the course queue and\n * functions as a controller for the queue state\n */\n\nvar StudentWebSocketController = /*#__PURE__*/function () {\n  function StudentWebSocketController() {\n    _classCallCheck(this, StudentWebSocketController);\n  }\n\n  _createClass(StudentWebSocketController, [{\n    key: \"start\",\n    value: function start(_ref) {\n      var me = _ref.me,\n          courseId = _ref.courseId;\n      var firstName = me.firstName,\n          lastName = me.lastName;\n      this.fullName = \"\".concat(firstName, \" \").concat(lastName);\n      this.courseId = courseId;\n      this.connection = new WebSocket(url);\n      this.connection.onopen = this.processConnectionOpen.bind(this);\n      this.connection.onerror = this.processConnectionError.bind(this);\n      this.connection.onmessage = this.processConnectionMessage.bind(this);\n    }\n  }, {\n    key: \"processConnectionOpen\",\n    value: function processConnectionOpen() {\n      var fullName = this.fullName;\n      this.connection.send(this.prepareMessage({\n        msgType: 'greeting',\n        msg: fullName\n      })); // notify the server which courseId this websocket belongs to\n    }\n  }, {\n    key: \"processConnectionError\",\n    value: function processConnectionError(error) {\n      console.log(\"WebSocket error: \".concat(error));\n    }\n  }, {\n    key: \"activateYourTurnModal\",\n    value: function activateYourTurnModal(TAName) {\n      EventEmitter.publish('activateYourTurnModal', TAName);\n    }\n  }, {\n    key: \"updateStudentsInQueue\",\n    value: function updateStudentsInQueue(msg) {\n      EventEmitter.publish('updateStudentsInQueue', msg);\n    }\n  }, {\n    key: \"updateCurrStudent\",\n    value: function updateCurrStudent(msg) {\n      EventEmitter.publish('updateCurrStudent', msg);\n    }\n  }, {\n    key: \"initializeQueueOnGreeting\",\n    value: function initializeQueueOnGreeting(msg) {\n      EventEmitter.publish('initializeQueueOnGreeting', msg);\n    }\n  }, {\n    key: \"processConnectionMessage\",\n    value: function processConnectionMessage(e) {\n      var _JSON$parse = JSON.parse(e.data),\n          msgType = _JSON$parse.msgType,\n          msg = _JSON$parse.msg;\n\n      switch (msgType) {\n        case 'greetingAck':\n          this.initializeQueueOnGreeting(msg);\n          break;\n\n        case 'queue':\n          // in this case, the server will send a message indicating the current students in the queue\n          // msg - the new queue\n          this.updateStudentsInQueue(msg);\n          break;\n\n        case 'yourTurn':\n          // in this case, which os only if you arw a student, the server notifies that it is your turn\n          // msg - the TA that notifies you\n          this.activateYourTurnModal(msg);\n          break;\n\n        case 'currStudentUpdate':\n          this.updateCurrStudent(msg);\n          break;\n\n        default:\n          throw new Error(\"Message \".concat(msgType, \" is incorrectly formatted\"));\n      }\n    }\n  }, {\n    key: \"addMeToQueue\",\n    value: function addMeToQueue() {\n      this.connection.send(this.prepareMessage({\n        msgType: 'addToQueue',\n        msg: this.fullName\n      }));\n      EventEmitter.publish('addMeToQueue');\n    }\n  }, {\n    key: \"removeMeFromQueue\",\n    value: function removeMeFromQueue() {\n      this.connection.send(this.prepareMessage({\n        msgType: 'removeFromQueue',\n        msg: this.fullName\n      }));\n      EventEmitter.publish('removeMeFromQueue');\n    }\n  }, {\n    key: \"signalStudentTimeout\",\n    value: function signalStudentTimeout(TAName) {\n      this.connection.send(this.prepareMessage({\n        msgType: 'studentTimeout',\n        msg: TAName\n      }));\n    }\n  }, {\n    key: \"signalJoinTA\",\n    value: function signalJoinTA(group, TAName, me) {\n      this.connection.send(this.prepareMessage({\n        msgType: 'joinTA',\n        msg: JSON.stringify({\n          group: group,\n          TAName: TAName,\n          me: me\n        })\n      })); //EventEmitter.publish('clearLeftSide')\n    }\n  }, {\n    key: \"signalDeclineTA\",\n    value: function signalDeclineTA(TAName) {\n      this.connection.send(this.prepareMessage({\n        msgType: 'declineTA',\n        msg: TAName\n      }));\n    }\n  }, {\n    key: \"prepareMessage\",\n    value: function prepareMessage(msg) {\n      var courseId = this.courseId;\n\n      var enrichedPayload = _objectSpread(_objectSpread({}, msg), {}, {\n        courseId: courseId,\n        role: role\n      });\n\n      return JSON.stringify(enrichedPayload);\n    }\n  }]);\n\n  return StudentWebSocketController;\n}();\n\nexport { StudentWebSocketController as default };","map":{"version":3,"sources":["C:/Users/ryanj/Documents/mercury/components/queue/student/studentWebSocket.js"],"names":["url","role","EventEmitter","StudentWebSocketController","me","courseId","firstName","lastName","fullName","connection","WebSocket","onopen","processConnectionOpen","bind","onerror","processConnectionError","onmessage","processConnectionMessage","send","prepareMessage","msgType","msg","error","console","log","TAName","publish","e","JSON","parse","data","initializeQueueOnGreeting","updateStudentsInQueue","activateYourTurnModal","updateCurrStudent","Error","group","stringify","enrichedPayload"],"mappings":"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","sourcesContent":["const url = 'ws://localhost:8080'\nconst role = 'Student'\nimport { EventEmitter } from '../../util/EventEmitter'\n\n/**\n * QueueWebSocket controls the web socket business logic for the course queue and\n * functions as a controller for the queue state\n */\n\nexport default class StudentWebSocketController {\n  start({ me, courseId }) {\n    const { firstName, lastName } = me\n    this.fullName = `${firstName} ${lastName}`\n    this.courseId = courseId\n\n    this.connection = new WebSocket(url)\n    this.connection.onopen = this.processConnectionOpen.bind(this)\n    this.connection.onerror = this.processConnectionError.bind(this)\n    this.connection.onmessage = this.processConnectionMessage.bind(this)\n  }\n\n  processConnectionOpen() {\n    const { fullName } = this\n\n    this.connection.send(\n      this.prepareMessage({\n        msgType: 'greeting',\n        msg: fullName,\n      })\n    ) // notify the server which courseId this websocket belongs to\n  }\n\n  processConnectionError(error) {\n    console.log(`WebSocket error: ${error}`)\n  }\n\n  activateYourTurnModal(TAName) {\n    EventEmitter.publish('activateYourTurnModal', TAName)\n  }\n\n  updateStudentsInQueue(msg) {\n    EventEmitter.publish('updateStudentsInQueue', msg)\n  }\n\n  updateCurrStudent(msg) {\n    EventEmitter.publish('updateCurrStudent', msg)\n  }\n\n  initializeQueueOnGreeting(msg) {\n    EventEmitter.publish('initializeQueueOnGreeting', msg)\n  }\n\n  processConnectionMessage(e) {\n    const { msgType, msg } = JSON.parse(e.data)\n\n    switch (msgType) {\n      case 'greetingAck':\n        this.initializeQueueOnGreeting(msg)\n        break\n\n      case 'queue': // in this case, the server will send a message indicating the current students in the queue\n        // msg - the new queue\n        this.updateStudentsInQueue(msg)\n        break\n\n      case 'yourTurn': // in this case, which os only if you arw a student, the server notifies that it is your turn\n        // msg - the TA that notifies you\n        this.activateYourTurnModal(msg)\n        break\n\n      case 'currStudentUpdate':\n        this.updateCurrStudent(msg)\n        break\n\n      default:\n        throw new Error(`Message ${msgType} is incorrectly formatted`)\n    }\n  }\n\n  addMeToQueue() {\n    this.connection.send(\n      this.prepareMessage({\n        msgType: 'addToQueue',\n        msg: this.fullName,\n      })\n    )\n\n    EventEmitter.publish('addMeToQueue')\n  }\n\n  removeMeFromQueue() {\n    this.connection.send(\n      this.prepareMessage({\n        msgType: 'removeFromQueue',\n        msg: this.fullName,\n      })\n    )\n\n    EventEmitter.publish('removeMeFromQueue')\n  }\n\n  signalStudentTimeout(TAName) {\n    this.connection.send(\n      this.prepareMessage({\n        msgType: 'studentTimeout',\n        msg: TAName,\n      })\n    )\n  }\n\n  signalJoinTA(group, TAName, me) {\n    this.connection.send(\n      this.prepareMessage({\n        msgType: 'joinTA',\n        msg: JSON.stringify({ group, TAName, me }),\n      })\n    )\n\n    //EventEmitter.publish('clearLeftSide')\n  }\n\n  signalDeclineTA(TAName) {\n    this.connection.send(\n      this.prepareMessage({\n        msgType: 'declineTA',\n        msg: TAName,\n      })\n    )\n  }\n\n  prepareMessage(msg) {\n    const { courseId } = this\n    const enrichedPayload = { ...msg, courseId, role }\n    return JSON.stringify(enrichedPayload)\n  }\n}\n"]},"metadata":{},"sourceType":"module"}