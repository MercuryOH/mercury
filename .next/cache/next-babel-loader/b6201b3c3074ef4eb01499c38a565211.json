{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { EventEmitter } from '../components/util/EventEmitter';\nconst url = 'ws://localhost:8080';\nconst role = 'Instructor';\n/**\r\n * QueueWebSocket controls the web socket business logic for the course queue and\r\n * functions as a controller for the queue state\r\n */\n\nexport default class TAWebSocketClient {\n  start({\n    me,\n    courseId,\n    onJoin\n  }) {\n    const {\n      id\n    } = me;\n    this.id = id;\n    this.courseId = courseId;\n    this.onJoin = onJoin;\n    this.connection = new WebSocket(url);\n    this.connection.onopen = this.processConnectionOpen.bind(this);\n    this.connection.onerror = this.processConnectionError.bind(this);\n    this.connection.onmessage = this.processConnectionMessage.bind(this);\n    this.defineEventEmitterCallbacks();\n  }\n\n  defineEventEmitterCallbacks() {\n    EventEmitter.subscribe('greeting', () => {\n      this.connection.send(this.prepareMessage({\n        msgType: 'greeting',\n        msg: this.id\n      }));\n    });\n    EventEmitter.subscribe('signalGetNextStudent', () => {\n      this.getNextStudent();\n    });\n    EventEmitter.subscribe('signalCallOver', () => {\n      this.signalCallOver();\n    });\n    EventEmitter.subscribe('userLeaveGroup', group => {\n      this.connection.send(this.prepareMessage({\n        msgType: 'userLeaveGroup',\n        msg: group\n      }));\n    });\n    EventEmitter.subscribe('userJoinGroup', groupId => {\n      this.connection.send(this.prepareMessage({\n        msgType: 'userJoinGroup',\n        msg: groupId\n      }));\n    });\n  }\n\n  processConnectionOpen() {\n    this.connection.send(this.prepareMessage({\n      msgType: 'greeting',\n      msg: this.id\n    })); // notify the server which courseId this websocket belongs to\n  }\n\n  processConnectionError(error) {\n    console.log(`WebSocket error: ${error}`);\n  }\n\n  activateTAWaitingModal(studentName) {\n    EventEmitter.publish('activateTAWaitingModal', studentName);\n  }\n\n  removeTAWaitingModalOnTimeout() {\n    EventEmitter.publish('removeTAWaitingModalOnTimeout');\n  }\n\n  removeTAWaitingModalOnAccept() {\n    EventEmitter.publish('removeTAWaitingModalOnAccept');\n  }\n\n  removeTAWaitingModalOnDecline() {\n    EventEmitter.publish('removeTAWaitingModalOnDecline');\n  }\n\n  updateStudentsInQueue(msg) {\n    EventEmitter.publish('updateStudentsInQueue', msg);\n  }\n\n  updateCurrStudent(msg) {\n    EventEmitter.publish('updateCurrStudent', msg);\n  }\n\n  initializeQueueOnGreeting(msg) {\n    EventEmitter.publish('initializeQueueOnGreeting', msg);\n  }\n\n  notifyFetchGroups() {\n    EventEmitter.publish('fetchGroups');\n  }\n\n  processConnectionMessage(e) {\n    const {\n      msgType,\n      msg\n    } = JSON.parse(e.data);\n\n    switch (msgType) {\n      case 'greetingAck':\n        this.initializeQueueOnGreeting(msg);\n        break;\n\n      case 'queue':\n        // in this case, the server will send a message indicating the current students in the queue\n        // msg - the new queue\n        this.updateStudentsInQueue(msg);\n        break;\n\n      case 'nextStudentNotified':\n        // in this case, the server lets the TA know that the student has been notified\n        // msg - the name of the student who was notified\n        this.activateTAWaitingModal(msg);\n        break;\n\n      case 'studentTimeout':\n        // in this case, the server lets the TA know that the student has timed out\n        this.removeTAWaitingModalOnTimeout();\n        break;\n\n      case 'studentJoin':\n        // in this case, the TA's invitation to join has been accepted\n        this.removeTAWaitingModalOnAccept();\n        this.onJoin(JSON.parse(msg));\n        break;\n\n      case 'studentDecline':\n        // in this case the student declines the TA's invitation, and the TA's modal closes\n        this.removeTAWaitingModalOnDecline();\n        break;\n\n      case 'currStudentUpdate':\n        this.updateCurrStudent(msg);\n        break;\n\n      case 'fetchGroups':\n        this.notifyFetchGroups();\n        break;\n\n      default:\n        throw new Error(`Message ${msg} is incorrectly formatted`);\n    }\n  }\n\n  getNextStudent() {\n    this.connection.send(this.prepareMessage({\n      msgType: 'next',\n      msg: this.id\n    }));\n  }\n\n  signalCallOver() {\n    this.connection.send(this.prepareMessage({\n      msgType: 'callOver',\n      msg: 'callOver'\n    }));\n  }\n\n  prepareMessage(msg) {\n    const {\n      courseId\n    } = this;\n\n    const enrichedPayload = _objectSpread(_objectSpread({}, msg), {}, {\n      courseId,\n      role\n    });\n\n    return JSON.stringify(enrichedPayload);\n  }\n\n}","map":null,"metadata":{},"sourceType":"module"}