{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { Component } from 'react';\nimport { Modal, Button, Search, Label, Icon } from 'semantic-ui-react';\nimport _ from 'lodash';\nimport { EventEmitter } from './util/EventEmitter';\nconst initialState = {\n  isLoading: false,\n  results: [],\n  value: ''\n};\n\nclass GroupLeaderModal extends Component {\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"formatAsResults\", candidate => {\n      return {\n        title: candidate.fullName,\n        id: candidate.userId\n      };\n    });\n\n    _defineProperty(this, \"handleInvite\", () => {\n      /**\n       * TODO: Please publish an event called 'sendLeaderAppointmentNotification' with the data including the groupId from\n       * this.state.currGroup and the userId of the selected user\n       * Also, it looks like this code is not relevant to leader appointment but rather invites FYI\n       */\n      if (this.state.selectedUser === {}) return;\n      console.log(this.state.selectedUser);\n      EventEmitter.publish('sendLeaderAppointmentNotification', {\n        groupId: this.state.currGroup.id,\n        userId: this.state.selectedUser.id\n      });\n      this.setState({\n        value: '',\n        selectedUser: {},\n        modalState: false\n      });\n    });\n\n    _defineProperty(this, \"handleClose\", () => {\n      this.setState({\n        value: '',\n        selectedUser: {},\n        modalState: false\n      });\n    });\n\n    _defineProperty(this, \"handleResultSelect\", (e, {\n      result\n    }) => {\n      this.setState({\n        value: '',\n        selectedUser: result\n      });\n    });\n\n    _defineProperty(this, \"handleSearchChange\", (e, {\n      value\n    }) => {\n      this.setState({\n        isLoading: true,\n        value\n      });\n      setTimeout(() => {\n        if (this.state.value.length < 1) return this.setState(initialState);\n        const re = new RegExp(_.escapeRegExp(this.state.value), 'i');\n\n        const isMatch = result => re.test(result.title) || re.test(result.description);\n\n        this.setState({\n          isLoading: false,\n          results: _.filter(this.state.allUsers.map(this.formatAsResults), isMatch)\n        });\n      }, 300);\n    });\n\n    _defineProperty(this, \"removeSelected\", () => {\n      this.setState({\n        selectedUser: {}\n      });\n    });\n\n    this.state = {\n      currGroup: this.props.currGroup,\n      modalState: false,\n      isLoading: false,\n      results: [],\n      value: '',\n      allUsers: [],\n      selectedUser: {}\n    };\n    this.defineEventEmitterCallbacks();\n  }\n\n  defineEventEmitterCallbacks() {\n    EventEmitter.subscribe('activateGroupLeaderModal', candidates => {\n      this.setState({\n        modalState: true,\n        allUsers: candidates\n      });\n      /** TODO:\n       *\n      Please change state to display the modal and please use the list of candidate objects as things to search for\n      * The candidate objects are { userId, fullName, email }\n      Please also store the userID's of each candidate object for when a leader is appointed\n      */\n\n      console.log(candidates);\n    });\n  }\n\n  getSelectedLabels() {\n    if (this.state.selectedUser === {}) {\n      return __jsx(React.Fragment, null);\n    }\n\n    return __jsx(\"div\", {\n      style: {\n        textAlign: 'left',\n        paddingLeft: 80,\n        paddingRight: 80\n      }\n    }, __jsx(Label, null, this.state.selectedUser.title, __jsx(Icon, {\n      name: \"delete\",\n      onClick: () => this.removeSelected()\n    })));\n  }\n\n  render() {\n    return __jsx(\"div\", null, __jsx(Modal, {\n      style: {\n        borderless: 'true',\n        width: '40%',\n        height: '40%'\n      },\n      open: this.state.modalState,\n      onClose: this.handleClose,\n      closeOnDimmerClick: false,\n      closeOnEscape: false,\n      closeIcon: true\n    }, __jsx(Modal.Content, {\n      style: {\n        borderless: 'true'\n      }\n    }, __jsx(\"div\", {\n      style: {\n        textAlign: 'center',\n        paddingTop: 80,\n        paddingLeft: 80,\n        paddingRight: 80,\n        paddingBottom: 20\n      }\n    }, __jsx(Search, {\n      fluid: true,\n      placeholder: \"Choose a new group leader...\",\n      input: {\n        fluid: true\n      },\n      loading: this.state.isLoading,\n      onResultSelect: this.handleResultSelect,\n      onSearchChange: _.debounce(this.handleSearchChange, 500, {\n        leading: true\n      }),\n      results: this.state.results,\n      value: this.state.value\n    })), this.getSelectedLabels(), __jsx(\"div\", {\n      style: {\n        textAlign: 'center',\n        width: '70%',\n        height: '70%',\n        margin: 'auto',\n        padding: 30\n      }\n    }, __jsx(Button, {\n      color: \"teal\",\n      style: {\n        width: '50%',\n        fontSize: '1vw'\n      },\n      onClick: this.handleInvite.bind(this)\n    }, \"Change Group Leader\")))));\n  }\n\n}\n\nexport default GroupLeaderModal;","map":{"version":3,"sources":["C:/Users/ryanj/Documents/mercury/components/groupLeaderModal.js"],"names":["React","Component","Modal","Button","Search","Label","Icon","_","EventEmitter","initialState","isLoading","results","value","GroupLeaderModal","constructor","props","candidate","title","fullName","id","userId","state","selectedUser","console","log","publish","groupId","currGroup","setState","modalState","e","result","setTimeout","length","re","RegExp","escapeRegExp","isMatch","test","description","filter","allUsers","map","formatAsResults","defineEventEmitterCallbacks","subscribe","candidates","getSelectedLabels","textAlign","paddingLeft","paddingRight","removeSelected","render","borderless","width","height","handleClose","paddingTop","paddingBottom","fluid","handleResultSelect","debounce","handleSearchChange","leading","margin","padding","fontSize","handleInvite","bind"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport { Modal, Button, Search, Label, Icon } from 'semantic-ui-react'\nimport _ from 'lodash'\nimport { EventEmitter } from './util/EventEmitter'\n\nconst initialState = { isLoading: false, results: [], value: '' }\n\nclass GroupLeaderModal extends Component {\n  constructor(props) {\n    super(props)\n\n    this.state = {\n      currGroup: this.props.currGroup,\n      modalState: false,\n      isLoading: false,\n      results: [],\n      value: '',\n      allUsers: [],\n      selectedUser: {},\n    }\n\n    this.defineEventEmitterCallbacks()\n  }\n\n  defineEventEmitterCallbacks() {\n    EventEmitter.subscribe('activateGroupLeaderModal', (candidates) => {\n      this.setState({modalState: true, allUsers: candidates})\n      /** TODO:\n       *\n     Please change state to display the modal and please use the list of candidate objects as things to search for\n     * The candidate objects are { userId, fullName, email }\n     Please also store the userID's of each candidate object for when a leader is appointed\n     */\n\n      console.log(candidates)\n    })\n  }\n\n  formatAsResults = (candidate) => {\n    return {\n      title: candidate.fullName,\n      id: candidate.userId,\n    }\n  }\n\n  handleInvite = () => {\n    /**\n     * TODO: Please publish an event called 'sendLeaderAppointmentNotification' with the data including the groupId from\n     * this.state.currGroup and the userId of the selected user\n     * Also, it looks like this code is not relevant to leader appointment but rather invites FYI\n     */\n\n    if (this.state.selectedUser === {}) return\n\n    console.log(this.state.selectedUser)\n    EventEmitter.publish('sendLeaderAppointmentNotification', {\n      groupId: this.state.currGroup.id,\n      userId: this.state.selectedUser.id,\n    })\n\n    this.setState({ value: '', selectedUser: {}, modalState: false })\n  }\n\n  handleClose = () => {\n    this.setState({ value: '', selectedUser: {}, modalState: false })\n  }\n\n  handleResultSelect = (e, { result }) => {\n    this.setState({\n      value: '',\n      selectedUser: result,\n    })\n  }\n\n  handleSearchChange = (e, { value }) => {\n    this.setState({ isLoading: true, value })\n\n    setTimeout(() => {\n      if (this.state.value.length < 1) return this.setState(initialState)\n\n      const re = new RegExp(_.escapeRegExp(this.state.value), 'i')\n      const isMatch = (result) =>\n        re.test(result.title) || re.test(result.description)\n\n      this.setState({\n        isLoading: false,\n        results: _.filter(\n          this.state.allUsers.map(this.formatAsResults),\n          isMatch\n        ),\n      })\n    }, 300)\n  }\n\n  getSelectedLabels() {\n    if (this.state.selectedUser === {}) {\n      return <></>\n    }\n\n    return (\n      <div\n        style={{\n          textAlign: 'left',\n          paddingLeft: 80,\n          paddingRight: 80,\n        }}\n      >\n        <Label>\n          {this.state.selectedUser.title}\n          <Icon name=\"delete\" onClick={() => this.removeSelected()} />\n        </Label>\n      </div>\n    )\n  }\n\n  removeSelected = () => {\n    this.setState({\n      selectedUser: {},\n    })\n  }\n\n  render() {\n    return (\n      <div>\n        <Modal\n          style={{ borderless: 'true', width: '40%', height: '40%' }}\n          open={this.state.modalState}\n          onClose={this.handleClose}\n          closeOnDimmerClick={false}\n          closeOnEscape={false}\n          closeIcon\n        >\n          <Modal.Content style={{ borderless: 'true' }}>\n            <div\n              style={{\n                textAlign: 'center',\n                paddingTop: 80,\n                paddingLeft: 80,\n                paddingRight: 80,\n                paddingBottom: 20,\n              }}\n            >\n              <Search\n                fluid\n                placeholder=\"Choose a new group leader...\"\n                input={{ fluid: true }}\n                loading={this.state.isLoading}\n                onResultSelect={this.handleResultSelect}\n                onSearchChange={_.debounce(this.handleSearchChange, 500, {\n                  leading: true,\n                })}\n                results={this.state.results}\n                value={this.state.value}\n              />\n            </div>\n\n            {this.getSelectedLabels()}\n\n            <div\n              style={{\n                textAlign: 'center',\n                width: '70%',\n                height: '70%',\n                margin: 'auto',\n                padding: 30,\n              }}\n            >\n              <Button\n                color=\"teal\"\n                style={{ width: '50%', fontSize: '1vw' }}\n                onClick={this.handleInvite.bind(this)}\n              >\n                Change Group Leader\n              </Button>\n            </div>\n          </Modal.Content>\n        </Modal>\n      </div>\n    )\n  }\n}\n\nexport default GroupLeaderModal\n"]},"metadata":{},"sourceType":"module"}