{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nconst url = 'ws://localhost:8080';\nconst role = 'Student';\nimport { EventEmitter } from '../../util/EventEmitter';\n/**\r\n * QueueWebSocket controls the web socket business logic for the course queue and\r\n * functions as a controller for the queue state\r\n */\n\nexport default class StudentWebSocketController {\n  start({\n    me,\n    courseId\n  }) {\n    const {\n      firstName,\n      lastName\n    } = me;\n    this.fullName = `${firstName} ${lastName}`;\n    this.courseId = courseId;\n    this.connection = new WebSocket(url);\n    this.connection.onopen = this.processConnectionOpen.bind(this);\n    this.connection.onerror = this.processConnectionError.bind(this);\n    this.connection.onmessage = this.processConnectionMessage.bind(this);\n  }\n\n  processConnectionOpen() {\n    const {\n      fullName\n    } = this;\n    this.connection.send(this.prepareMessage({\n      msgType: 'greeting',\n      msg: fullName\n    })); // notify the server which courseId this websocket belongs to\n  }\n\n  processConnectionError(error) {\n    console.log(`WebSocket error: ${error}`);\n  }\n\n  activateYourTurnModal(TAName) {\n    EventEmitter.publish('activateYourTurnModal', TAName);\n  }\n\n  updateStudentsInQueue(msg) {\n    EventEmitter.publish('updateStudentsInQueue', msg);\n  }\n\n  processConnectionMessage(e) {\n    const {\n      msgType,\n      msg\n    } = JSON.parse(e.data);\n\n    switch (msgType) {\n      case 'queue':\n        // in this case, the server will send a message indicating the current students in the queue\n        // msg - the new queue\n        this.updateStudentsInQueue(msg);\n        break;\n\n      case 'yourTurn':\n        // in this case, which os only if you arw a student, the server notifies that it is your turn\n        // msg - the TA that notifies you\n        this.activateYourTurnModal(msg);\n        break;\n\n      default:\n        throw new Error(`Message ${msg} is incorrectly formatted`);\n    }\n  }\n\n  addMeToQueue() {\n    this.connection.send(this.prepareMessage({\n      msgType: 'addToQueue',\n      msg: this.fullName\n    }));\n    EventEmitter.publish('addMeToQueue');\n  }\n\n  removeMeFromQueue() {\n    this.connection.send(this.prepareMessage({\n      msgType: 'removeFromQueue',\n      msg: this.fullName\n    }));\n    EventEmitter.publish('removeMeFromQueue');\n  }\n\n  signalStudentTimeout(TAName) {\n    this.connection.send(this.prepareMessage({\n      msgType: 'studentTimeout',\n      msg: TAName\n    }));\n  }\n\n  signalJoinTA(group, TAName) {\n    this.connection.send(this.prepareMessage({\n      msgType: 'joinTA',\n      msg: JSON.stringify({\n        group,\n        TAName\n      })\n    }));\n  }\n\n  signalDeclineTA(TAName) {\n    this.connection.send(this.prepareMessage({\n      msgType: 'declineTA',\n      msg: TAName\n    }));\n  }\n\n  prepareMessage(msg) {\n    const {\n      courseId\n    } = this;\n\n    const enrichedPayload = _objectSpread(_objectSpread({}, msg), {}, {\n      courseId,\n      role\n    });\n\n    return JSON.stringify(enrichedPayload);\n  }\n\n}","map":{"version":3,"sources":["C:/Users/ryanj/Documents/mercury/components/queue/student/studentWebSocket.js"],"names":["url","role","EventEmitter","StudentWebSocketController","start","me","courseId","firstName","lastName","fullName","connection","WebSocket","onopen","processConnectionOpen","bind","onerror","processConnectionError","onmessage","processConnectionMessage","send","prepareMessage","msgType","msg","error","console","log","activateYourTurnModal","TAName","publish","updateStudentsInQueue","e","JSON","parse","data","Error","addMeToQueue","removeMeFromQueue","signalStudentTimeout","signalJoinTA","group","stringify","signalDeclineTA","enrichedPayload"],"mappings":"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","sourcesContent":["const url = 'ws://localhost:8080'\r\nconst role = 'Student'\r\nimport { EventEmitter } from '../../util/EventEmitter'\r\n\r\n/**\r\n * QueueWebSocket controls the web socket business logic for the course queue and\r\n * functions as a controller for the queue state\r\n */\r\n\r\nexport default class StudentWebSocketController {\r\n  start({ me, courseId }) {\r\n    const { firstName, lastName } = me\r\n    this.fullName = `${firstName} ${lastName}`\r\n    this.courseId = courseId\r\n\r\n    this.connection = new WebSocket(url)\r\n    this.connection.onopen = this.processConnectionOpen.bind(this)\r\n    this.connection.onerror = this.processConnectionError.bind(this)\r\n    this.connection.onmessage = this.processConnectionMessage.bind(this)\r\n  }\r\n\r\n  processConnectionOpen() {\r\n    const { fullName } = this\r\n\r\n    this.connection.send(\r\n      this.prepareMessage({\r\n        msgType: 'greeting',\r\n        msg: fullName,\r\n      })\r\n    ) // notify the server which courseId this websocket belongs to\r\n  }\r\n\r\n  processConnectionError(error) {\r\n    console.log(`WebSocket error: ${error}`)\r\n  }\r\n\r\n  activateYourTurnModal(TAName) {\r\n    EventEmitter.publish('activateYourTurnModal', TAName)\r\n  }\r\n\r\n  updateStudentsInQueue(msg) {\r\n    EventEmitter.publish('updateStudentsInQueue', msg)\r\n  }\r\n\r\n  processConnectionMessage(e) {\r\n    const { msgType, msg } = JSON.parse(e.data)\r\n\r\n    switch (msgType) {\r\n      case 'queue': // in this case, the server will send a message indicating the current students in the queue\r\n        // msg - the new queue\r\n        this.updateStudentsInQueue(msg)\r\n        break\r\n\r\n      case 'yourTurn': // in this case, which os only if you arw a student, the server notifies that it is your turn\r\n        // msg - the TA that notifies you\r\n        this.activateYourTurnModal(msg)\r\n        break\r\n\r\n      default:\r\n        throw new Error(`Message ${msg} is incorrectly formatted`)\r\n    }\r\n  }\r\n\r\n  addMeToQueue() {\r\n    this.connection.send(\r\n      this.prepareMessage({\r\n        msgType: 'addToQueue',\r\n        msg: this.fullName,\r\n      })\r\n    )\r\n\r\n    EventEmitter.publish('addMeToQueue')\r\n  }\r\n\r\n  removeMeFromQueue() {\r\n    this.connection.send(\r\n      this.prepareMessage({\r\n        msgType: 'removeFromQueue',\r\n        msg: this.fullName,\r\n      })\r\n    )\r\n\r\n    EventEmitter.publish('removeMeFromQueue')\r\n  }\r\n\r\n  signalStudentTimeout(TAName) {\r\n    this.connection.send(\r\n      this.prepareMessage({\r\n        msgType: 'studentTimeout',\r\n        msg: TAName,\r\n      })\r\n    )\r\n  }\r\n\r\n  signalJoinTA(group, TAName) {\r\n    this.connection.send(\r\n      this.prepareMessage({\r\n        msgType: 'joinTA',\r\n        msg: JSON.stringify({ group, TAName }),\r\n      })\r\n    )\r\n  }\r\n\r\n  signalDeclineTA(TAName) {\r\n    this.connection.send(\r\n      this.prepareMessage({\r\n        msgType: 'declineTA',\r\n        msg: TAName,\r\n      })\r\n    )\r\n  }\r\n\r\n  prepareMessage(msg) {\r\n    const { courseId } = this\r\n    const enrichedPayload = { ...msg, courseId, role }\r\n    return JSON.stringify(enrichedPayload)\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}