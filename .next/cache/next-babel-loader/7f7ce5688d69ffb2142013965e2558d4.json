{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { Component } from 'react';\nimport { OTPublisher } from 'opentok-react';\nimport { Button } from 'semantic-ui-react';\nimport { EventEmitter } from './util/EventEmitter';\nexport default class ScreenPublisher extends Component {\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"onError\", err => {\n      this.setState({\n        error: `Failed to publish: ${err.message}`\n      });\n    });\n\n    this.state = {\n      error: null,\n      audio: true,\n      video: true,\n      videoSource: 'screen',\n      appear: false\n    };\n    this.defineEventEmitterCallbacks();\n  }\n\n  defineEventEmitterCallbacks() {\n    EventEmitter.subscribe('startScreenShare', () => {\n      this.setState({\n        appear: true\n      });\n    });\n    EventEmitter.subscribe('stopScreenShare', () => {\n      this.setState({\n        appear: false\n      });\n    });\n  }\n\n  render() {\n    return this.state.appear === false ? null : __jsx(\"div\", null, this.state.error ? __jsx(\"div\", null, this.state.error) : null, __jsx(OTPublisher, {\n      properties: {\n        width: '100%',\n        height: '50vh',\n        publishAudio: this.state.audio,\n        publishVideo: this.state.video,\n        videoSource: 'screen'\n      },\n      session: this.props.session,\n      onError: this.onError\n    }));\n  }\n\n}","map":{"version":3,"sources":["C:/Users/ryanj/Documents/mercury/components/screenPublisher.js"],"names":["React","Component","OTPublisher","Button","EventEmitter","ScreenPublisher","constructor","props","err","setState","error","message","state","audio","video","videoSource","appear","defineEventEmitterCallbacks","subscribe","render","width","height","publishAudio","publishVideo","session","onError"],"mappings":";;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,WAAT,QAA4B,eAA5B;AACA,SAASC,MAAT,QAAuB,mBAAvB;AACA,SAASC,YAAT,QAA6B,qBAA7B;AAEA,eAAe,MAAMC,eAAN,SAA8BJ,SAA9B,CAAwC;AACrDK,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;;AADiB,qCAsBRC,GAAD,IAAS;AACjB,WAAKC,QAAL,CAAc;AAAEC,QAAAA,KAAK,EAAG,sBAAqBF,GAAG,CAACG,OAAQ;AAA3C,OAAd;AACD,KAxBkB;;AAGjB,SAAKC,KAAL,GAAa;AACXF,MAAAA,KAAK,EAAE,IADI;AAEXG,MAAAA,KAAK,EAAE,IAFI;AAGXC,MAAAA,KAAK,EAAE,IAHI;AAIXC,MAAAA,WAAW,EAAE,QAJF;AAKXC,MAAAA,MAAM,EAAE;AALG,KAAb;AAOA,SAAKC,2BAAL;AACD;;AAEDA,EAAAA,2BAA2B,GAAG;AAC5Bb,IAAAA,YAAY,CAACc,SAAb,CAAuB,kBAAvB,EAA2C,MAAM;AAC/C,WAAKT,QAAL,CAAc;AAAEO,QAAAA,MAAM,EAAE;AAAV,OAAd;AACD,KAFD;AAGAZ,IAAAA,YAAY,CAACc,SAAb,CAAuB,iBAAvB,EAA0C,MAAM;AAC9C,WAAKT,QAAL,CAAc;AAAEO,QAAAA,MAAM,EAAE;AAAV,OAAd;AACD,KAFD;AAGD;;AAMDG,EAAAA,MAAM,GAAG;AACP,WAAO,KAAKP,KAAL,CAAWI,MAAX,KAAsB,KAAtB,GAA8B,IAA9B,GACL,mBACG,KAAKJ,KAAL,CAAWF,KAAX,GAAmB,mBAAM,KAAKE,KAAL,CAAWF,KAAjB,CAAnB,GAAmD,IADtD,EAEE,MAAC,WAAD;AACE,MAAA,UAAU,EAAE;AACVU,QAAAA,KAAK,EAAE,MADG;AAEVC,QAAAA,MAAM,EAAE,MAFE;AAGVC,QAAAA,YAAY,EAAE,KAAKV,KAAL,CAAWC,KAHf;AAIVU,QAAAA,YAAY,EAAE,KAAKX,KAAL,CAAWE,KAJf;AAKVC,QAAAA,WAAW,EAAE;AALH,OADd;AAQE,MAAA,OAAO,EAAI,KAAKR,KAAL,CAAWiB,OARxB;AASE,MAAA,OAAO,EAAE,KAAKC;AAThB,MAFF,CADF;AAgBD;;AA5CoD","sourcesContent":["import React, { Component } from 'react'\nimport { OTPublisher } from 'opentok-react'\nimport { Button } from 'semantic-ui-react'\nimport { EventEmitter } from './util/EventEmitter'\n\nexport default class ScreenPublisher extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      error: null,\n      audio: true,\n      video: true,\n      videoSource: 'screen',\n      appear: false\n    };\n    this.defineEventEmitterCallbacks()\n  }\n\n  defineEventEmitterCallbacks() {\n    EventEmitter.subscribe('startScreenShare', () => {\n      this.setState({ appear: true })\n    })\n    EventEmitter.subscribe('stopScreenShare', () => {\n      this.setState({ appear: false })\n    })\n  }\n\n  onError = (err) => {\n    this.setState({ error: `Failed to publish: ${err.message}` });\n  }\n\n  render() {\n    return this.state.appear === false ? null : (\n      <div>\n        {this.state.error ? <div>{this.state.error}</div> : null}\n        <OTPublisher\n          properties={{\n            width: '100%',\n            height: '50vh',\n            publishAudio: this.state.audio,\n            publishVideo: this.state.video,\n            videoSource: 'screen'\n          }}\n          session = {this.props.session}\n          onError={this.onError}\n        />\n      </div>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}