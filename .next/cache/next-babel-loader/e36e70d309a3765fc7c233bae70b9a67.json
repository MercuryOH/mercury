{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport Publisher from './publisher';\nimport { EventEmitter } from './util/EventEmitter';\nimport { OTSubscriber, createSession } from 'opentok-react';\nimport { Button } from 'semantic-ui-react';\nimport GroupLeaderModal from './groupLeaderModal';\nimport * as api from '../util/mercuryService';\n\nclass ScreenContainer extends React.Component {\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"handlePublish\", () => {\n      console.log('Successfully published!');\n    });\n\n    _defineProperty(this, \"handleSubscribe\", () => {\n      console.log('Subscribed!');\n    });\n\n    _defineProperty(this, \"handleSessionError\", error => {\n      console.error(error);\n    });\n\n    _defineProperty(this, \"handlePublishError\", error => {\n      console.error(error);\n    });\n\n    _defineProperty(this, \"handleSubscribeError\", error => {\n      console.error(error);\n    });\n\n    this.state = {\n      user: this.props.user,\n      currGroup: this.props.currGroup,\n      classId: this.props.classId,\n      ssButton: true,\n      streams: [],\n      focusStream: {},\n      videoButton: true,\n      expand: false\n    };\n    this.defineEventEmitterCallbacks();\n    this.sessionEventHandlers = {\n      sessionConnected: () => {},\n      sessionDisconnected: () => {},\n      sessionReconnected: () => {},\n      sessionReconnecting: () => {}\n    };\n    this.publishEventHandlers = {\n      accessDenied: () => {},\n      streamCreated: () => {},\n      streamDestroyed: () => {}\n    };\n    this.subscribeEventHandlers = {\n      videoEnabled: () => {},\n      videoDisabled: () => {}\n    };\n  }\n\n  defineEventEmitterCallbacks() {\n    EventEmitter.subscribe('disableVideoButton', () => {\n      this.setState({\n        videoButton: false\n      });\n    });\n    EventEmitter.subscribe('enableVideoButton', () => {\n      this.setState({\n        videoButton: true\n      });\n    });\n    EventEmitter.subscribe('refreshScreenContainer', () => {\n      api.getGroupByID(this.state.classId, this.state.currGroup.id).then(payload => {\n        console.log(payload);\n        this.setState({\n          currGroup: payload\n        });\n      });\n    });\n  }\n\n  getStreamToDisplay() {\n    return this.state.expand === true ? __jsx(Button, {\n      onDoubleClick: () => {\n        this.setState({\n          focusStream: {}\n        });\n        this.setState({\n          expand: false\n        });\n      },\n      style: {\n        padding: '0px',\n        width: '100%',\n        maxHeight: '75vh',\n        margin: '0px'\n      }\n    }, __jsx(OTSubscriber, {\n      key: this.state.focusStream.id,\n      session: this.sessionHelper.session,\n      stream: this.state.focusStream,\n      properties: {\n        maxWidth: '75vw',\n        maxHeight: '74.5vh',\n        height: '84vh',\n        width: '48vw',\n        style: {\n          buttonDisplayMode: 'on',\n          nameDisplayMode: 'on'\n        }\n      },\n      onSubscribe: this.handleSubscribe,\n      onError: this.handleSubscribeError\n    })) : null;\n  }\n\n  screenShareButton() {\n    return this.state.ssButton === true ? __jsx(Button, {\n      onClick: () => {\n        EventEmitter.publish('startScreenShare');\n        this.setState({\n          ssButton: false\n        });\n      },\n      style: {\n        fontSize: '.8vw',\n        display: 'inline-flex'\n      },\n      icon: \"tv\",\n      content: \"Share Screen\"\n    }) : __jsx(Button, {\n      onClick: () => {\n        EventEmitter.publish('stopScreenShare');\n        this.setState({\n          ssButton: true\n        });\n      },\n      icon: \"tv\",\n      style: {\n        fontSize: '.8vw',\n        display: 'inline-flex'\n      },\n      content: \"Stop Screen Share\"\n    });\n  }\n\n  videoStateButton() {\n    return this.state.videoButton === true ? __jsx(Button, {\n      onClick: () => {\n        EventEmitter.publish('disableVideo');\n      },\n      icon: \"hide\",\n      style: {\n        fontSize: '.8vw',\n        display: 'inline-flex'\n      },\n      content: \"Disable video\"\n    }) : __jsx(Button, {\n      onClick: () => {\n        EventEmitter.publish('enableVideo');\n      },\n      icon: \"eye\",\n      style: {\n        fontSize: '.8vw',\n        display: 'inline-flex'\n      },\n      content: \"Enable video\"\n    });\n  }\n\n  componentWillMount() {\n    const {\n      sessionId,\n      token\n    } = this.props;\n    this.sessionHelper = createSession({\n      apiKey: `${process.env.NEXT_PUBLIC_VV_API_KEY}`,\n      sessionId: `${sessionId}`,\n      token: `${token}`,\n      onStreamsUpdated: streams => {\n        this.setState({\n          streams\n        });\n      }\n    });\n  }\n\n  appointLeaderButton() {\n    /**\r\n     * If this is for a private group and you are the leader, show the appoint new leader button\r\n     */\n    if (this.state.currGroup.type === 'group' && this.state.user.id === this.state.currGroup.UserId) {\n      return __jsx(Button, {\n        onClick: () => EventEmitter.publish('startLeaderAppointmentProcess', {\n          currGroupId: this.state.currGroup.id,\n          userId: this.state.user.id // the current leader\n\n        }),\n        icon: \"chess king\",\n        style: {\n          fontSize: '.8vw',\n          display: 'inline-flex'\n        },\n        content: \"Appoint Leader\"\n      });\n    }\n\n    return null;\n  }\n\n  componentWillUnmount() {\n    this.sessionHelper.disconnect();\n  }\n\n  render() {\n    const {\n      onLeave\n    } = this.props;\n    return __jsx(React.Fragment, null, __jsx(\"div\", {\n      style: {\n        display: 'inline-flex',\n        width: '100%',\n        maxHeight: '86vh'\n      }\n    }, __jsx(\"div\", {\n      style: {\n        width: '78%',\n        maxHeight: '85vh',\n        overflow: 'auto'\n      }\n    }, this.getStreamToDisplay()), __jsx(\"div\", {\n      style: {\n        width: '22%',\n        maxHeight: '85vh',\n        overflow: 'auto',\n        height: '1000px'\n      }\n    }, __jsx(Publisher, {\n      style: {\n        width: '13.57vw',\n        maxWidth: '13.57vw',\n        marginBottom: '5px'\n      },\n      session: this.sessionHelper.session,\n      name: this.props.name\n    }), this.state.streams.map(stream => __jsx(React.Fragment, null, __jsx(Button, {\n      onDoubleClick: () => {\n        this.setState({\n          focusStream: stream\n        });\n        this.setState({\n          expand: true\n        });\n      },\n      style: {\n        padding: '0px',\n        width: '100%',\n        maxHeight: '18vh',\n        margin: '0px'\n      }\n    }, __jsx(OTSubscriber, {\n      key: stream.id,\n      session: this.sessionHelper.session,\n      stream: stream,\n      properties: {\n        width: '100%',\n        height: '18vh',\n        maxHeight: '18vh',\n        margin: '0px',\n        style: {\n          buttonDisplayMode: 'on',\n          nameDisplayMode: 'on'\n        }\n      },\n      onSubscribe: this.handleSubscribe,\n      onError: this.handleSubscribeError\n    })))))), this.videoStateButton(), this.screenShareButton(), this.appointLeaderButton(), __jsx(Button, {\n      onClick: onLeave,\n      color: \"red\",\n      icon: \"close\",\n      style: {\n        fontSize: '.8vw',\n        display: 'inline-flex'\n      },\n      content: \"Leave call\"\n    }), __jsx(GroupLeaderModal, {\n      currGroup: this.state.currGroup\n    }));\n  }\n\n}\n\nScreenContainer.propTypes = {\n  sessionId: PropTypes.string.isRequired,\n  token: PropTypes.string.isRequired,\n  onLeave: PropTypes.func.isRequired\n};\nexport default ScreenContainer;","map":{"version":3,"sources":["C:/Users/ryanj/Documents/mercury/components/screenContainer.js"],"names":["React","PropTypes","Publisher","EventEmitter","OTSubscriber","createSession","Button","GroupLeaderModal","api","ScreenContainer","Component","constructor","props","console","log","error","state","user","currGroup","classId","ssButton","streams","focusStream","videoButton","expand","defineEventEmitterCallbacks","sessionEventHandlers","sessionConnected","sessionDisconnected","sessionReconnected","sessionReconnecting","publishEventHandlers","accessDenied","streamCreated","streamDestroyed","subscribeEventHandlers","videoEnabled","videoDisabled","subscribe","setState","getGroupByID","id","then","payload","getStreamToDisplay","padding","width","maxHeight","margin","sessionHelper","session","maxWidth","height","style","buttonDisplayMode","nameDisplayMode","handleSubscribe","handleSubscribeError","screenShareButton","publish","fontSize","display","videoStateButton","componentWillMount","sessionId","token","apiKey","process","env","NEXT_PUBLIC_VV_API_KEY","onStreamsUpdated","appointLeaderButton","type","UserId","currGroupId","userId","componentWillUnmount","disconnect","render","onLeave","overflow","marginBottom","name","map","stream","propTypes","string","isRequired","func"],"mappings":"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","sourcesContent":["import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport Publisher from './publisher'\r\nimport { EventEmitter } from './util/EventEmitter'\r\nimport { OTSubscriber, createSession } from 'opentok-react'\r\nimport { Button } from 'semantic-ui-react'\r\nimport GroupLeaderModal from './groupLeaderModal'\r\nimport * as api from '../util/mercuryService'\r\n\r\nclass ScreenContainer extends React.Component {\r\n  constructor(props) {\r\n    super(props)\r\n    this.state = {\r\n      user: this.props.user,\r\n      currGroup: this.props.currGroup,\r\n      classId: this.props.classId,\r\n      ssButton: true,\r\n      streams: [],\r\n      focusStream: {},\r\n      videoButton: true,\r\n      expand: false,\r\n    }\r\n\r\n    this.defineEventEmitterCallbacks()\r\n\r\n    this.sessionEventHandlers = {\r\n      sessionConnected: () => {},\r\n      sessionDisconnected: () => {},\r\n      sessionReconnected: () => {},\r\n      sessionReconnecting: () => {},\r\n    }\r\n\r\n    this.publishEventHandlers = {\r\n      accessDenied: () => {},\r\n      streamCreated: () => {},\r\n      streamDestroyed: () => {},\r\n    }\r\n\r\n    this.subscribeEventHandlers = {\r\n      videoEnabled: () => {},\r\n      videoDisabled: () => {},\r\n    }\r\n  }\r\n\r\n  handlePublish = () => {\r\n    console.log('Successfully published!')\r\n  }\r\n\r\n  handleSubscribe = () => {\r\n    console.log('Subscribed!')\r\n  }\r\n\r\n  handleSessionError = (error) => {\r\n    console.error(error)\r\n  }\r\n\r\n  handlePublishError = (error) => {\r\n    console.error(error)\r\n  }\r\n\r\n  handleSubscribeError = (error) => {\r\n    console.error(error)\r\n  }\r\n\r\n  defineEventEmitterCallbacks() {\r\n    EventEmitter.subscribe('disableVideoButton', () => {\r\n      this.setState({ videoButton: false })\r\n    })\r\n\r\n    EventEmitter.subscribe('enableVideoButton', () => {\r\n      this.setState({ videoButton: true })\r\n    })\r\n\r\n    EventEmitter.subscribe('refreshScreenContainer', () => {\r\n      api\r\n        .getGroupByID(this.state.classId, this.state.currGroup.id)\r\n        .then((payload) => {\r\n          console.log(payload)\r\n          this.setState({ currGroup: payload })\r\n        })\r\n    })\r\n  }\r\n\r\n  getStreamToDisplay() {\r\n    return this.state.expand === true ? (\r\n      <Button\r\n        onDoubleClick={() => {\r\n          this.setState({ focusStream: {} })\r\n          this.setState({ expand: false })\r\n        }}\r\n        style={{\r\n          padding: '0px',\r\n          width: '100%',\r\n          maxHeight: '75vh',\r\n          margin: '0px',\r\n        }}\r\n      >\r\n        <OTSubscriber\r\n          key={this.state.focusStream.id}\r\n          session={this.sessionHelper.session}\r\n          stream={this.state.focusStream}\r\n          properties={{\r\n            maxWidth: '75vw',\r\n            maxHeight: '74.5vh',\r\n            height: '84vh',\r\n            width: '48vw',\r\n            style: {\r\n              buttonDisplayMode: 'on',\r\n              nameDisplayMode: 'on',\r\n            },\r\n          }}\r\n          onSubscribe={this.handleSubscribe}\r\n          onError={this.handleSubscribeError}\r\n        />\r\n      </Button>\r\n    ) : null\r\n  }\r\n\r\n  screenShareButton() {\r\n    return this.state.ssButton === true ? (\r\n      <Button\r\n        onClick={() => {\r\n          EventEmitter.publish('startScreenShare')\r\n          this.setState({ ssButton: false })\r\n        }}\r\n        style={{ fontSize: '.8vw', display: 'inline-flex' }}\r\n        icon=\"tv\"\r\n        content=\"Share Screen\"\r\n      />\r\n    ) : (\r\n      <Button\r\n        onClick={() => {\r\n          EventEmitter.publish('stopScreenShare')\r\n          this.setState({ ssButton: true })\r\n        }}\r\n        icon=\"tv\"\r\n        style={{ fontSize: '.8vw', display: 'inline-flex' }}\r\n        content=\"Stop Screen Share\"\r\n      />\r\n    )\r\n  }\r\n\r\n  videoStateButton() {\r\n    return this.state.videoButton === true ? (\r\n      <Button\r\n        onClick={() => {\r\n          EventEmitter.publish('disableVideo')\r\n        }}\r\n        icon=\"hide\"\r\n        style={{ fontSize: '.8vw', display: 'inline-flex' }}\r\n        content=\"Disable video\"\r\n      />\r\n    ) : (\r\n      <Button\r\n        onClick={() => {\r\n          EventEmitter.publish('enableVideo')\r\n        }}\r\n        icon=\"eye\"\r\n        style={{ fontSize: '.8vw', display: 'inline-flex' }}\r\n        content=\"Enable video\"\r\n      />\r\n    )\r\n  }\r\n\r\n  componentWillMount() {\r\n    const { sessionId, token } = this.props\r\n    this.sessionHelper = createSession({\r\n      apiKey: `${process.env.NEXT_PUBLIC_VV_API_KEY}`,\r\n      sessionId: `${sessionId}`,\r\n      token: `${token}`,\r\n      onStreamsUpdated: (streams) => {\r\n        this.setState({ streams })\r\n      },\r\n    })\r\n  }\r\n\r\n  appointLeaderButton() {\r\n    /**\r\n     * If this is for a private group and you are the leader, show the appoint new leader button\r\n     */\r\n\r\n    if (\r\n      this.state.currGroup.type === 'group' &&\r\n      this.state.user.id === this.state.currGroup.UserId\r\n    ) {\r\n      return (\r\n        <Button\r\n          onClick={() =>\r\n            EventEmitter.publish('startLeaderAppointmentProcess', {\r\n              currGroupId: this.state.currGroup.id,\r\n              userId: this.state.user.id, // the current leader\r\n            })\r\n          }\r\n          icon=\"chess king\"\r\n          style={{ fontSize: '.8vw', display: 'inline-flex' }}\r\n          content=\"Appoint Leader\"\r\n        />\r\n      )\r\n    }\r\n\r\n    return null\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    this.sessionHelper.disconnect()\r\n  }\r\n\r\n  render() {\r\n    const { onLeave } = this.props\r\n    return (\r\n      <>\r\n        <div\r\n          style={{ display: 'inline-flex', width: '100%', maxHeight: '86vh' }}\r\n        >\r\n          <div style={{ width: '78%', maxHeight: '85vh', overflow: 'auto' }}>\r\n            {this.getStreamToDisplay()}\r\n          </div>\r\n          <div\r\n            style={{\r\n              width: '22%',\r\n              maxHeight: '85vh',\r\n              overflow: 'auto',\r\n              height: '1000px',\r\n            }}\r\n          >\r\n            <Publisher\r\n              style={{\r\n                width: '13.57vw',\r\n                maxWidth: '13.57vw',\r\n                marginBottom: '5px',\r\n              }}\r\n              session={this.sessionHelper.session}\r\n              name={this.props.name}\r\n            />\r\n            {this.state.streams.map((stream) => (\r\n              <>\r\n                <Button\r\n                  onDoubleClick={() => {\r\n                    this.setState({ focusStream: stream })\r\n                    this.setState({ expand: true })\r\n                  }}\r\n                  style={{\r\n                    padding: '0px',\r\n                    width: '100%',\r\n                    maxHeight: '18vh',\r\n                    margin: '0px',\r\n                  }}\r\n                >\r\n                  <OTSubscriber\r\n                    key={stream.id}\r\n                    session={this.sessionHelper.session}\r\n                    stream={stream}\r\n                    properties={{\r\n                      width: '100%',\r\n                      height: '18vh',\r\n                      maxHeight: '18vh',\r\n                      margin: '0px',\r\n                      style: {\r\n                        buttonDisplayMode: 'on',\r\n                        nameDisplayMode: 'on',\r\n                      },\r\n                    }}\r\n                    onSubscribe={this.handleSubscribe}\r\n                    onError={this.handleSubscribeError}\r\n                  />\r\n                </Button>\r\n              </>\r\n            ))}\r\n          </div>\r\n        </div>\r\n        {this.videoStateButton()}\r\n        {this.screenShareButton()}\r\n        {this.appointLeaderButton()}\r\n        <Button\r\n          onClick={onLeave}\r\n          color=\"red\"\r\n          icon=\"close\"\r\n          style={{ fontSize: '.8vw', display: 'inline-flex' }}\r\n          content=\"Leave call\"\r\n        />\r\n        <GroupLeaderModal currGroup={this.state.currGroup} />\r\n      </>\r\n    )\r\n  }\r\n}\r\n\r\nScreenContainer.propTypes = {\r\n  sessionId: PropTypes.string.isRequired,\r\n  token: PropTypes.string.isRequired,\r\n  onLeave: PropTypes.func.isRequired,\r\n}\r\n\r\nexport default ScreenContainer\r\n"]},"metadata":{},"sourceType":"module"}