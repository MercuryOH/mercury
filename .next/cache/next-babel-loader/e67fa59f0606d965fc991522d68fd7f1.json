{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\n\nvar _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport React from 'react';\nimport axios from 'axios';\nimport * as yup from 'yup';\nimport { useRouter } from 'next/router';\nimport { Formik } from 'formik';\nimport { Button, Form, Grid, Header, Message, Segment } from 'semantic-ui-react';\nimport { useAuth } from '../components/authProvider';\nvar loginSchema = yup.object({\n  email: yup.string().email().required(),\n  password: yup.string().min(8).required()\n});\n\nfunction LoginPage() {\n  _s();\n\n  var router = useRouter();\n\n  var _useAuth = useAuth(),\n      login = _useAuth.login;\n\n  var handleLogin = /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(values, _ref) {\n      var setSubmitting, user;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              setSubmitting = _ref.setSubmitting;\n              setSubmitting(true);\n              _context.next = 4;\n              return login(values.email, values.password);\n\n            case 4:\n              user = _context.sent;\n\n              if (user) {\n                router.push('/calendar');\n              }\n\n              setSubmitting(false);\n\n            case 7:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function handleLogin(_x, _x2) {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n\n  return __jsx(Grid, {\n    textAlign: \"center\",\n    style: {\n      height: '100vh'\n    },\n    verticalAlign: \"middle\"\n  }, __jsx(Grid.Column, {\n    style: {\n      maxWidth: 450\n    }\n  }, __jsx(Header, {\n    as: \"h2\",\n    color: \"teal\",\n    textAlign: \"center\"\n  }, \"Mercury | Login\"), __jsx(Formik, {\n    initialValues: {\n      email: '',\n      password: ''\n    },\n    validationSchema: loginSchema,\n    onSubmit: handleLogin\n  }, function (_ref3) {\n    var values = _ref3.values,\n        errors = _ref3.errors,\n        touched = _ref3.touched,\n        isSubmitting = _ref3.isSubmitting,\n        handleChange = _ref3.handleChange,\n        handleBlur = _ref3.handleBlur,\n        handleSubmit = _ref3.handleSubmit;\n    return __jsx(Form, {\n      size: \"large\",\n      onSubmit: handleSubmit\n    }, __jsx(Segment, null, __jsx(Form.Input, {\n      fluid: true,\n      icon: \"user\",\n      iconPosition: \"left\",\n      placeholder: \"Email address\",\n      name: \"email\",\n      value: values.email,\n      onChange: handleChange,\n      onBlur: handleBlur,\n      error: getError(errors, touched, 'email')\n    }), __jsx(Form.Input, {\n      fluid: true,\n      icon: \"lock\",\n      iconPosition: \"left\",\n      placeholder: \"Password\",\n      type: \"password\",\n      name: \"password\",\n      value: values.password,\n      onChange: handleChange,\n      onBlur: handleBlur,\n      error: getError(errors, touched, 'password')\n    }), __jsx(Button, {\n      fluid: true,\n      color: \"teal\",\n      size: \"large\",\n      type: \"submit\",\n      disabled: isSubmitting,\n      loading: isSubmitting\n    }, \"Login\")));\n  }), __jsx(Message, {\n    style: {\n      backgroundColor: 'white'\n    }\n  }, \"New to us? \", __jsx(\"a\", {\n    href: \"#\"\n  }, \"Sign Up\"))));\n}\n\n_s(LoginPage, \"g6/qH/rvT/KGL2Y2SC2i5umexfc=\", false, function () {\n  return [useRouter, useAuth];\n});\n\n_c = LoginPage;\n\nfunction getError(errors, touched, name) {\n  if (errors[name] && touched[name]) {\n    return {\n      content: errors[name]\n    };\n  }\n\n  return null;\n}\n\nexport default LoginPage;\n\nvar _c;\n\n$RefreshReg$(_c, \"LoginPage\");","map":{"version":3,"sources":["C:/Users/ryanj/Documents/mercury/pages/login.js"],"names":["React","axios","yup","useRouter","Formik","Button","Form","Grid","Header","Message","Segment","useAuth","loginSchema","object","email","string","required","password","min","LoginPage","router","login","handleLogin","values","setSubmitting","user","push","height","maxWidth","errors","touched","isSubmitting","handleChange","handleBlur","handleSubmit","getError","backgroundColor","name","content"],"mappings":"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","sourcesContent":["import React from 'react'\nimport axios from 'axios'\nimport * as yup from 'yup'\nimport { useRouter } from 'next/router'\nimport { Formik } from 'formik'\nimport { Button, Form, Grid, Header, Message, Segment } from 'semantic-ui-react'\nimport { useAuth } from '../components/authProvider'\n\nconst loginSchema = yup.object({\n  email: yup.string().email().required(),\n  password: yup.string().min(8).required(),\n})\n\nfunction LoginPage() {\n  const router = useRouter()\n  const { login } = useAuth()\n\n  const handleLogin = async (values, { setSubmitting }) => {\n    setSubmitting(true)\n\n    const user = await login(values.email, values.password)\n\n    if (user) {\n      router.push('/calendar')\n    }\n\n    setSubmitting(false)\n  }\n\n  return (\n    <Grid textAlign=\"center\" style={{ height: '100vh' }} verticalAlign=\"middle\">\n      <Grid.Column style={{ maxWidth: 450 }}>\n        <Header as=\"h2\" color=\"teal\" textAlign=\"center\">\n          Mercury | Login\n        </Header>\n        <Formik\n          initialValues={{ email: '', password: '' }}\n          validationSchema={loginSchema}\n          onSubmit={handleLogin}\n        >\n          {({\n            values,\n            errors,\n            touched,\n            isSubmitting,\n            handleChange,\n            handleBlur,\n            handleSubmit,\n          }) => (\n            <Form size=\"large\" onSubmit={handleSubmit}>\n              <Segment>\n                <Form.Input\n                  fluid\n                  icon=\"user\"\n                  iconPosition=\"left\"\n                  placeholder=\"Email address\"\n                  name=\"email\"\n                  value={values.email}\n                  onChange={handleChange}\n                  onBlur={handleBlur}\n                  error={getError(errors, touched, 'email')}\n                />\n                <Form.Input\n                  fluid\n                  icon=\"lock\"\n                  iconPosition=\"left\"\n                  placeholder=\"Password\"\n                  type=\"password\"\n                  name=\"password\"\n                  value={values.password}\n                  onChange={handleChange}\n                  onBlur={handleBlur}\n                  error={getError(errors, touched, 'password')}\n                />\n\n                <Button\n                  fluid\n                  color=\"teal\"\n                  size=\"large\"\n                  type=\"submit\"\n                  disabled={isSubmitting}\n                  loading={isSubmitting}\n                >\n                  Login\n                </Button>\n              </Segment>\n            </Form>\n          )}\n        </Formik>\n        <Message style = {{backgroundColor: 'white'}}>\n          New to us? <a href=\"#\">Sign Up</a>\n        </Message>\n      </Grid.Column>\n    </Grid>\n  )\n}\n\nfunction getError(errors, touched, name) {\n  if (errors[name] && touched[name]) {\n    return { content: errors[name] }\n  }\n\n  return null\n}\n\nexport default LoginPage\n"]},"metadata":{},"sourceType":"module"}