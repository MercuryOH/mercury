{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport Publisher from './publisher';\nimport { EventEmitter } from './util/EventEmitter';\nimport { OTSession, OTPublisher, OTStreams, OTSubscriber, createSession } from 'opentok-react';\nimport { Button, List } from 'semantic-ui-react';\nimport { initLayoutContainer } from 'opentok-layout-js';\n\nclass Vonage extends React.Component {\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"handlePublish\", () => {\n      console.log('Successfully published!');\n    });\n\n    _defineProperty(this, \"handleSubscribe\", () => {\n      console.log('Subscribed!');\n    });\n\n    _defineProperty(this, \"handleSessionError\", error => {\n      console.error(error);\n    });\n\n    _defineProperty(this, \"handlePublishError\", error => {\n      console.error(error);\n    });\n\n    _defineProperty(this, \"handleSubscribeError\", error => {\n      console.error(error);\n    });\n\n    this.state = {\n      ssButton: true,\n      streams: []\n    };\n    this.sessionEventHandlers = {\n      sessionConnected: () => {},\n      sessionDisconnected: () => {},\n      sessionReconnected: () => {},\n      sessionReconnecting: () => {}\n    };\n    this.publishEventHandlers = {\n      accessDenied: () => {},\n      streamCreated: () => {},\n      streamDestroyed: () => {}\n    };\n    this.subscribeEventHandlers = {\n      videoEnabled: () => {},\n      videoDisabled: () => {}\n    };\n    const {\n      sessionId,\n      token,\n      onLeave\n    } = this.props;\n    const layout = initLayoutContainer(options);\n    const boxes = layout.getLayout(this.state.streams.map(stream => {\n      width: stream.videoDimensions.width;\n\n      height: stream.videoDimensions.height;\n\n      big: stream.videoType === 'screen';\n    }));\n  }\n\n  screenShareButton() {\n    return this.state.ssButton === true ? __jsx(Button, {\n      onClick: () => {\n        EventEmitter.publish('startScreenShare');\n        EventEmitter.publish('disableVideo');\n        this.setState({\n          ssButton: false\n        });\n      },\n      style: {\n        fontSize: '.8vw',\n        display: 'inline-flex'\n      },\n      content: \"Share Screen\"\n    }) : __jsx(Button, {\n      onClick: () => {\n        EventEmitter.publish('stopScreenShare');\n        EventEmitter.publish('enableVideo');\n        this.setState({\n          ssButton: true\n        });\n      },\n      style: {\n        fontSize: '.8vw',\n        display: 'inline-flex'\n      },\n      content: \"Stop Screen Share\"\n    });\n  }\n\n  componentWillMount() {\n    const {\n      sessionId,\n      token,\n      onLeave\n    } = this.props;\n    this.sessionHelper = createSession({\n      apiKey: `${process.env.NEXT_PUBLIC_VV_API_KEY}`,\n      sessionId: `${sessionId}`,\n      token: `${token}`,\n      onStreamsUpdated: streams => {\n        this.setState({\n          streams\n        });\n      }\n    });\n  }\n\n  componentWillUnmount() {\n    this.sessionHelper.disconnect();\n  }\n\n  render() {\n    const {\n      sessionId,\n      token,\n      onLeave\n    } = this.props;\n    return __jsx(\"div\", null, __jsx(Publisher, {\n      session: this.sessionHelper.session\n    }), this.state.streams.map((stream, idx) => __jsx(\"div\", {\n      key: stream.id,\n      style: {\n        top: boxes[idx].top,\n        left: boxes[idx].left,\n        width: boxes[idx].width,\n        height: boxes[idx].height\n      }\n    }, __jsx(OTSubscriber, {\n      session: this.sessionHelper.session,\n      stream: stream,\n      className: \"subscriber-video-stream\",\n      properties: {\n        showControls: false\n      },\n      onSubscribe: this.handleSubscribe,\n      onError: this.handleSubscribeError\n    }))), this.screenShareButton(), __jsx(Button, {\n      onClick: onLeave,\n      color: \"red\",\n      icon: \"close\",\n      style: {\n        fontSize: '.8vw',\n        display: 'inline-flex'\n      },\n      content: \"Leave call\"\n    }));\n  }\n\n}\n\nVonage.propTypes = {\n  sessionId: PropTypes.string.isRequired,\n  token: PropTypes.string.isRequired,\n  onLeave: PropTypes.func.isRequired\n};\nexport default Vonage;","map":{"version":3,"sources":["C:/Users/ryanj/Documents/mercury/components/vonage.js"],"names":["React","PropTypes","Publisher","EventEmitter","OTSession","OTPublisher","OTStreams","OTSubscriber","createSession","Button","List","initLayoutContainer","Vonage","Component","constructor","props","console","log","error","state","ssButton","streams","sessionEventHandlers","sessionConnected","sessionDisconnected","sessionReconnected","sessionReconnecting","publishEventHandlers","accessDenied","streamCreated","streamDestroyed","subscribeEventHandlers","videoEnabled","videoDisabled","sessionId","token","onLeave","layout","options","boxes","getLayout","map","stream","width","videoDimensions","height","big","videoType","screenShareButton","publish","setState","fontSize","display","componentWillMount","sessionHelper","apiKey","process","env","NEXT_PUBLIC_VV_API_KEY","onStreamsUpdated","componentWillUnmount","disconnect","render","session","idx","id","top","left","showControls","handleSubscribe","handleSubscribeError","propTypes","string","isRequired","func"],"mappings":"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","sourcesContent":["import React from 'react'\nimport PropTypes from 'prop-types'\nimport Publisher from './publisher'\nimport { EventEmitter } from './util/EventEmitter'\nimport { OTSession, OTPublisher, OTStreams, OTSubscriber, createSession } from 'opentok-react'\nimport { Button, List } from 'semantic-ui-react'\nimport { initLayoutContainer } from 'opentok-layout-js'\n\nclass Vonage extends React.Component {\n  constructor(props) {\n    super(props)\n\n    this.state = {\n      ssButton: true,\n      streams: []\n    }\n\n    this.sessionEventHandlers = {\n      sessionConnected: () => {},\n      sessionDisconnected: () => {},\n      sessionReconnected: () => {},\n      sessionReconnecting: () => {},\n    }\n\n    this.publishEventHandlers = {\n      accessDenied: () => {},\n      streamCreated: () => {},\n      streamDestroyed: () => {},\n    }\n\n    this.subscribeEventHandlers = {\n      videoEnabled: () => {},\n      videoDisabled: () => {},\n    }\n\n    const { sessionId, token, onLeave } = this.props\n    const layout = initLayoutContainer(options)\n    const boxes = layout.getLayout(this.state.streams.map(stream => {\n      width: stream.videoDimensions.width\n      height: stream.videoDimensions.height\n      big: stream.videoType === 'screen'\n      })\n    )\n  }\n\n  handlePublish = () => {\n    console.log('Successfully published!')\n  }\n\n  handleSubscribe = () => {\n    console.log('Subscribed!')\n  }\n\n  handleSessionError = (error) => {\n    console.error(error)\n  }\n\n  handlePublishError = (error) => {\n    console.error(error)\n  }\n\n  handleSubscribeError = (error) => {\n    console.error(error)\n  }\n\n  screenShareButton() {\n    return this.state.ssButton === true ? (\n      <Button\n        onClick = {() => {\n          EventEmitter.publish('startScreenShare')\n          EventEmitter.publish('disableVideo')\n          this.setState({ssButton: false})\n          }\n        }\n        style = {{fontSize: '.8vw', display: 'inline-flex'}}\n        content = \"Share Screen\"\n      />\n    ) : (\n      <Button\n          onClick = {() => {\n              EventEmitter.publish('stopScreenShare')\n              EventEmitter.publish('enableVideo')\n              this.setState({ssButton: true})\n            }\n          }\n          style = {{fontSize: '.8vw', display: 'inline-flex'}}\n          content = \"Stop Screen Share\"\n        />\n    )\n  }\n\n  componentWillMount() {\n    const { sessionId, token, onLeave } = this.props\n    this.sessionHelper = createSession({\n      apiKey: `${process.env.NEXT_PUBLIC_VV_API_KEY}`,\n      sessionId: `${sessionId}`,\n      token: `${token}`,\n      onStreamsUpdated: streams => { this.setState({ streams }); }\n    });\n  }\n\n  componentWillUnmount() {\n    this.sessionHelper.disconnect();\n  }\n\n  render() {\n    const { sessionId, token, onLeave } = this.props\n    return (\n      <div>\n          <Publisher session={this.sessionHelper.session}/>\n          {this.state.streams.map((stream, idx) => (\n            <div key={stream.id} style={{top: boxes[idx].top, left: boxes[idx].left, width: boxes[idx].width, height: boxes[idx].height }}>\n              <OTSubscriber\n                session={this.sessionHelper.session}\n                stream={stream}\n                className=\"subscriber-video-stream\"\n                properties={{ showControls: false }}\n                onSubscribe = {this.handleSubscribe}\n                onError = {this.handleSubscribeError} />\n            </div>\n          ))}\n          {this.screenShareButton()}\n          <Button\n            onClick={onLeave}\n            color=\"red\"\n            icon=\"close\"\n            style = {{fontSize: '.8vw', display: 'inline-flex'}}\n            content=\"Leave call\"\n          />\n      </div>\n    )\n  }\n}\n\n\nVonage.propTypes = {\n  sessionId: PropTypes.string.isRequired,\n  token: PropTypes.string.isRequired,\n  onLeave: PropTypes.func.isRequired,\n}\n\nexport default Vonage\n"]},"metadata":{},"sourceType":"module"}