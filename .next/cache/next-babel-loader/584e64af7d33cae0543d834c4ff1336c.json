{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { Component } from 'react';\nimport { Label, Button } from 'semantic-ui-react';\nimport styled from 'styled-components';\nimport TaWaitingModal from './taWaitingModal';\nimport { NotificationContainer, NotificationManager } from 'react-notifications';\nimport { EventEmitter } from '../../util/EventEmitter';\nconst QueueDiv = styled.div.withConfig({\n  displayName: \"taQueueView__QueueDiv\",\n  componentId: \"bjnqi0-0\"\n})([\"grid-gap:2vh;\"]);\nconst QueueLabel = styled(Label).withConfig({\n  displayName: \"taQueueView__QueueLabel\",\n  componentId: \"bjnqi0-1\"\n})([\"text-align:center;\"]);\nexport default class TAQueueView extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      displayStudentsStyle: {\n        display: 'grid'\n      },\n      iconToDisplay: 'caret square down outline',\n      studentsInQueue: [],\n      me: this.props.me,\n      nextStudentName: '',\n      currStudentBeingHelped: '',\n      isReadyToRender: false,\n      inCallWithStudent: false\n    };\n    this.defineEventEmitterCallbacks();\n  }\n\n  defineEventEmitterCallbacks() {\n    EventEmitter.subscribe('activateTAWaitingModal', nextStudentName => {\n      this.setState({\n        nextStudentName\n      });\n      EventEmitter.publish('newTAWaitingModalProps', {\n        inviteNextStudent: true,\n        nextStudentName\n      });\n    });\n    EventEmitter.subscribe('removeTAWaitingModalOnTimeout', () => {\n      const {\n        nextStudentName\n      } = this.state;\n      this.createTimeoutNotification(nextStudentName);\n      this.setState({\n        currStudentBeingHelped: '',\n        nextStudentName: ''\n      });\n      EventEmitter.publish('newTAWaitingModalProps', {\n        inviteNextStudent: false,\n        nextStudentName: ''\n      });\n    });\n    EventEmitter.subscribe('removeTAWaitingModalOnAccept', () => {\n      this.setState({\n        nextStudentName: '',\n        inCallWithStudent: true\n      });\n      EventEmitter.publish('newTAWaitingModalProps', {\n        inviteNextStudent: false,\n        nextStudentName: ''\n      });\n    });\n    EventEmitter.subscribe('removeTAWaitingModalOnDecline', () => {\n      const {\n        nextStudentName\n      } = this.state;\n      this.createDeclineNotification(nextStudentName);\n      this.setState({\n        currStudentBeingHelped: '',\n        nextStudentName: ''\n      });\n      EventEmitter.publish('newTAWaitingModalProps', {\n        inviteNextStudent: false,\n        nextStudentName: ''\n      });\n    });\n    EventEmitter.subscribe('callOver', classId => {\n      const {\n        inCallWithStudent\n      } = this.state;\n\n      if (inCallWithStudent) {\n        EventEmitter.publish('signalCallOver');\n        EventEmitter.publish('activateFeedbackModal', classId);\n        this.setState({\n          inCallWithStudent: false,\n          currStudentBeingHelped: ''\n        });\n      }\n    });\n    EventEmitter.subscribe('updateStudentsInQueue', msg => {\n      this.setState({\n        studentsInQueue: msg.map(({\n          fullName\n        }) => fullName)\n      });\n    });\n    EventEmitter.subscribe('updateCurrStudent', currStudentBeingHelped => {\n      this.setState({\n        currStudentBeingHelped\n      });\n    });\n    EventEmitter.subscribe('initializeQueueOnGreeting', ({\n      currStudent,\n      studentsInQueue\n    }) => {\n      const myId = this.state.me.id;\n      const inQueue = studentsInQueue.filter(({\n        id\n      }) => id === myId).length > 0;\n      this.setState({\n        currStudentBeingHelped: currStudent,\n        studentsInQueue: studentsInQueue.map(({\n          fullName\n        }) => fullName),\n        inQueue\n      });\n    });\n  }\n\n  createTimeoutNotification(studentName) {\n    NotificationManager.info(`${studentName}'s Invitation Has Expired`);\n  }\n\n  createDeclineNotification(studentName) {\n    NotificationManager.info(`${studentName} Has Declined The Call`);\n  }\n\n  componentDidMount() {\n    EventEmitter.publish('greeting');\n    this.setState({\n      isReadyToRender: true\n    });\n  }\n\n  isStudentDisplayed() {\n    let {\n      display\n    } = this.state.displayStudentsStyle;\n    return display === 'grid';\n  }\n\n  alterStudentDisplay() {\n    let displayStudentsStyle = this.isStudentDisplayed() ? {\n      display: 'none'\n    } : {\n      display: 'grid'\n    };\n    let iconToDisplay = this.isStudentDisplayed() ? 'caret square up outline' : 'caret square down outline';\n    this.setState({\n      displayStudentsStyle,\n      iconToDisplay\n    });\n  }\n\n  getNextStudentInQueue() {\n    EventEmitter.publish('signalGetNextStudent');\n  }\n\n  getButtonToDisplay() {\n    if (this.state.inCallWithStudent) {\n      return null;\n    }\n\n    return __jsx(\"div\", {\n      style: {\n        position: 'absolute',\n        width: 'calc(100% - 38px)',\n        bottom: 14,\n        display: 'inline-flex'\n      }\n    }, __jsx(Button, {\n      style: {\n        width: '100%',\n        fontSize: '1vw'\n      },\n      onClick: this.getNextStudentInQueue.bind(this),\n      primary: true\n    }, \"Next\"));\n  }\n\n  createCurrStudentLabel() {\n    const {\n      currStudentBeingHelped\n    } = this.state;\n\n    if (currStudentBeingHelped.length == 0) {\n      return null;\n    }\n\n    return __jsx(QueueLabel, {\n      style: {\n        fontSize: '1.2vw',\n        textAlign: 'center',\n        width: '95%',\n        marginBottom: '2%',\n        minWidth: '41px',\n        marginLeft: '.8%',\n        backgroundColor: 'red',\n        marginRight: '1%'\n      },\n      key: currStudentBeingHelped\n    }, currStudentBeingHelped);\n  }\n\n  createQueueLabel(student) {\n    return __jsx(QueueLabel, {\n      style: {\n        fontSize: '1.2vw',\n        textAlign: 'center',\n        width: '95%',\n        marginBottom: '2%',\n        minWidth: '41px',\n        marginLeft: '.8%',\n        marginRight: '1%'\n      },\n      key: student\n    }, student);\n  }\n\n  render() {\n    const {\n      isReadyToRender\n    } = this.state;\n\n    if (!isReadyToRender) {\n      return null;\n    }\n\n    const queueLabels = this.state.displayStudentsStyle.display == 'none' ? __jsx(React.Fragment, null) : this.state.studentsInQueue.map(this.createQueueLabel);\n    return __jsx(QueueDiv, null, __jsx(TaWaitingModal, null), __jsx(Button.Group, {\n      size: \"huge\",\n      style: {\n        marginBottom: 12,\n        width: '95%'\n      },\n      fluid: true,\n      vertical: true\n    }, __jsx(Button, {\n      compact: true,\n      content: \"Queue\",\n      icon: this.state.iconToDisplay,\n      labelPosition: \"right\",\n      onClick: this.alterStudentDisplay.bind(this),\n      style: {\n        fontSize: '1.5vw',\n        textAlign: 'center',\n        width: '100%',\n        marginBottom: '2%',\n        minWidth: '41px'\n      }\n    })), this.createCurrStudentLabel(), __jsx(QueueDiv, {\n      style: {\n        width: '100%',\n        marginBottom: '2%',\n        minWidth: '41px'\n      }\n    }, queueLabels), this.getButtonToDisplay(), __jsx(NotificationContainer, null));\n  }\n\n}","map":null,"metadata":{},"sourceType":"module"}