{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { EventEmitter } from '../components/util/EventEmitter';\nvar url = 'ws://localhost:8080';\nvar role = 'Instructor';\n/**\r\n * QueueWebSocket controls the web socket business logic for the course queue and\r\n * functions as a controller for the queue state\r\n */\n\nvar TAWebSocketClient = /*#__PURE__*/function () {\n  function TAWebSocketClient() {\n    _classCallCheck(this, TAWebSocketClient);\n  }\n\n  _createClass(TAWebSocketClient, [{\n    key: \"start\",\n    value: function start(_ref) {\n      var me = _ref.me,\n          courseId = _ref.courseId,\n          onJoin = _ref.onJoin;\n      var id = me.id;\n      this.id = id;\n      this.courseId = courseId;\n      this.onJoin = onJoin;\n      this.connection = new WebSocket(url);\n      this.connection.onopen = this.processConnectionOpen.bind(this);\n      this.connection.onerror = this.processConnectionError.bind(this);\n      this.connection.onmessage = this.processConnectionMessage.bind(this);\n      this.defineEventEmitterCallbacks();\n    }\n  }, {\n    key: \"defineEventEmitterCallbacks\",\n    value: function defineEventEmitterCallbacks() {\n      var _this = this;\n\n      EventEmitter.subscribe('greeting', function () {\n        _this.connection.send(_this.prepareMessage({\n          msgType: 'greeting',\n          msg: _this.id\n        }));\n      });\n      EventEmitter.subscribe('signalGetNextStudent', function () {\n        _this.getNextStudent();\n      });\n      EventEmitter.subscribe('signalCallOver', function () {\n        _this.signalCallOver();\n      });\n      EventEmitter.subscribe('userLeaveGroup', function (group) {\n        _this.connection.send(_this.prepareMessage({\n          msgType: 'userLeaveGroup',\n          msg: group\n        }));\n      });\n      EventEmitter.subscribe('userJoinGroup', function (groupId) {\n        _this.connection.send(_this.prepareMessage({\n          msgType: 'userJoinGroup',\n          msg: groupId\n        }));\n      });\n    }\n  }, {\n    key: \"processConnectionOpen\",\n    value: function processConnectionOpen() {\n      this.connection.send(this.prepareMessage({\n        msgType: 'greeting',\n        msg: this.id\n      })); // notify the server which courseId this websocket belongs to\n    }\n  }, {\n    key: \"processConnectionError\",\n    value: function processConnectionError(error) {\n      console.log(\"WebSocket error: \".concat(error));\n    }\n  }, {\n    key: \"activateTAWaitingModal\",\n    value: function activateTAWaitingModal(studentName) {\n      EventEmitter.publish('activateTAWaitingModal', studentName);\n    }\n  }, {\n    key: \"removeTAWaitingModalOnTimeout\",\n    value: function removeTAWaitingModalOnTimeout() {\n      EventEmitter.publish('removeTAWaitingModalOnTimeout');\n    }\n  }, {\n    key: \"removeTAWaitingModalOnAccept\",\n    value: function removeTAWaitingModalOnAccept() {\n      EventEmitter.publish('removeTAWaitingModalOnAccept');\n    }\n  }, {\n    key: \"removeTAWaitingModalOnDecline\",\n    value: function removeTAWaitingModalOnDecline() {\n      EventEmitter.publish('removeTAWaitingModalOnDecline');\n    }\n  }, {\n    key: \"updateStudentsInQueue\",\n    value: function updateStudentsInQueue(msg) {\n      EventEmitter.publish('updateStudentsInQueue', msg);\n    }\n  }, {\n    key: \"updateCurrStudent\",\n    value: function updateCurrStudent(msg) {\n      EventEmitter.publish('updateCurrStudent', msg);\n    }\n  }, {\n    key: \"initializeQueueOnGreeting\",\n    value: function initializeQueueOnGreeting(msg) {\n      EventEmitter.publish('initializeQueueOnGreeting', msg);\n    }\n  }, {\n    key: \"notifyFetchGroups\",\n    value: function notifyFetchGroups() {\n      EventEmitter.publish('fetchGroups');\n    }\n  }, {\n    key: \"processConnectionMessage\",\n    value: function processConnectionMessage(e) {\n      var _JSON$parse = JSON.parse(e.data),\n          msgType = _JSON$parse.msgType,\n          msg = _JSON$parse.msg;\n\n      switch (msgType) {\n        case 'greetingAck':\n          this.initializeQueueOnGreeting(msg);\n          break;\n\n        case 'queue':\n          // in this case, the server will send a message indicating the current students in the queue\n          // msg - the new queue\n          this.updateStudentsInQueue(msg);\n          break;\n\n        case 'nextStudentNotified':\n          // in this case, the server lets the TA know that the student has been notified\n          // msg - the name of the student who was notified\n          this.activateTAWaitingModal(msg);\n          break;\n\n        case 'studentTimeout':\n          // in this case, the server lets the TA know that the student has timed out\n          this.removeTAWaitingModalOnTimeout();\n          break;\n\n        case 'studentJoin':\n          // in this case, the TA's invitation to join has been accepted\n          this.removeTAWaitingModalOnAccept();\n          this.onJoin(JSON.parse(msg));\n          break;\n\n        case 'studentDecline':\n          // in this case the student declines the TA's invitation, and the TA's modal closes\n          this.removeTAWaitingModalOnDecline();\n          break;\n\n        case 'currStudentUpdate':\n          this.updateCurrStudent(msg);\n          break;\n\n        case 'fetchGroups':\n          this.notifyFetchGroups();\n          break;\n\n        default:\n          throw new Error(\"Message \".concat(msg, \" is incorrectly formatted\"));\n      }\n    }\n  }, {\n    key: \"getNextStudent\",\n    value: function getNextStudent() {\n      this.connection.send(this.prepareMessage({\n        msgType: 'next',\n        msg: this.id\n      }));\n    }\n  }, {\n    key: \"signalCallOver\",\n    value: function signalCallOver() {\n      this.connection.send(this.prepareMessage({\n        msgType: 'callOver',\n        msg: 'callOver'\n      }));\n    }\n  }, {\n    key: \"prepareMessage\",\n    value: function prepareMessage(msg) {\n      var courseId = this.courseId;\n\n      var enrichedPayload = _objectSpread(_objectSpread({}, msg), {}, {\n        courseId: courseId,\n        role: role\n      });\n\n      return JSON.stringify(enrichedPayload);\n    }\n  }]);\n\n  return TAWebSocketClient;\n}();\n\nexport { TAWebSocketClient as default };","map":{"version":3,"sources":["C:/Users/ryanj/Documents/mercury/util/taWebSocket.js"],"names":["EventEmitter","url","role","TAWebSocketClient","me","courseId","onJoin","id","connection","WebSocket","onopen","processConnectionOpen","bind","onerror","processConnectionError","onmessage","processConnectionMessage","defineEventEmitterCallbacks","subscribe","send","prepareMessage","msgType","msg","getNextStudent","signalCallOver","group","groupId","error","console","log","studentName","publish","e","JSON","parse","data","initializeQueueOnGreeting","updateStudentsInQueue","activateTAWaitingModal","removeTAWaitingModalOnTimeout","removeTAWaitingModalOnAccept","removeTAWaitingModalOnDecline","updateCurrStudent","notifyFetchGroups","Error","enrichedPayload","stringify"],"mappings":"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","sourcesContent":["import { EventEmitter } from '../components/util/EventEmitter'\r\nconst url = 'ws://localhost:8080'\r\nconst role = 'Instructor'\r\n\r\n/**\r\n * QueueWebSocket controls the web socket business logic for the course queue and\r\n * functions as a controller for the queue state\r\n */\r\n\r\nexport default class TAWebSocketClient {\r\n  start({ me, courseId, onJoin }) {\r\n    const { id } = me\r\n    this.id = id\r\n    this.courseId = courseId\r\n    this.onJoin = onJoin\r\n    this.connection = new WebSocket(url)\r\n    this.connection.onopen = this.processConnectionOpen.bind(this)\r\n    this.connection.onerror = this.processConnectionError.bind(this)\r\n    this.connection.onmessage = this.processConnectionMessage.bind(this)\r\n    this.defineEventEmitterCallbacks()\r\n  }\r\n\r\n  defineEventEmitterCallbacks() {\r\n    EventEmitter.subscribe('greeting', () => {\r\n      this.connection.send(\r\n        this.prepareMessage({\r\n          msgType: 'greeting',\r\n          msg: this.id,\r\n        })\r\n      )\r\n    })\r\n\r\n    EventEmitter.subscribe('signalGetNextStudent', () => {\r\n      this.getNextStudent()\r\n    })\r\n\r\n    EventEmitter.subscribe('signalCallOver', () => {\r\n      this.signalCallOver()\r\n    })\r\n\r\n    EventEmitter.subscribe('userLeaveGroup', (group) => {\r\n      this.connection.send(\r\n        this.prepareMessage({\r\n          msgType: 'userLeaveGroup',\r\n          msg: group,\r\n        })\r\n      )\r\n    })\r\n\r\n    EventEmitter.subscribe('userJoinGroup', (groupId) => {\r\n      this.connection.send(\r\n        this.prepareMessage({\r\n          msgType: 'userJoinGroup',\r\n          msg: groupId,\r\n        })\r\n      )\r\n    })\r\n  }\r\n\r\n  processConnectionOpen() {\r\n    this.connection.send(\r\n      this.prepareMessage({\r\n        msgType: 'greeting',\r\n        msg: this.id,\r\n      })\r\n    ) // notify the server which courseId this websocket belongs to\r\n  }\r\n\r\n  processConnectionError(error) {\r\n    console.log(`WebSocket error: ${error}`)\r\n  }\r\n\r\n  activateTAWaitingModal(studentName) {\r\n    EventEmitter.publish('activateTAWaitingModal', studentName)\r\n  }\r\n\r\n  removeTAWaitingModalOnTimeout() {\r\n    EventEmitter.publish('removeTAWaitingModalOnTimeout')\r\n  }\r\n\r\n  removeTAWaitingModalOnAccept() {\r\n    EventEmitter.publish('removeTAWaitingModalOnAccept')\r\n  }\r\n\r\n  removeTAWaitingModalOnDecline() {\r\n    EventEmitter.publish('removeTAWaitingModalOnDecline')\r\n  }\r\n\r\n  updateStudentsInQueue(msg) {\r\n    EventEmitter.publish('updateStudentsInQueue', msg)\r\n  }\r\n\r\n  updateCurrStudent(msg) {\r\n    EventEmitter.publish('updateCurrStudent', msg)\r\n  }\r\n\r\n  initializeQueueOnGreeting(msg) {\r\n    EventEmitter.publish('initializeQueueOnGreeting', msg)\r\n  }\r\n\r\n  notifyFetchGroups() {\r\n    EventEmitter.publish('fetchGroups')\r\n  }\r\n\r\n  processConnectionMessage(e) {\r\n    const { msgType, msg } = JSON.parse(e.data)\r\n\r\n    switch (msgType) {\r\n      case 'greetingAck':\r\n        this.initializeQueueOnGreeting(msg)\r\n        break\r\n\r\n      case 'queue': // in this case, the server will send a message indicating the current students in the queue\r\n        // msg - the new queue\r\n        this.updateStudentsInQueue(msg)\r\n        break\r\n\r\n      case 'nextStudentNotified': // in this case, the server lets the TA know that the student has been notified\r\n        // msg - the name of the student who was notified\r\n        this.activateTAWaitingModal(msg)\r\n        break\r\n\r\n      case 'studentTimeout': // in this case, the server lets the TA know that the student has timed out\r\n        this.removeTAWaitingModalOnTimeout()\r\n        break\r\n\r\n      case 'studentJoin': // in this case, the TA's invitation to join has been accepted\r\n        this.removeTAWaitingModalOnAccept()\r\n        this.onJoin(JSON.parse(msg))\r\n        break\r\n\r\n      case 'studentDecline': // in this case the student declines the TA's invitation, and the TA's modal closes\r\n        this.removeTAWaitingModalOnDecline()\r\n        break\r\n\r\n      case 'currStudentUpdate':\r\n        this.updateCurrStudent(msg)\r\n        break\r\n\r\n      case 'fetchGroups':\r\n        this.notifyFetchGroups()\r\n        break\r\n\r\n      default:\r\n        throw new Error(`Message ${msg} is incorrectly formatted`)\r\n    }\r\n  }\r\n\r\n  getNextStudent() {\r\n    this.connection.send(\r\n      this.prepareMessage({\r\n        msgType: 'next',\r\n        msg: this.id,\r\n      })\r\n    )\r\n  }\r\n\r\n  signalCallOver() {\r\n    this.connection.send(\r\n      this.prepareMessage({\r\n        msgType: 'callOver',\r\n        msg: 'callOver',\r\n      })\r\n    )\r\n  }\r\n\r\n  prepareMessage(msg) {\r\n    const { courseId } = this\r\n    const enrichedPayload = { ...msg, courseId, role }\r\n    return JSON.stringify(enrichedPayload)\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}