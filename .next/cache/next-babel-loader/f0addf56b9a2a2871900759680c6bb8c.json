{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nconst url = 'ws://localhost:8080';\nconst role = 'Instructor';\n/**\r\n * QueueWebSocket controls the web socket business logic for the course queue and\r\n * functions as a controller for the queue state\r\n */\n\nexport default class TAWebSocketController {\n  constructor(component) {\n    this.component = component;\n    this.started = false;\n  }\n\n  start() {\n    const {\n      me\n    } = this.component.state;\n    const {\n      firstName,\n      lastName\n    } = me;\n    this.fullName = `${firstName} ${lastName}`;\n    this.connection = new WebSocket(url);\n    this.connection.onopen = this.processConnectionOpen.bind(this);\n    this.connection.onerror = this.processConnectionError.bind(this);\n    this.connection.onmessage = this.processConnectionMessage.bind(this);\n  }\n\n  processConnectionOpen() {\n    const {\n      fullName\n    } = this;\n    this.connection.send(this.prepareMessage({\n      msgType: 'greeting',\n      msg: fullName\n    })); // notify the server which courseId this websocket belongs to\n  }\n\n  processConnectionError(error) {\n    console.log(`WebSocket error: ${error}`);\n  }\n\n  activateTAWaitingModal(studentName) {\n    this.component.setState({\n      inviteNextStudent: true,\n      nextStudentName: studentName\n    });\n  }\n\n  removeTAWaitingModal() {\n    const {\n      nextStudentName\n    } = this.component.state;\n    this.component.createTimeoutNotification(nextStudentName);\n    this.component.setState({\n      inviteNextStudent: false,\n      nextStudentName: ''\n    });\n  }\n\n  updateStudentsInQueue(msg) {\n    this.component.setState({\n      studentsInQueue: msg\n    });\n  }\n\n  processConnectionMessage(e) {\n    const {\n      msgType,\n      msg\n    } = JSON.parse(e.data);\n\n    switch (msgType) {\n      case 'queue':\n        // in this case, the server will send a message indicating the current students in the queue\n        // msg - the new queue\n        this.updateStudentsInQueue(msg);\n        break;\n\n      case 'nextStudentNotified':\n        // in this case, the server lets the TA know that the student has been notified\n        // msg - the name of the student who was notified\n        this.activateTAWaitingModal(msg);\n        break;\n\n      case 'studentTimeout':\n        // in this case, the server lets the TA know that the student has timed out\n        this.removeTAWaitingModal();\n        break;\n\n      default:\n        throw new Error(`Message ${msg} is incorrectly formatted`);\n    }\n  }\n\n  getNextStudent() {\n    this.connection.send(this.prepareMessage({\n      msgType: 'next',\n      msg: this.fullName\n    }));\n  }\n\n  prepareMessage(msg) {\n    const {\n      courseId\n    } = this.component;\n\n    const enrichedPayload = _objectSpread(_objectSpread({}, msg), {}, {\n      courseId,\n      role\n    });\n\n    return JSON.stringify(enrichedPayload);\n  }\n\n}","map":{"version":3,"sources":["C:/Users/ryanj/Documents/mercury/components/queue/ta/taWebSocket.js"],"names":["url","role","TAWebSocketController","constructor","component","started","start","me","state","firstName","lastName","fullName","connection","WebSocket","onopen","processConnectionOpen","bind","onerror","processConnectionError","onmessage","processConnectionMessage","send","prepareMessage","msgType","msg","error","console","log","activateTAWaitingModal","studentName","setState","inviteNextStudent","nextStudentName","removeTAWaitingModal","createTimeoutNotification","updateStudentsInQueue","studentsInQueue","e","JSON","parse","data","Error","getNextStudent","courseId","enrichedPayload","stringify"],"mappings":"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","sourcesContent":["const url = 'ws://localhost:8080'\r\nconst role = 'Instructor'\r\n\r\n/**\r\n * QueueWebSocket controls the web socket business logic for the course queue and\r\n * functions as a controller for the queue state\r\n */\r\n\r\nexport default class TAWebSocketController {\r\n  constructor(component) {\r\n    this.component = component\r\n    this.started = false\r\n  }\r\n\r\n  start() {\r\n    const { me } = this.component.state\r\n    const { firstName, lastName } = me\r\n    this.fullName = `${firstName} ${lastName}`\r\n\r\n    this.connection = new WebSocket(url)\r\n    this.connection.onopen = this.processConnectionOpen.bind(this)\r\n    this.connection.onerror = this.processConnectionError.bind(this)\r\n    this.connection.onmessage = this.processConnectionMessage.bind(this)\r\n  }\r\n\r\n  processConnectionOpen() {\r\n    const { fullName } = this\r\n\r\n    this.connection.send(\r\n      this.prepareMessage({\r\n        msgType: 'greeting',\r\n        msg: fullName,\r\n      })\r\n    ) // notify the server which courseId this websocket belongs to\r\n  }\r\n\r\n  processConnectionError(error) {\r\n    console.log(`WebSocket error: ${error}`)\r\n  }\r\n\r\n  activateTAWaitingModal(studentName) {\r\n    this.component.setState({\r\n      inviteNextStudent: true,\r\n      nextStudentName: studentName,\r\n    })\r\n  }\r\n\r\n  removeTAWaitingModal() {\r\n    const { nextStudentName } = this.component.state\r\n    this.component.createTimeoutNotification(nextStudentName)\r\n\r\n    this.component.setState({\r\n      inviteNextStudent: false,\r\n      nextStudentName: '',\r\n    })\r\n  }\r\n\r\n  updateStudentsInQueue(msg) {\r\n    this.component.setState({ studentsInQueue: msg })\r\n  }\r\n\r\n  processConnectionMessage(e) {\r\n    const { msgType, msg } = JSON.parse(e.data)\r\n\r\n    switch (msgType) {\r\n      case 'queue': // in this case, the server will send a message indicating the current students in the queue\r\n        // msg - the new queue\r\n        this.updateStudentsInQueue(msg)\r\n        break\r\n\r\n      case 'nextStudentNotified': // in this case, the server lets the TA know that the student has been notified\r\n        // msg - the name of the student who was notified\r\n        this.activateTAWaitingModal(msg)\r\n        break\r\n\r\n      case 'studentTimeout': // in this case, the server lets the TA know that the student has timed out\r\n        this.removeTAWaitingModal()\r\n        break\r\n      default:\r\n        throw new Error(`Message ${msg} is incorrectly formatted`)\r\n    }\r\n  }\r\n\r\n  getNextStudent() {\r\n    this.connection.send(\r\n      this.prepareMessage({\r\n        msgType: 'next',\r\n        msg: this.fullName,\r\n      })\r\n    )\r\n  }\r\n\r\n  prepareMessage(msg) {\r\n    const { courseId } = this.component\r\n    const enrichedPayload = { ...msg, courseId, role }\r\n    return JSON.stringify(enrichedPayload)\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}