{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nvar __jsx = React.createElement;\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component } from 'react';\nimport { OTPublisher } from 'opentok-react';\nimport { Button } from 'semantic-ui-react';\nimport { EventEmitter } from './util/EventEmitter';\n\nvar ScreenPublisher = /*#__PURE__*/function (_Component) {\n  _inherits(ScreenPublisher, _Component);\n\n  var _super = _createSuper(ScreenPublisher);\n\n  function ScreenPublisher(props) {\n    var _this;\n\n    _classCallCheck(this, ScreenPublisher);\n\n    _this = _super.call(this, props);\n\n    _defineProperty(_assertThisInitialized(_this), \"onError\", function (err) {\n      _this.setState({\n        error: \"Failed to publish: \".concat(err.message)\n      });\n    });\n\n    _this.state = {\n      error: null,\n      audio: true,\n      video: true,\n      videoSource: 'screen',\n      appear: false\n    };\n\n    _this.defineEventEmitterCallbacks();\n\n    return _this;\n  }\n\n  _createClass(ScreenPublisher, [{\n    key: \"defineEventEmitterCallbacks\",\n    value: function defineEventEmitterCallbacks() {\n      var _this2 = this;\n\n      EventEmitter.subscribe('startScreenShare', function () {\n        _this2.setState({\n          appear: true\n        });\n      });\n      EventEmitter.subscribe('stopScreenShare', function () {\n        _this2.setState({\n          appear: false\n        });\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this3 = this;\n\n      return this.state.appear === false ? null : __jsx(React.Fragment, null, this.state.error ? __jsx(\"div\", null, this.state.error) : null, __jsx(OTPublisher, {\n        properties: {\n          width: '13.62vw',\n          maxWidth: '13.62vw',\n          height: '20vh',\n          publishAudio: this.state.audio,\n          publishVideo: this.state.video,\n          videoSource: 'screen',\n          name: this.props.name,\n          style: {\n            buttonDisplayMode: 'on',\n            nameDisplayMode: 'on'\n          }\n        },\n        onPublish: function onPublish() {\n          EventEmitter.publish('screenShareOn', {\n            name: _this3.props.name,\n            sessionId: _this3.props.session.sessionId\n          });\n        },\n        session: this.props.session,\n        onError: this.onError\n      }));\n    }\n  }]);\n\n  return ScreenPublisher;\n}(Component);\n\nexport { ScreenPublisher as default };","map":null,"metadata":{},"sourceType":"module"}