{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { Component } from 'react';\nimport { withRouter } from 'next/router';\nimport dynamic from 'next/dynamic';\nimport Layout from '../../components/layout';\nimport { Button, Accordion, List, Icon, Label } from 'semantic-ui-react';\nimport { AuthRequired } from '../../components/authProvider';\nimport Queue from '../../components/queue/queue';\nimport * as api from '../../util/mercuryService';\nimport CreateGroupModal from '../../components/createGroupModal';\nimport UserInviteModal from '../../components/invite/userInviteModal';\nimport { EventEmitter } from '../../components/util/EventEmitter';\nimport FeedbackModal from '../../components/feedbackModal';\nimport StudentWebSocketClient from '../../util/studentWebSocket';\nimport TAWebSocketClient from '../../util/taWebSocket';\nimport ReceiveInviteModal from '../../components/invite/receiveInviteModal';\nimport { NotificationContainer, NotificationManager } from 'react-notifications';\nimport GroupJoinRequestModal from '../../components/invite/groupJoinRequestModal';\nimport WaitingForRequestApprovalModal from '../../components/invite/WaitingForRequestApprovalModal';\nimport WaitingForNewLeaderModal from '../../components/WaitingForNewLeaderModal';\nimport AccessDeniedModal from '../../components/accessDeniedModal';\nimport OfficeAccessModal from '../../components/officeAccessModal';\nimport { confirmAlert } from 'react-confirm-alert'; // Import\n\nconst ScreenContainer = dynamic(() => import('../../components/screenContainer'), {\n  ssr: false,\n  loadableGenerated: {\n    webpack: () => [require.resolveWeak('../../components/screenContainer')],\n    modules: ['../../components/screenContainer']\n  }\n});\nconst CreateDiscussionModal = dynamic(() => import('../../components/createDiscussionModal'), {\n  ssr: false,\n  loadableGenerated: {\n    webpack: () => [require.resolveWeak('../../components/createDiscussionModal')],\n    modules: ['../../components/createDiscussionModal']\n  }\n});\n\nclass ClassPage extends Component {\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"fetchAllGroups\", () => {\n      api.getGroups(this.state.currentClass.id).then(groups => this.setState({\n        allGroups: groups\n      }));\n    });\n\n    _defineProperty(this, \"leaveGroupForTAOffice\", () => {\n      api.deleteGroupUser(this.state.currentClass.id, this.state.currentGroup.id, this.user.id).catch(console.error);\n      this.fetchAllGroups();\n      EventEmitter.publish('classGroupSetChanged', this.classId);\n      EventEmitter.publish('userLeaveGroup', this.state.currentGroup);\n      this.setState({\n        vonageCred: null,\n        currentGroup: {\n          id: '',\n          name: ''\n        },\n        withTa: true\n      });\n      EventEmitter.publish('currentGroupChange', {\n        id: '',\n        name: ''\n      });\n      localStorage.removeItem('lastCallEntered');\n    });\n\n    _defineProperty(this, \"leaveGroup\", () => {\n      api.deleteGroupUser(this.state.currentClass.id, this.state.currentGroup.id, this.user.id).catch(console.error);\n      this.fetchAllGroups(); // re-fetch current groups\n\n      EventEmitter.publish('classGroupSetChanged', this.classId); // tell everyone to re-fetch their groups in the class\n\n      EventEmitter.publish('userLeaveGroup', this.state.currentGroup); // notify backend that you have left the call\n\n      this.setState({\n        // leave the call\n        vonageCred: null,\n        currentGroup: {\n          id: '',\n          name: ''\n        },\n        withTa: false\n      });\n      EventEmitter.publish('currentGroupChange', {\n        id: '',\n        name: ''\n      }); // change current group\n\n      EventEmitter.publish('callOver', this.classId); // signal call over, which triggers feedback modal and curr student update on the queue\n\n      localStorage.removeItem('lastCallEntered');\n    });\n\n    _defineProperty(this, \"handleBack\", async () => {\n      await this.props.router.push('/calendar');\n    });\n\n    _defineProperty(this, \"handleSelectGroup\", async group => {\n      const {\n        role\n      } = this.state.currentClass;\n\n      if (group.type === 'office' || role === 'Professor' || group.type === 'discussion') {\n        // you are popped off the waiting queue or you are a TA\n        this.joinGroup(group);\n        return;\n      }\n      /**\r\n       * First, check if you are the leader of the group\r\n       */\n\n\n      const currGroup = await api.getGroupByID(this.classId, group.id);\n      const {\n        UserId\n      } = currGroup;\n      const {\n        id\n      } = this.user;\n\n      if (UserId === id) {\n        // you are the leader of the group, no need for authentication\n        this.joinGroup(group);\n      } else {\n        /**\r\n         * Ping group leader to let you into the group\r\n         */\n        EventEmitter.publish('activateWaitingForRequestApprovalModal', group);\n        EventEmitter.publish('requestJoinGroup', {\n          userId: id,\n          group: group\n        });\n      }\n    });\n\n    _defineProperty(this, \"handleCreateTAOffice\", async group => {\n      if (this.state.allGroups.filter(check => check.name === group.name).length === 0) {\n        const groupData = await api.postGroup(group.classId, group.name, group.type, group.userId);\n        EventEmitter.publish('classGroupSetChanged', this.classId);\n        this.fetchAllGroups();\n      } else {}\n    });\n\n    _defineProperty(this, \"handleCreateGroup\", async group => {\n      const groupData = await api.postGroup(this.classId, group.name, group.type, this.user.id);\n      EventEmitter.publish('classGroupSetChanged', this.classId);\n      await this.handleSelectGroup(groupData);\n      this.fetchAllGroups();\n    });\n\n    this.state = {\n      withTa: false,\n      clicked: 'none',\n      currentGroup: {\n        id: '',\n        name: ''\n      },\n      currentClass: {\n        id: '',\n        name: '',\n        //groups: [],\n        users: [],\n        role: 'Student'\n      },\n      vonageCred: null,\n      isMounted: false,\n      allGroups: [],\n      toRejoin: false // activate rejoin option confirm alert\n\n    };\n    this.defineEventEmitterCallbacks();\n  }\n\n  joinGroup(group) {\n    api.postGroupToken(this.classId, group.id).then(({\n      token\n    }) => {\n      if (this.state.currentGroup.id !== '') {\n        //the user is currently in a call, leave the call first\n        if (group.type === 'office') {\n          // this case only happens when the user is leaving a private group for the TA office\n          // do not trigger the callOver event in this case\n          this.leaveGroupForTAOffice();\n        } else {\n          this.leaveGroup();\n        }\n      }\n\n      this.setState({\n        vonageCred: {\n          sessionId: group.sessionId,\n          token\n        },\n        currentGroup: group\n      }, () => {\n        EventEmitter.publish('userJoinGroup', {\n          groupId: group.id,\n          userId: this.user.id,\n          groupType: group.type\n        });\n        EventEmitter.publish('currentGroupChange', group); // log the credentials of your most recent call\n\n        localStorage.setItem('lastCallEntered', JSON.stringify(group));\n      });\n    }).then(() => {\n      api.postJoinGroup(this.classId, group.id, this.user.email).then(() => EventEmitter.publish('classGroupSetChanged', this.classId));\n    }).then(() => {\n      this.fetchAllGroups();\n    }).catch(console.error);\n  }\n\n  defineEventEmitterCallbacks() {\n    EventEmitter.subscribe('clearLeftSide', () => {\n      this.setState({\n        withTa: true\n      });\n    });\n    EventEmitter.subscribe('joinPrivateGroupOnApproval', group => {\n      EventEmitter.publish('removeWaitingForRequestApprovalModal');\n      this.joinGroup(group);\n    });\n    EventEmitter.subscribe('notifyJoinRequestDeclined', group => {\n      NotificationManager.info(`Your Request To Join ${group.name} Was Declined`);\n      EventEmitter.publish('removeWaitingForRequestApprovalModal');\n    });\n    EventEmitter.subscribe('fetchGroups', () => {\n      this.fetchAllGroups();\n    });\n    EventEmitter.subscribe('createNotification', msg => {\n      NotificationManager.info(msg);\n    });\n    EventEmitter.subscribe('createTAOffice', classUser => {\n      this.fetchAllGroups();\n      this.handleCreateTAOffice({\n        classId: classUser.classId,\n        name: this.user.firstName + ' ' + this.user.lastName + \"'s Office\",\n        type: 'office',\n        userId: classUser.userId\n      });\n    });\n    EventEmitter.subscribe('leaveCallOnError', () => {\n      this.leaveGroup();\n    });\n  }\n\n  componentDidMount() {\n    const {\n      classId\n    } = this.props.router.query;\n    if (!classId) return;\n    this.classId = Number(classId);\n    api.getMe().then(meData => {\n      this.user = meData;\n    }).then(() => api.getClass(this.classId)).then(c => {\n      const userRole = c.users.find(u => u.id === this.user.id);\n      if (!userRole) this.props.router.push('/calendar');\n      const {\n        role\n      } = userRole;\n      let toRejoin = false;\n      /**\r\n       * Start the appropriate web socket handler depending on the user role\r\n       */\n\n      if (role === 'Student') {\n        /**\r\n         * Start student web socket handler\r\n         */\n        new StudentWebSocketClient().start({\n          me: this.user,\n          courseId: this.classId\n        });\n      } else {\n        /**\r\n         * Start TA web socket handler\r\n         */\n        new TAWebSocketClient().start({\n          me: this.user,\n          courseId: this.classId,\n          onJoin: this.handleSelectGroup\n        });\n\n        if (localStorage.getItem('lastCallEntered')) {\n          // if you were previously involved in a call, please allow rejoin option\n          toRejoin = true;\n        }\n      }\n\n      this.setState({\n        currentClass: _objectSpread(_objectSpread({}, c), {}, {\n          role: userRole.role\n        }),\n        toRejoin\n      });\n      EventEmitter.publish('allOtherUsersInClass', this.state.currentClass.users.filter(user => user.id !== this.user.id && user.role === role));\n      EventEmitter.publish('me', this.user);\n    }).then(() => {\n      this.fetchAllGroups();\n    }).then(() => {\n      setInterval(this.fetchAllGroups, 10000);\n    }).then(() => {\n      this.setState({\n        isMounted: true\n      });\n    }).catch(console.error);\n  }\n\n  getButtonToDisplay() {\n    return this.state.currentClass.role === 'Student' ? __jsx(CreateGroupModal, {\n      onCreate: this.handleCreateGroup\n    }) : this.state.clicked === 'none' ? __jsx(Button, {\n      color: \"teal\",\n      content: \"Modify Discussions\",\n      fluid: true,\n      style: {\n        fontSize: '1vw'\n      },\n      onClick: () => {\n        this.setState({\n          clicked: 'inline'\n        });\n      }\n    }) : __jsx(React.Fragment, null, __jsx(CreateDiscussionModal, {\n      id: \"createDiscussionModal\",\n      onCreate: this.handleCreateGroup\n    }), __jsx(Button, {\n      color: \"red\",\n      content: \"Done\",\n      fluid: true,\n      style: {\n        fontSize: '1vw',\n        marginTop: '2%'\n      },\n      onClick: () => {\n        this.setState({\n          clicked: 'none'\n        });\n      }\n    }));\n  }\n\n  getDeleteButton(group) {\n    return __jsx(Button, {\n      id: `deletebutton${group.id}`,\n      compact: true,\n      icon: true,\n      size: \"mini\",\n      floated: \"right\",\n      style: {\n        display: `${this.state.clicked}`,\n        fontSize: '.6vw',\n        textAlign: 'center',\n        width: '10%',\n        marginBottom: '2%',\n        minWidth: '10px',\n        backgroundColor: 'transparent'\n      },\n      onClick: () => api.deleteGroup(this.classId, group.id).then(() => {\n        this.fetchAllGroups();\n        EventEmitter.publish('classGroupSetChanged', this.classId);\n      })\n    }, __jsx(Icon, {\n      name: \"delete\",\n      color: \"red\"\n    }));\n  }\n\n  showInviteButton(group) {\n    const plusIcon = __jsx(List.Icon, {\n      name: \"user plus\",\n      onClick: () => {\n        EventEmitter.publish('openInviteModal', true);\n      }\n    });\n\n    const noPlusIcon = __jsx(\"div\", null);\n\n    return this.state.currentGroup.id == group.id && this.state.vonageCred !== null ? plusIcon : noPlusIcon;\n  }\n\n  getListItemStyle(group) {\n    const unClickedGroupsStyle = {\n      fontSize: '.8vw',\n      textAlign: 'left',\n      width: '80%',\n      marginBottom: '2%',\n      minWidth: '41px',\n      display: 'inline-block'\n    };\n    const clickedGroupsStyle = {\n      fontSize: '.8vw',\n      textAlign: 'left',\n      width: '80%',\n      marginBottom: '2%',\n      minWidth: '41px',\n      background: '#e0e1e2',\n      borderRadius: 10,\n      borderWidth: 1,\n      borderColor: '#fff',\n      display: 'inline-block'\n    };\n    return this.state.currentGroup.id == group.id && this.state.vonageCred !== null ? clickedGroupsStyle : unClickedGroupsStyle;\n  }\n\n  showOffice() {\n    return __jsx(\"div\", {\n      style: {\n        paddingLeft: 20\n      }\n    }, __jsx(List, {\n      relaxed: true,\n      selection: true,\n      verticalAlign: \"middle\"\n    }, this.state.allGroups.filter(group => group.type === 'office').map(group => __jsx(List.Item, {\n      key: `${group.name}`,\n      onClick: () => {\n        if (this.state.currentClass.role === 'Student') {\n          EventEmitter.publish('openOfficeAccessModal', true);\n        } else if (this.state.currentGroup.id !== group.id) {\n          this.handleSelectGroup(group);\n        }\n      },\n      style: this.getListItemStyle(group)\n    }, __jsx(List.Icon, {\n      name: \"graduation cap\"\n    }), __jsx(List.Content, null, __jsx(List.Header, {\n      as: \"a\"\n    }, group.name + ' (' + group.users.length + ')')), this.showInviteButton(group)))));\n  }\n\n  leftDisplay() {\n    return this.state.withTa === false ? __jsx(\"div\", {\n      style: {\n        height: '100%',\n        marginLeft: '2.5%'\n      }\n    }, __jsx(Button.Group, {\n      size: \"huge\",\n      style: {\n        marginBottom: 12,\n        width: '100%'\n      },\n      fluid: true\n    }, __jsx(Button, {\n      compact: true,\n      icon: \"angle left\",\n      content: this.state.currentClass.name,\n      style: {\n        fontSize: '1.5vw',\n        textAlign: 'left',\n        width: '75%',\n        marginBottom: '2%',\n        minWidth: '41px'\n      },\n      onClick: this.handleBack\n    })), this.showOffice(), __jsx(Accordion, {\n      fluid: true,\n      exclusive: false,\n      defaultActiveIndex: [0, 1],\n      style: {\n        fontSize: '1vw',\n        textAlign: 'left',\n        width: '100%',\n        marginBottom: '2%',\n        minWidth: '41px'\n      },\n      panels: [{\n        key: 'discussions',\n        title: 'Discussions',\n        content: {\n          content: __jsx(\"div\", {\n            style: {\n              paddingLeft: 20,\n              height: 200,\n              overflow: 'auto'\n            }\n          }, __jsx(List, {\n            relaxed: true,\n            selection: true\n          }, this.state.allGroups.filter(group => group.type === 'discussion').map(group => __jsx(React.Fragment, null, __jsx(List.Item, {\n            key: `discussion_${group.id}`,\n            onClick: () => {\n              if (this.state.currentGroup.id !== group.id) {\n                this.handleSelectGroup(group);\n              }\n            },\n            style: this.getListItemStyle(group)\n          }, __jsx(List.Icon, {\n            name: \"sound\"\n          }), __jsx(List.Content, null, __jsx(List.Header, {\n            as: \"a\"\n          }, group.name + ' (' + group.users.length + ')')), this.showInviteButton(group)), this.getDeleteButton(group)))))\n        }\n      }, {\n        key: 'private-groups',\n        title: 'Private Groups',\n        content: {\n          content: __jsx(\"div\", {\n            style: {\n              paddingLeft: 20,\n              height: 200,\n              overflow: 'auto'\n            }\n          }, __jsx(List, {\n            relaxed: true,\n            selection: true\n          }, this.state.allGroups.filter(group => group.type === 'group').map(group => __jsx(List.Item, {\n            key: `private_group_${group.id}`,\n            onClick: () => {\n              if (this.state.currentGroup.id !== group.id) {\n                this.handleSelectGroup(group);\n              }\n            },\n            style: this.getListItemStyle(group)\n          }, __jsx(List.Icon, {\n            name: \"lock\"\n          }), __jsx(List.Content, null, __jsx(List.Header, {\n            as: \"a\"\n          }, group.name + ' (' + group.users.length + ')')), this.showInviteButton(group)))))\n        }\n      }]\n    }), __jsx(\"div\", {\n      style: {\n        position: 'absolute',\n        width: 'calc(100% - 38px)',\n        bottom: 14\n      }\n    }, this.getButtonToDisplay())) : __jsx(\"div\", {\n      style: {\n        height: '100%',\n        marginLeft: '2.5%'\n      }\n    }, __jsx(Button.Group, {\n      size: \"huge\",\n      style: {\n        marginBottom: 12,\n        width: '100%'\n      },\n      fluid: true\n    }, __jsx(Button, {\n      compact: true,\n      content: this.state.currentClass.name,\n      style: {\n        fontSize: '1.5vw',\n        textAlign: 'left',\n        width: '75%',\n        marginBottom: '2%',\n        minWidth: '41px'\n      }\n    })), __jsx(Label, {\n      size: \"massive\",\n      style: {\n        fontSize: '1vw',\n        textAlign: 'center',\n        width: '100%',\n        marginBottom: '4%',\n        minWidth: '41px'\n      }\n    }, \"You are currently in a TA's office. Please click the leave call button to join another group.\"));\n  }\n\n  render() {\n    if (!this.state.isMounted) {\n      return null;\n    }\n\n    if (this.state.toRejoin) {\n      const group = JSON.parse(localStorage.getItem('lastCallEntered'));\n      confirmAlert({\n        title: 'Rejoin Call',\n        message: 'It appears you did not leave your last call. Would you like to rejoin it?',\n        buttons: [{\n          label: 'Yes',\n          onClick: () => {\n            this.joinGroup(group);\n            this.setState({\n              toRejoin: false\n            }, () => {\n              EventEmitter.publish('TARejoinCall');\n            });\n          }\n        }, {\n          label: 'No',\n          onClick: () => {\n            localStorage.removeItem('lastCallEntered');\n            this.setState({\n              toRejoin: false\n            });\n          }\n        }]\n      });\n    }\n\n    return __jsx(Layout, {\n      left: this.leftDisplay(),\n      right: __jsx(Queue, {\n        onJoin: this.handleSelectGroup\n      })\n    }, this.state.vonageCred && __jsx(ScreenContainer, {\n      style: {\n        width: '100%',\n        maxHeight: '75vh'\n      },\n      sessionId: this.state.vonageCred.sessionId,\n      token: this.state.vonageCred.token,\n      onLeave: this.leaveGroup,\n      name: this.user.firstName + ' ' + this.user.lastName\n    }), __jsx(OfficeAccessModal, null), __jsx(AccessDeniedModal, null), __jsx(UserInviteModal, null), __jsx(FeedbackModal, null), __jsx(ReceiveInviteModal, {\n      onJoin: this.handleSelectGroup\n    }), __jsx(GroupJoinRequestModal, null), __jsx(WaitingForRequestApprovalModal, null), __jsx(NotificationContainer, null), __jsx(WaitingForNewLeaderModal, {\n      user: this.user.id\n    }));\n  }\n\n}\n\nexport default AuthRequired(withRouter(ClassPage));","map":{"version":3,"sources":["C:/Users/ryanj/Documents/mercury/pages/classes/[classId].js"],"names":["React","Component","withRouter","dynamic","Layout","Button","Accordion","List","Icon","Label","AuthRequired","Queue","api","CreateGroupModal","UserInviteModal","EventEmitter","FeedbackModal","StudentWebSocketClient","TAWebSocketClient","ReceiveInviteModal","NotificationContainer","NotificationManager","GroupJoinRequestModal","WaitingForRequestApprovalModal","WaitingForNewLeaderModal","AccessDeniedModal","OfficeAccessModal","confirmAlert","ScreenContainer","ssr","CreateDiscussionModal","ClassPage","constructor","props","getGroups","state","currentClass","id","then","groups","setState","allGroups","deleteGroupUser","currentGroup","user","catch","console","error","fetchAllGroups","publish","classId","vonageCred","name","withTa","localStorage","removeItem","router","push","group","role","type","joinGroup","currGroup","getGroupByID","UserId","userId","filter","check","length","groupData","postGroup","handleSelectGroup","clicked","users","isMounted","toRejoin","defineEventEmitterCallbacks","postGroupToken","token","leaveGroupForTAOffice","leaveGroup","sessionId","groupId","groupType","setItem","JSON","stringify","postJoinGroup","email","subscribe","info","msg","classUser","handleCreateTAOffice","firstName","lastName","componentDidMount","query","Number","getMe","meData","getClass","c","userRole","find","u","start","me","courseId","onJoin","getItem","setInterval","getButtonToDisplay","handleCreateGroup","fontSize","marginTop","getDeleteButton","display","textAlign","width","marginBottom","minWidth","backgroundColor","deleteGroup","showInviteButton","plusIcon","noPlusIcon","getListItemStyle","unClickedGroupsStyle","clickedGroupsStyle","background","borderRadius","borderWidth","borderColor","showOffice","paddingLeft","map","leftDisplay","height","marginLeft","handleBack","key","title","content","overflow","position","bottom","render","parse","message","buttons","label","onClick","maxHeight"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\r\nimport { withRouter } from 'next/router'\r\nimport dynamic from 'next/dynamic'\r\nimport Layout from '../../components/layout'\r\nimport { Button, Accordion, List, Icon, Label } from 'semantic-ui-react'\r\nimport { AuthRequired } from '../../components/authProvider'\r\nimport Queue from '../../components/queue/queue'\r\nimport * as api from '../../util/mercuryService'\r\nimport CreateGroupModal from '../../components/createGroupModal'\r\nimport UserInviteModal from '../../components/invite/userInviteModal'\r\nimport { EventEmitter } from '../../components/util/EventEmitter'\r\nimport FeedbackModal from '../../components/feedbackModal'\r\nimport StudentWebSocketClient from '../../util/studentWebSocket'\r\nimport TAWebSocketClient from '../../util/taWebSocket'\r\nimport ReceiveInviteModal from '../../components/invite/receiveInviteModal'\r\nimport { NotificationContainer, NotificationManager } from 'react-notifications'\r\nimport GroupJoinRequestModal from '../../components/invite/groupJoinRequestModal'\r\nimport WaitingForRequestApprovalModal from '../../components/invite/WaitingForRequestApprovalModal'\r\nimport WaitingForNewLeaderModal from '../../components/WaitingForNewLeaderModal'\r\nimport AccessDeniedModal from '../../components/accessDeniedModal'\r\nimport OfficeAccessModal from '../../components/officeAccessModal'\r\nimport { confirmAlert } from 'react-confirm-alert' // Import\r\n\r\nconst ScreenContainer = dynamic(\r\n  () => import('../../components/screenContainer'),\r\n  {\r\n    ssr: false,\r\n  }\r\n)\r\n\r\nconst CreateDiscussionModal = dynamic(\r\n  () => import('../../components/createDiscussionModal'),\r\n  {\r\n    ssr: false,\r\n  }\r\n)\r\n\r\nclass ClassPage extends Component {\r\n  constructor(props) {\r\n    super(props)\r\n    this.state = {\r\n      withTa: false,\r\n      clicked: 'none',\r\n      currentGroup: { id: '', name: '' },\r\n      currentClass: {\r\n        id: '',\r\n        name: '',\r\n        //groups: [],\r\n        users: [],\r\n        role: 'Student',\r\n      },\r\n      vonageCred: null,\r\n      isMounted: false,\r\n      allGroups: [],\r\n      toRejoin: false, // activate rejoin option confirm alert\r\n    }\r\n\r\n    this.defineEventEmitterCallbacks()\r\n  }\r\n\r\n  fetchAllGroups = () => {\r\n    api\r\n      .getGroups(this.state.currentClass.id)\r\n      .then((groups) => this.setState({ allGroups: groups }))\r\n  }\r\n\r\n  joinGroup(group) {\r\n    api\r\n      .postGroupToken(this.classId, group.id)\r\n      .then(({ token }) => {\r\n        if (this.state.currentGroup.id !== '') {\r\n          //the user is currently in a call, leave the call first\r\n\r\n          if (group.type === 'office') {\r\n            // this case only happens when the user is leaving a private group for the TA office\r\n            // do not trigger the callOver event in this case\r\n            this.leaveGroupForTAOffice()\r\n          } else {\r\n            this.leaveGroup()\r\n          }\r\n        }\r\n\r\n        this.setState(\r\n          {\r\n            vonageCred: { sessionId: group.sessionId, token },\r\n            currentGroup: group,\r\n          },\r\n          () => {\r\n            EventEmitter.publish('userJoinGroup', {\r\n              groupId: group.id,\r\n              userId: this.user.id,\r\n              groupType: group.type,\r\n            })\r\n            EventEmitter.publish('currentGroupChange', group)\r\n\r\n            // log the credentials of your most recent call\r\n            localStorage.setItem('lastCallEntered', JSON.stringify(group))\r\n          }\r\n        )\r\n      })\r\n      .then(() => {\r\n        api\r\n          .postJoinGroup(this.classId, group.id, this.user.email)\r\n          .then(() =>\r\n            EventEmitter.publish('classGroupSetChanged', this.classId)\r\n          )\r\n      })\r\n      .then(() => {\r\n        this.fetchAllGroups()\r\n      })\r\n      .catch(console.error)\r\n  }\r\n\r\n  leaveGroupForTAOffice = () => {\r\n    api\r\n      .deleteGroupUser(\r\n        this.state.currentClass.id,\r\n        this.state.currentGroup.id,\r\n        this.user.id\r\n      )\r\n      .catch(console.error)\r\n\r\n    this.fetchAllGroups()\r\n    EventEmitter.publish('classGroupSetChanged', this.classId)\r\n    EventEmitter.publish('userLeaveGroup', this.state.currentGroup)\r\n    this.setState({\r\n      vonageCred: null,\r\n      currentGroup: { id: '', name: '' },\r\n      withTa: true,\r\n    })\r\n    EventEmitter.publish('currentGroupChange', { id: '', name: '' })\r\n    localStorage.removeItem('lastCallEntered')\r\n  }\r\n\r\n  leaveGroup = () => {\r\n    api\r\n      .deleteGroupUser(\r\n        this.state.currentClass.id,\r\n        this.state.currentGroup.id,\r\n        this.user.id\r\n      )\r\n      .catch(console.error)\r\n\r\n    this.fetchAllGroups() // re-fetch current groups\r\n    EventEmitter.publish('classGroupSetChanged', this.classId) // tell everyone to re-fetch their groups in the class\r\n    EventEmitter.publish('userLeaveGroup', this.state.currentGroup) // notify backend that you have left the call\r\n\r\n    this.setState({\r\n      // leave the call\r\n      vonageCred: null,\r\n      currentGroup: { id: '', name: '' },\r\n      withTa: false,\r\n    })\r\n\r\n    EventEmitter.publish('currentGroupChange', { id: '', name: '' }) // change current group\r\n    EventEmitter.publish('callOver', this.classId) // signal call over, which triggers feedback modal and curr student update on the queue\r\n    localStorage.removeItem('lastCallEntered')\r\n  }\r\n\r\n  defineEventEmitterCallbacks() {\r\n    EventEmitter.subscribe('clearLeftSide', () => {\r\n      this.setState({ withTa: true })\r\n    })\r\n\r\n    EventEmitter.subscribe('joinPrivateGroupOnApproval', (group) => {\r\n      EventEmitter.publish('removeWaitingForRequestApprovalModal')\r\n      this.joinGroup(group)\r\n    })\r\n\r\n    EventEmitter.subscribe('notifyJoinRequestDeclined', (group) => {\r\n      NotificationManager.info(\r\n        `Your Request To Join ${group.name} Was Declined`\r\n      )\r\n      EventEmitter.publish('removeWaitingForRequestApprovalModal')\r\n    })\r\n\r\n    EventEmitter.subscribe('fetchGroups', () => {\r\n      this.fetchAllGroups()\r\n    })\r\n\r\n    EventEmitter.subscribe('createNotification', (msg) => {\r\n      NotificationManager.info(msg)\r\n    })\r\n\r\n    EventEmitter.subscribe('createTAOffice', (classUser) => {\r\n      this.fetchAllGroups()\r\n      this.handleCreateTAOffice({\r\n        classId: classUser.classId,\r\n        name: this.user.firstName + ' ' + this.user.lastName + \"'s Office\",\r\n        type: 'office',\r\n        userId: classUser.userId,\r\n      })\r\n    })\r\n\r\n    EventEmitter.subscribe('leaveCallOnError', () => {\r\n      this.leaveGroup()\r\n    })\r\n  }\r\n\r\n  componentDidMount() {\r\n    const { classId } = this.props.router.query\r\n    if (!classId) return\r\n    this.classId = Number(classId)\r\n\r\n    api\r\n      .getMe()\r\n      .then((meData) => {\r\n        this.user = meData\r\n      })\r\n\r\n      .then(() => api.getClass(this.classId))\r\n      .then((c) => {\r\n        const userRole = c.users.find((u) => u.id === this.user.id)\r\n        if (!userRole) this.props.router.push('/calendar')\r\n        const { role } = userRole\r\n\r\n        let toRejoin = false\r\n        /**\r\n         * Start the appropriate web socket handler depending on the user role\r\n         */\r\n\r\n        if (role === 'Student') {\r\n          /**\r\n           * Start student web socket handler\r\n           */\r\n\r\n          new StudentWebSocketClient().start({\r\n            me: this.user,\r\n            courseId: this.classId,\r\n          })\r\n        } else {\r\n          /**\r\n           * Start TA web socket handler\r\n           */\r\n\r\n          new TAWebSocketClient().start({\r\n            me: this.user,\r\n            courseId: this.classId,\r\n            onJoin: this.handleSelectGroup,\r\n          })\r\n\r\n          if (localStorage.getItem('lastCallEntered')) {\r\n            // if you were previously involved in a call, please allow rejoin option\r\n            toRejoin = true\r\n          }\r\n        }\r\n\r\n        this.setState({\r\n          currentClass: {\r\n            ...c,\r\n            role: userRole.role,\r\n          },\r\n          toRejoin,\r\n        })\r\n\r\n        EventEmitter.publish(\r\n          'allOtherUsersInClass',\r\n          this.state.currentClass.users.filter(\r\n            (user) => user.id !== this.user.id && user.role === role\r\n          )\r\n        )\r\n        EventEmitter.publish('me', this.user)\r\n      })\r\n      .then(() => {\r\n        this.fetchAllGroups()\r\n      })\r\n      .then(() => {\r\n        setInterval(this.fetchAllGroups, 10000)\r\n      })\r\n      .then(() => {\r\n        this.setState({ isMounted: true })\r\n      })\r\n      .catch(console.error)\r\n  }\r\n\r\n  handleBack = async () => {\r\n    await this.props.router.push('/calendar')\r\n  }\r\n\r\n  handleSelectGroup = async (group) => {\r\n    const { role } = this.state.currentClass\r\n\r\n    if (\r\n      group.type === 'office' ||\r\n      role === 'Professor' ||\r\n      group.type === 'discussion'\r\n    ) {\r\n      // you are popped off the waiting queue or you are a TA\r\n      this.joinGroup(group)\r\n      return\r\n    }\r\n\r\n    /**\r\n     * First, check if you are the leader of the group\r\n     */\r\n\r\n    const currGroup = await api.getGroupByID(this.classId, group.id)\r\n    const { UserId } = currGroup\r\n    const { id } = this.user\r\n\r\n    if (UserId === id) {\r\n      // you are the leader of the group, no need for authentication\r\n      this.joinGroup(group)\r\n    } else {\r\n      /**\r\n       * Ping group leader to let you into the group\r\n       */\r\n      EventEmitter.publish('activateWaitingForRequestApprovalModal', group)\r\n      EventEmitter.publish('requestJoinGroup', {\r\n        userId: id,\r\n        group: group,\r\n      })\r\n    }\r\n  }\r\n\r\n  getButtonToDisplay() {\r\n    return this.state.currentClass.role === 'Student' ? (\r\n      <CreateGroupModal onCreate={this.handleCreateGroup} />\r\n    ) : this.state.clicked === 'none' ? (\r\n      <Button\r\n        color=\"teal\"\r\n        content=\"Modify Discussions\"\r\n        fluid\r\n        style={{ fontSize: '1vw' }}\r\n        onClick={() => {\r\n          this.setState({ clicked: 'inline' })\r\n        }}\r\n      />\r\n    ) : (\r\n      <>\r\n        <CreateDiscussionModal\r\n          id=\"createDiscussionModal\"\r\n          onCreate={this.handleCreateGroup}\r\n        />\r\n        <Button\r\n          color=\"red\"\r\n          content=\"Done\"\r\n          fluid\r\n          style={{ fontSize: '1vw', marginTop: '2%' }}\r\n          onClick={() => {\r\n            this.setState({ clicked: 'none' })\r\n          }}\r\n        />\r\n      </>\r\n    )\r\n  }\r\n\r\n  getDeleteButton(group) {\r\n    return (\r\n      <Button\r\n        id={`deletebutton${group.id}`}\r\n        compact\r\n        icon\r\n        size=\"mini\"\r\n        floated=\"right\"\r\n        style={{\r\n          display: `${this.state.clicked}`,\r\n          fontSize: '.6vw',\r\n          textAlign: 'center',\r\n          width: '10%',\r\n          marginBottom: '2%',\r\n          minWidth: '10px',\r\n          backgroundColor: 'transparent',\r\n        }}\r\n        onClick={() =>\r\n          api.deleteGroup(this.classId, group.id).then(() => {\r\n            this.fetchAllGroups()\r\n            EventEmitter.publish('classGroupSetChanged', this.classId)\r\n          })\r\n        }\r\n      >\r\n        <Icon name=\"delete\" color=\"red\" />\r\n      </Button>\r\n    )\r\n  }\r\n\r\n  handleCreateTAOffice = async (group) => {\r\n    if (\r\n      this.state.allGroups.filter((check) => check.name === group.name)\r\n        .length === 0\r\n    ) {\r\n      const groupData = await api.postGroup(\r\n        group.classId,\r\n        group.name,\r\n        group.type,\r\n        group.userId\r\n      )\r\n      EventEmitter.publish('classGroupSetChanged', this.classId)\r\n      this.fetchAllGroups()\r\n    } else {\r\n    }\r\n  }\r\n\r\n  handleCreateGroup = async (group) => {\r\n    const groupData = await api.postGroup(\r\n      this.classId,\r\n      group.name,\r\n      group.type,\r\n      this.user.id\r\n    )\r\n    EventEmitter.publish('classGroupSetChanged', this.classId)\r\n    await this.handleSelectGroup(groupData)\r\n    this.fetchAllGroups()\r\n  }\r\n\r\n  showInviteButton(group) {\r\n    const plusIcon = (\r\n      <List.Icon\r\n        name=\"user plus\"\r\n        onClick={() => {\r\n          EventEmitter.publish('openInviteModal', true)\r\n        }}\r\n      />\r\n    )\r\n    const noPlusIcon = <div></div>\r\n\r\n    return this.state.currentGroup.id == group.id &&\r\n      this.state.vonageCred !== null\r\n      ? plusIcon\r\n      : noPlusIcon\r\n  }\r\n\r\n  getListItemStyle(group) {\r\n    const unClickedGroupsStyle = {\r\n      fontSize: '.8vw',\r\n      textAlign: 'left',\r\n      width: '80%',\r\n      marginBottom: '2%',\r\n      minWidth: '41px',\r\n      display: 'inline-block',\r\n    }\r\n\r\n    const clickedGroupsStyle = {\r\n      fontSize: '.8vw',\r\n      textAlign: 'left',\r\n      width: '80%',\r\n      marginBottom: '2%',\r\n      minWidth: '41px',\r\n      background: '#e0e1e2',\r\n      borderRadius: 10,\r\n      borderWidth: 1,\r\n      borderColor: '#fff',\r\n      display: 'inline-block',\r\n    }\r\n\r\n    return this.state.currentGroup.id == group.id &&\r\n      this.state.vonageCred !== null\r\n      ? clickedGroupsStyle\r\n      : unClickedGroupsStyle\r\n  }\r\n\r\n  showOffice() {\r\n    return (\r\n      <div style={{ paddingLeft: 20 }}>\r\n        <List relaxed selection verticalAlign=\"middle\">\r\n          {this.state.allGroups\r\n            .filter((group) => group.type === 'office')\r\n            .map((group) => (\r\n              <List.Item\r\n                key={`${group.name}`}\r\n                onClick={() => {\r\n                  if (this.state.currentClass.role === 'Student') {\r\n                    EventEmitter.publish('openOfficeAccessModal', true)\r\n                  } else if (this.state.currentGroup.id !== group.id) {\r\n                    this.handleSelectGroup(group)\r\n                  }\r\n                }}\r\n                style={this.getListItemStyle(group)}\r\n              >\r\n                <List.Icon name=\"graduation cap\" />\r\n                <List.Content>\r\n                  <List.Header as=\"a\">\r\n                    {group.name + ' (' + group.users.length + ')'}\r\n                  </List.Header>\r\n                </List.Content>\r\n                {this.showInviteButton(group)}\r\n              </List.Item>\r\n            ))}\r\n        </List>\r\n      </div>\r\n    )\r\n  }\r\n\r\n  leftDisplay() {\r\n    return this.state.withTa === false ? (\r\n      <div style={{ height: '100%', marginLeft: '2.5%' }}>\r\n        <Button.Group\r\n          size=\"huge\"\r\n          style={{ marginBottom: 12, width: '100%' }}\r\n          fluid\r\n        >\r\n          <Button\r\n            compact\r\n            icon=\"angle left\"\r\n            content={this.state.currentClass.name}\r\n            style={{\r\n              fontSize: '1.5vw',\r\n              textAlign: 'left',\r\n              width: '75%',\r\n              marginBottom: '2%',\r\n              minWidth: '41px',\r\n            }}\r\n            onClick={this.handleBack}\r\n          />\r\n        </Button.Group>\r\n        {this.showOffice()}\r\n        <Accordion\r\n          fluid\r\n          exclusive={false}\r\n          defaultActiveIndex={[0, 1]}\r\n          style={{\r\n            fontSize: '1vw',\r\n            textAlign: 'left',\r\n            width: '100%',\r\n            marginBottom: '2%',\r\n            minWidth: '41px',\r\n          }}\r\n          panels={[\r\n            {\r\n              key: 'discussions',\r\n              title: 'Discussions',\r\n              content: {\r\n                content: (\r\n                  <div\r\n                    style={{ paddingLeft: 20, height: 200, overflow: 'auto' }}\r\n                  >\r\n                    <List relaxed selection>\r\n                      {this.state.allGroups\r\n                        .filter((group) => group.type === 'discussion')\r\n                        .map((group) => (\r\n                          <>\r\n                            <List.Item\r\n                              key={`discussion_${group.id}`}\r\n                              onClick={() => {\r\n                                if (this.state.currentGroup.id !== group.id) {\r\n                                  this.handleSelectGroup(group)\r\n                                }\r\n                              }}\r\n                              style={this.getListItemStyle(group)}\r\n                            >\r\n                              <List.Icon name=\"sound\" />\r\n                              <List.Content>\r\n                                <List.Header as=\"a\">\r\n                                  {group.name + ' (' + group.users.length + ')'}\r\n                                </List.Header>\r\n                              </List.Content>\r\n                              {this.showInviteButton(group)}\r\n                            </List.Item>\r\n                            {this.getDeleteButton(group)}\r\n                          </>\r\n                        ))}\r\n                    </List>\r\n                  </div>\r\n                ),\r\n              },\r\n            },\r\n            {\r\n              key: 'private-groups',\r\n              title: 'Private Groups',\r\n              content: {\r\n                content: (\r\n                  <div\r\n                    style={{ paddingLeft: 20, height: 200, overflow: 'auto' }}\r\n                  >\r\n                    <List relaxed selection>\r\n                      {this.state.allGroups\r\n                        .filter((group) => group.type === 'group')\r\n                        .map((group) => (\r\n                          <List.Item\r\n                            key={`private_group_${group.id}`}\r\n                            onClick={() => {\r\n                              if (this.state.currentGroup.id !== group.id) {\r\n                                this.handleSelectGroup(group)\r\n                              }\r\n                            }}\r\n                            style={this.getListItemStyle(group)}\r\n                          >\r\n                            <List.Icon name=\"lock\" />\r\n                            <List.Content>\r\n                              <List.Header as=\"a\">\r\n                                {group.name + ' (' + group.users.length + ')'}\r\n                              </List.Header>\r\n                            </List.Content>\r\n                            {this.showInviteButton(group)}\r\n                          </List.Item>\r\n                        ))}\r\n                    </List>\r\n                  </div>\r\n                ),\r\n              },\r\n            },\r\n          ]}\r\n        />\r\n        <div\r\n          style={{\r\n            position: 'absolute',\r\n            width: 'calc(100% - 38px)',\r\n            bottom: 14,\r\n          }}\r\n        >\r\n          {this.getButtonToDisplay()}\r\n        </div>\r\n      </div>\r\n    ) : (\r\n      <div style={{ height: '100%', marginLeft: '2.5%' }}>\r\n        <Button.Group\r\n          size=\"huge\"\r\n          style={{ marginBottom: 12, width: '100%' }}\r\n          fluid\r\n        >\r\n          <Button\r\n            compact\r\n            content={this.state.currentClass.name}\r\n            style={{\r\n              fontSize: '1.5vw',\r\n              textAlign: 'left',\r\n              width: '75%',\r\n              marginBottom: '2%',\r\n              minWidth: '41px',\r\n            }}\r\n          />\r\n        </Button.Group>\r\n        <Label\r\n          size=\"massive\"\r\n          style={{\r\n            fontSize: '1vw',\r\n            textAlign: 'center',\r\n            width: '100%',\r\n            marginBottom: '4%',\r\n            minWidth: '41px',\r\n          }}\r\n        >\r\n          You are currently in a TA's office. Please click the leave call button\r\n          to join another group.\r\n        </Label>\r\n      </div>\r\n    )\r\n  }\r\n\r\n  render() {\r\n    if (!this.state.isMounted) {\r\n      return null\r\n    }\r\n\r\n    if (this.state.toRejoin) {\r\n      const group = JSON.parse(localStorage.getItem('lastCallEntered'))\r\n\r\n      confirmAlert({\r\n        title: 'Rejoin Call',\r\n        message:\r\n          'It appears you did not leave your last call. Would you like to rejoin it?',\r\n        buttons: [\r\n          {\r\n            label: 'Yes',\r\n            onClick: () => {\r\n              this.joinGroup(group)\r\n              this.setState(\r\n                {\r\n                  toRejoin: false,\r\n                },\r\n                () => {\r\n                  EventEmitter.publish('TARejoinCall')\r\n                }\r\n              )\r\n            },\r\n          },\r\n          {\r\n            label: 'No',\r\n            onClick: () => {\r\n              localStorage.removeItem('lastCallEntered')\r\n              this.setState({\r\n                toRejoin: false,\r\n              })\r\n            },\r\n          },\r\n        ],\r\n      })\r\n    }\r\n\r\n    return (\r\n      <Layout\r\n        left={this.leftDisplay()}\r\n        right={<Queue onJoin={this.handleSelectGroup} />}\r\n      >\r\n        {this.state.vonageCred && (\r\n          <ScreenContainer\r\n            style={{ width: '100%', maxHeight: '75vh' }}\r\n            sessionId={this.state.vonageCred.sessionId}\r\n            token={this.state.vonageCred.token}\r\n            onLeave={this.leaveGroup}\r\n            name={this.user.firstName + ' ' + this.user.lastName}\r\n          />\r\n        )}\r\n        <OfficeAccessModal />\r\n        <AccessDeniedModal />\r\n        <UserInviteModal />\r\n        <FeedbackModal />\r\n        <ReceiveInviteModal onJoin={this.handleSelectGroup} />\r\n        <GroupJoinRequestModal />\r\n        <WaitingForRequestApprovalModal />\r\n        <NotificationContainer />\r\n        <WaitingForNewLeaderModal user={this.user.id} />\r\n      </Layout>\r\n    )\r\n  }\r\n}\r\nexport default AuthRequired(withRouter(ClassPage))\r\n"]},"metadata":{},"sourceType":"module"}