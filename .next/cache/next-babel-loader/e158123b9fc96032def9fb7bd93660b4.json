{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nvar __jsx = React.createElement;\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component } from 'react';\nimport { OTPublisher } from 'opentok-react';\nimport { Button } from 'semantic-ui-react';\nimport { EventEmitter } from './util/EventEmitter';\n\nvar ScreenPublisher = /*#__PURE__*/function (_Component) {\n  _inherits(ScreenPublisher, _Component);\n\n  var _super = _createSuper(ScreenPublisher);\n\n  function ScreenPublisher(props) {\n    var _this;\n\n    _classCallCheck(this, ScreenPublisher);\n\n    _this = _super.call(this, props);\n\n    _defineProperty(_assertThisInitialized(_this), \"onError\", function (err) {\n      _this.setState({\n        error: \"Failed to publish: \".concat(err.message)\n      });\n    });\n\n    _this.state = {\n      error: null,\n      audio: true,\n      video: true,\n      videoSource: 'screen',\n      appear: false\n    };\n\n    _this.defineEventEmitterCallbacks();\n\n    return _this;\n  }\n\n  _createClass(ScreenPublisher, [{\n    key: \"defineEventEmitterCallbacks\",\n    value: function defineEventEmitterCallbacks() {\n      var _this2 = this;\n\n      EventEmitter.subscribe('startScreenShare', function () {\n        _this2.setState({\n          appear: true\n        });\n      });\n      EventEmitter.subscribe('stopScreenShare', function () {\n        _this2.setState({\n          appear: false\n        });\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this3 = this;\n\n      return this.state.appear === false ? null : __jsx(React.Fragment, null, this.state.error ? __jsx(\"div\", null, \"We noticed you denied access to your screen. Please click the screen blocked icon in your browser's address bar, allow access, and then refresh the page.\") : null, __jsx(OTPublisher, {\n        properties: {\n          width: '13.62vw',\n          maxWidth: '13.62vw',\n          height: '20vh',\n          publishAudio: this.state.audio,\n          publishVideo: this.state.video,\n          videoSource: 'screen',\n          name: this.props.name,\n          style: {\n            buttonDisplayMode: 'on',\n            nameDisplayMode: 'on'\n          }\n        },\n        onPublish: function onPublish() {\n          EventEmitter.publish('screenShareOn', {\n            name: _this3.props.name,\n            sessionId: _this3.props.session.sessionId\n          });\n        },\n        session: this.props.session,\n        onError: this.onError\n      }));\n    }\n  }]);\n\n  return ScreenPublisher;\n}(Component);\n\nexport { ScreenPublisher as default };","map":{"version":3,"sources":["C:/Users/ryanj/Documents/mercury/components/screenPublisher.js"],"names":["React","Component","OTPublisher","Button","EventEmitter","ScreenPublisher","props","err","setState","error","message","state","audio","video","videoSource","appear","defineEventEmitterCallbacks","subscribe","width","maxWidth","height","publishAudio","publishVideo","name","style","buttonDisplayMode","nameDisplayMode","publish","sessionId","session","onError"],"mappings":";;;;;;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,WAAT,QAA4B,eAA5B;AACA,SAASC,MAAT,QAAuB,mBAAvB;AACA,SAASC,YAAT,QAA6B,qBAA7B;;IAEqBC,e;;;;;AACnB,2BAAYC,KAAZ,EAAmB;AAAA;;AAAA;;AACjB,8BAAMA,KAAN;;AADiB,8DAsBT,UAACC,GAAD,EAAS;AACjB,YAAKC,QAAL,CAAc;AAAEC,QAAAA,KAAK,+BAAwBF,GAAG,CAACG,OAA5B;AAAP,OAAd;AACD,KAxBkB;;AAGjB,UAAKC,KAAL,GAAa;AACXF,MAAAA,KAAK,EAAE,IADI;AAEXG,MAAAA,KAAK,EAAE,IAFI;AAGXC,MAAAA,KAAK,EAAE,IAHI;AAIXC,MAAAA,WAAW,EAAE,QAJF;AAKXC,MAAAA,MAAM,EAAE;AALG,KAAb;;AAOA,UAAKC,2BAAL;;AAViB;AAWlB;;;;kDAE6B;AAAA;;AAC5BZ,MAAAA,YAAY,CAACa,SAAb,CAAuB,kBAAvB,EAA2C,YAAM;AAC/C,QAAA,MAAI,CAACT,QAAL,CAAc;AAAEO,UAAAA,MAAM,EAAE;AAAV,SAAd;AACD,OAFD;AAGAX,MAAAA,YAAY,CAACa,SAAb,CAAuB,iBAAvB,EAA0C,YAAM;AAC9C,QAAA,MAAI,CAACT,QAAL,CAAc;AAAEO,UAAAA,MAAM,EAAE;AAAV,SAAd;AACD,OAFD;AAGD;;;6BAMQ;AAAA;;AACP,aAAO,KAAKJ,KAAL,CAAWI,MAAX,KAAsB,KAAtB,GAA8B,IAA9B,GACL,4BACG,KAAKJ,KAAL,CAAWF,KAAX,GAAmB,mBAAM,2JAAN,CAAnB,GAA8L,IADjM,EAEE,MAAC,WAAD;AACE,QAAA,UAAU,EAAE;AACVS,UAAAA,KAAK,EAAE,SADG;AAEVC,UAAAA,QAAQ,EAAE,SAFA;AAGVC,UAAAA,MAAM,EAAE,MAHE;AAIVC,UAAAA,YAAY,EAAE,KAAKV,KAAL,CAAWC,KAJf;AAKVU,UAAAA,YAAY,EAAE,KAAKX,KAAL,CAAWE,KALf;AAMVC,UAAAA,WAAW,EAAE,QANH;AAOVS,UAAAA,IAAI,EAAE,KAAKjB,KAAL,CAAWiB,IAPP;AAQVC,UAAAA,KAAK,EAAE;AACLC,YAAAA,iBAAiB,EAAE,IADd;AAELC,YAAAA,eAAe,EAAE;AAFZ;AARG,SADd;AAcE,QAAA,SAAS,EAAE,qBAAM;AACftB,UAAAA,YAAY,CAACuB,OAAb,CAAqB,eAArB,EAAsC;AACpCJ,YAAAA,IAAI,EAAE,MAAI,CAACjB,KAAL,CAAWiB,IADmB;AAEpCK,YAAAA,SAAS,EAAE,MAAI,CAACtB,KAAL,CAAWuB,OAAX,CAAmBD;AAFM,WAAtC;AAID,SAnBH;AAoBE,QAAA,OAAO,EAAE,KAAKtB,KAAL,CAAWuB,OApBtB;AAqBE,QAAA,OAAO,EAAE,KAAKC;AArBhB,QAFF,CADF;AA4BD;;;;EAxD0C7B,S;;SAAxBI,e","sourcesContent":["import React, { Component } from 'react'\nimport { OTPublisher } from 'opentok-react'\nimport { Button } from 'semantic-ui-react'\nimport { EventEmitter } from './util/EventEmitter'\n\nexport default class ScreenPublisher extends Component {\n  constructor(props) {\n    super(props)\n\n    this.state = {\n      error: null,\n      audio: true,\n      video: true,\n      videoSource: 'screen',\n      appear: false,\n    }\n    this.defineEventEmitterCallbacks()\n  }\n\n  defineEventEmitterCallbacks() {\n    EventEmitter.subscribe('startScreenShare', () => {\n      this.setState({ appear: true })\n    })\n    EventEmitter.subscribe('stopScreenShare', () => {\n      this.setState({ appear: false })\n    })\n  }\n\n  onError = (err) => {\n    this.setState({ error: `Failed to publish: ${err.message}` })\n  }\n\n  render() {\n    return this.state.appear === false ? null : (\n      <>\n        {this.state.error ? <div>{\"We noticed you denied access to your screen. Please click the screen blocked icon in your browser's address bar, allow access, and then refresh the page.\"}</div> : null}\n        <OTPublisher\n          properties={{\n            width: '13.62vw',\n            maxWidth: '13.62vw',\n            height: '20vh',\n            publishAudio: this.state.audio,\n            publishVideo: this.state.video,\n            videoSource: 'screen',\n            name: this.props.name,\n            style: {\n              buttonDisplayMode: 'on',\n              nameDisplayMode: 'on',\n            },\n          }}\n          onPublish={() => {\n            EventEmitter.publish('screenShareOn', {\n              name: this.props.name,\n              sessionId: this.props.session.sessionId,\n            })\n          }}\n          session={this.props.session}\n          onError={this.onError}\n        />\n      </>\n    )\n  }\n}\n"]},"metadata":{},"sourceType":"module"}