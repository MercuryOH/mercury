{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { createContext, useContext, useEffect, useState } from 'react';\nimport { useRouter } from 'next/router';\nimport Cookies from 'js-cookie';\nimport * as api from '../util/mercuryService';\nconst MERCURY_TOKEN = 'mercury-token';\nconst AuthContext = createContext({});\nexport function AuthProvider({\n  children\n}) {\n  const router = useRouter();\n  const {\n    0: user,\n    1: setUser\n  } = useState(null);\n  const {\n    0: loading,\n    1: setLoading\n  } = useState(true);\n  useEffect(() => {\n    async function loadUserFromCookies() {\n      const token = Cookies.get(MERCURY_TOKEN);\n\n      if (token) {\n        api.setToken(`Bearer ${token}`);\n        const currentUser = await api.getMe();\n        if (currentUser) setUser(currentUser);\n      }\n\n      setLoading(false);\n    }\n\n    loadUserFromCookies();\n  }, []);\n\n  const login = async (email, password) => {\n    const loginResponse = await api.postLogin(email, password);\n    if (!loginResponse || !loginResponse.token) return null;\n    Cookies.set(MERCURY_TOKEN, loginResponse.token, {\n      expires: 60\n    });\n    api.setToken(`Bearer ${loginResponse.token}`);\n    const currentUser = await api.getMe();\n    if (currentUser) setUser(currentUser);\n    return currentUser;\n  };\n\n  const logout = async () => {\n    Cookies.remove(MERCURY_TOKEN);\n    setUser(null);\n    router.push('/login');\n  };\n\n  return __jsx(AuthContext.Provider, {\n    value: {\n      user,\n      loading,\n      login,\n      logout,\n      isAuthenticated: !!user\n    }\n  }, children);\n}\nexport function AuthRequired(Component) {\n  return () => {\n    const router = useRouter();\n    const {\n      isAuthenticated,\n      loading\n    } = useAuth();\n    useEffect(() => {\n      if (!isAuthenticated && !loading) router.push('/login');\n    }, [loading, isAuthenticated]);\n    return __jsx(Component, arguments);\n  };\n}\nexport function useAuth() {\n  return useContext(AuthContext);\n}","map":{"version":3,"sources":["C:/Users/ryanj/Documents/mercury/components/authProvider.js"],"names":["React","createContext","useContext","useEffect","useState","useRouter","Cookies","api","MERCURY_TOKEN","AuthContext","AuthProvider","children","router","user","setUser","loading","setLoading","loadUserFromCookies","token","get","setToken","currentUser","getMe","login","email","password","loginResponse","postLogin","set","expires","logout","remove","push","isAuthenticated","AuthRequired","Component","useAuth","arguments"],"mappings":"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","sourcesContent":["import React, { createContext, useContext, useEffect, useState } from 'react'\r\nimport { useRouter } from 'next/router'\r\nimport Cookies from 'js-cookie'\r\nimport * as api from '../util/mercuryService'\r\n\r\nconst MERCURY_TOKEN = 'mercury-token'\r\n\r\nconst AuthContext = createContext({})\r\n\r\nexport function AuthProvider({ children }) {\r\n  const router = useRouter()\r\n  const [user, setUser] = useState(null)\r\n  const [loading, setLoading] = useState(true)\r\n\r\n  useEffect(() => {\r\n    async function loadUserFromCookies() {\r\n      const token = Cookies.get(MERCURY_TOKEN)\r\n\r\n      if (token) {\r\n        api.setToken(`Bearer ${token}`)\r\n\r\n        const currentUser = await api.getMe()\r\n        if (currentUser) setUser(currentUser)\r\n      }\r\n\r\n      setLoading(false)\r\n    }\r\n\r\n    loadUserFromCookies()\r\n  }, [])\r\n\r\n  const login = async (email, password) => {\r\n    const loginResponse = await api.postLogin(email, password)\r\n    if (!loginResponse || !loginResponse.token) return null\r\n\r\n    Cookies.set(MERCURY_TOKEN, loginResponse.token, { expires: 60 })\r\n    api.setToken(`Bearer ${loginResponse.token}`)\r\n\r\n    const currentUser = await api.getMe()\r\n    if (currentUser) setUser(currentUser)\r\n\r\n    return currentUser\r\n  }\r\n\r\n  const logout = async () => {\r\n    Cookies.remove(MERCURY_TOKEN)\r\n    setUser(null)\r\n    router.push('/login')\r\n  }\r\n\r\n  return (\r\n    <AuthContext.Provider\r\n      value={{ user, loading, login, logout, isAuthenticated: !!user }}\r\n    >\r\n      {children}\r\n    </AuthContext.Provider>\r\n  )\r\n}\r\n\r\nexport function AuthRequired(Component) {\r\n  return () => {\r\n    const router = useRouter()\r\n    const { isAuthenticated, loading } = useAuth()\r\n\r\n    useEffect(() => {\r\n      if (!isAuthenticated && !loading) router.push('/login')\r\n    }, [loading, isAuthenticated])\r\n\r\n    return <Component {...arguments} />\r\n  }\r\n}\r\n\r\nexport function useAuth() {\r\n  return useContext(AuthContext)\r\n}\r\n"]},"metadata":{},"sourceType":"module"}