{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { Component } from 'react';\nimport { Modal, Button, Search, Label, Icon } from 'semantic-ui-react';\nimport _ from 'lodash';\nimport { EventEmitter } from '../util/EventEmitter';\nimport SearchBar from './searchBar';\nconst initialState = {\n  isLoading: false,\n  results: [],\n  value: ''\n};\n\nclass StudentInviteModal extends Component {\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"formatAsResults\", user => {\n      return {\n        title: user.firstName + ' ' + user.lastName,\n        id: user.id,\n        description: user.email\n      };\n    });\n\n    _defineProperty(this, \"handleInvite\", () => {\n      EventEmitter.publish('openInviteModal', false);\n      if (_.isEmpty(this.state.selectedUser)) return;\n      console.log(_.map(this.state.selectedUser, 'id'));\n      EventEmitter.publish('sendOutInvite', {\n        sender: this.state.me,\n        recepientIds: _.map(this.state.selectedUser, 'id'),\n        group: this.state.currentGroup\n      });\n      this.setState({\n        value: '',\n        selectedUser: [],\n        modalState: false\n      });\n    });\n\n    _defineProperty(this, \"handleClose\", () => {\n      this.setState({\n        value: '',\n        selectedUser: [],\n        modalState: false\n      });\n      EventEmitter.publish('openInviteModal', false);\n    });\n\n    _defineProperty(this, \"handleResultSelect\", (e, {\n      result\n    }) => {\n      const filtered = this.state.selectedUser.filter(user => user.id !== result.id);\n      filtered.push(result);\n      this.setState({\n        value: '',\n        selectedUser: filtered\n      });\n    });\n\n    _defineProperty(this, \"handleSearchChange\", (e, {\n      value\n    }) => {\n      this.setState({\n        isLoading: true,\n        value\n      });\n      setTimeout(() => {\n        if (this.state.value.length < 1) return this.setState(initialState);\n        const re = new RegExp(_.escapeRegExp(this.state.value), 'i');\n\n        const isMatch = result => re.test(result.title) || re.test(result.description);\n\n        this.setState({\n          isLoading: false,\n          results: _.filter(this.state.allUsers.map(this.formatAsResults), isMatch)\n        });\n      }, 300);\n    });\n\n    _defineProperty(this, \"removeSelected\", user => {\n      this.setState({\n        selectedUser: this.state.selectedUser.filter(u => u.id !== user.id) // selectedUser: {},\n\n      });\n    });\n\n    this.state = {\n      modalState: false,\n      isLoading: false,\n      results: [],\n      value: '',\n      allUsers: [],\n      selectedUser: [],\n      me: {},\n      currentGroup: {\n        id: '',\n        name: ''\n      }\n    };\n    this.defineEventEmitterCallbacks();\n  }\n\n  defineEventEmitterCallbacks() {\n    EventEmitter.subscribe('openInviteModal', openInviteModal => {\n      this.setState({\n        modalState: openInviteModal\n      });\n    });\n    EventEmitter.subscribe('me', me => {\n      this.setState({\n        me\n      });\n    });\n    EventEmitter.subscribe('allOtherStudentsInClass', users => {\n      this.setState({\n        allUsers: users\n      });\n    });\n    EventEmitter.subscribe('currentGroupChange', currentGroup => {\n      this.setState({\n        currentGroup\n      });\n    });\n  }\n\n  getSelectedLabels() {\n    // if (_.isEmpty(this.state.selectedUser)) {\n    //   return <></>\n    // }\n    // return (\n    //   <div\n    //     style={{\n    //       textAlign: 'left',\n    //       paddingLeft: 80,\n    //       paddingRight: 80,\n    //     }}\n    //   >\n    //     <Label>\n    //       {this.state.selectedUser.title}\n    //       <Icon\n    //         name=\"delete\"\n    //         onClick={() => this.removeSelected(this.state.selectedUser)}\n    //       />\n    //     </Label>\n    //   </div>\n    // )\n    if (_.isEmpty(this.state.selectedUser)) {\n      return __jsx(React.Fragment, null);\n    }\n\n    return __jsx(\"div\", {\n      style: {\n        textAlign: 'left',\n        paddingLeft: 80,\n        paddingRight: 80\n      }\n    }, this.state.selectedUser.map(user => __jsx(Label, null, user.title, __jsx(Icon, {\n      name: \"delete\",\n      onClick: () => this.removeSelected(user)\n    }))));\n  }\n\n  render() {\n    return __jsx(\"div\", null, __jsx(Modal, {\n      style: {\n        borderless: 'true',\n        width: '40%',\n        height: '40%'\n      },\n      open: this.state.modalState,\n      onClose: this.handleClose,\n      closeOnDimmerClick: false,\n      closeOnEscape: false,\n      closeIcon: true\n    }, __jsx(Modal.Content, {\n      style: {\n        borderless: 'true'\n      }\n    }, __jsx(\"div\", {\n      style: {\n        textAlign: 'center',\n        paddingTop: 80,\n        paddingLeft: 80,\n        paddingRight: 80,\n        paddingBottom: 20\n      }\n    }, __jsx(Search, {\n      fluid: true,\n      placeholder: \"Invite student...\",\n      input: {\n        fluid: true\n      },\n      loading: this.state.isLoading,\n      onResultSelect: this.handleResultSelect,\n      onSearchChange: _.debounce(this.handleSearchChange, 500, {\n        leading: true\n      }),\n      results: this.state.results,\n      value: this.state.value\n    })), this.getSelectedLabels(), __jsx(\"div\", {\n      style: {\n        textAlign: 'center',\n        width: '70%',\n        height: '70%',\n        margin: 'auto',\n        padding: 30\n      }\n    }, __jsx(Button, {\n      color: \"teal\",\n      style: {\n        width: '50%',\n        fontSize: '1vw'\n      },\n      onClick: this.handleInvite\n    }, \"Invite\")))));\n  }\n\n}\n\nexport default StudentInviteModal;","map":null,"metadata":{},"sourceType":"module"}