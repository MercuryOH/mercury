{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport Publisher from './publisher';\nimport { EventEmitter } from './util/EventEmitter';\nimport { OTSubscriber, createSession } from 'opentok-react';\nimport { Button } from 'semantic-ui-react';\n\nclass ScreenContainer extends React.Component {\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"handlePublish\", () => {\n      console.log('Successfully published!');\n    });\n\n    _defineProperty(this, \"handleSubscribe\", () => {\n      console.log('Subscribed!');\n    });\n\n    _defineProperty(this, \"handleSessionError\", error => {\n      console.error(error);\n    });\n\n    _defineProperty(this, \"handlePublishError\", error => {\n      console.error(error);\n    });\n\n    _defineProperty(this, \"handleSubscribeError\", error => {\n      console.error(error);\n    });\n\n    this.state = {\n      currGroup: this.props.currGroup,\n      ssButton: true,\n      streams: [],\n      focusStream: {},\n      videoButton: true,\n      expand: false\n    };\n    this.defineEventEmitterCallbacks();\n    this.sessionEventHandlers = {\n      sessionConnected: () => {},\n      sessionDisconnected: () => {},\n      sessionReconnected: () => {},\n      sessionReconnecting: () => {}\n    };\n    this.publishEventHandlers = {\n      accessDenied: () => {},\n      streamCreated: () => {},\n      streamDestroyed: () => {}\n    };\n    this.subscribeEventHandlers = {\n      videoEnabled: () => {},\n      videoDisabled: () => {}\n    };\n  }\n\n  defineEventEmitterCallbacks() {\n    EventEmitter.subscribe('disableVideoButton', () => {\n      this.setState({\n        videoButton: false\n      });\n    });\n    EventEmitter.subscribe('enableVideoButton', () => {\n      this.setState({\n        videoButton: true\n      });\n    });\n  }\n\n  getStreamToDisplay() {\n    return this.state.expand === true ? __jsx(OTSubscriber, {\n      key: this.state.focusStream.id,\n      session: this.sessionHelper.session,\n      stream: this.state.focusStream,\n      properties: {\n        maxWidth: '75vw',\n        maxHeight: '75vh',\n        height: '85vh',\n        width: '48vw'\n      },\n      onSubscribe: this.handleSubscribe,\n      onError: this.handleSubscribeError\n    }) : null;\n  }\n\n  screenShareButton() {\n    return this.state.ssButton === true ? __jsx(Button, {\n      onClick: () => {\n        EventEmitter.publish('startScreenShare');\n        this.setState({\n          ssButton: false\n        });\n      },\n      style: {\n        fontSize: '.8vw',\n        display: 'inline-flex'\n      },\n      icon: \"tv\",\n      content: \"Share Screen\"\n    }) : __jsx(Button, {\n      onClick: () => {\n        EventEmitter.publish('stopScreenShare');\n        this.setState({\n          ssButton: true\n        });\n      },\n      icon: \"tv\",\n      style: {\n        fontSize: '.8vw',\n        display: 'inline-flex'\n      },\n      content: \"Stop Screen Share\"\n    });\n  }\n\n  videoStateButton() {\n    return this.state.videoButton === true ? __jsx(Button, {\n      onClick: () => {\n        EventEmitter.publish('disableVideo');\n      },\n      icon: \"hide\",\n      style: {\n        fontSize: '.8vw',\n        display: 'inline-flex'\n      },\n      content: \"Disable video\"\n    }) : __jsx(Button, {\n      onClick: () => {\n        EventEmitter.publish('enableVideo');\n      },\n      icon: \"eye\",\n      style: {\n        fontSize: '.8vw',\n        display: 'inline-flex'\n      },\n      content: \"Enable video\"\n    });\n  }\n\n  unexpandButton() {\n    return this.state.expand === true ? __jsx(Button, {\n      onClick: () => {\n        this.setState({\n          expand: false\n        });\n        console.log('ore');\n      },\n      style: {\n        fontSize: '.8vw',\n        display: 'inline-flex'\n      },\n      content: \"Unexpand video\"\n    }) : null;\n  }\n\n  componentWillMount() {\n    const {\n      sessionId,\n      token,\n      onLeave\n    } = this.props;\n    this.sessionHelper = createSession({\n      apiKey: `${process.env.NEXT_PUBLIC_VV_API_KEY}`,\n      sessionId: `${sessionId}`,\n      token: `${token}`,\n      onStreamsUpdated: streams => {\n        this.setState({\n          streams\n        });\n      }\n    });\n  }\n\n  appointLeaderButton() {\n    return __jsx(Button, {\n      icon: \"chess king\",\n      style: {\n        fontSize: '.8vw',\n        display: 'inline-flex'\n      },\n      content: \"Appoint Leader\"\n    });\n  }\n\n  componentWillUnmount() {\n    this.sessionHelper.disconnect();\n  }\n\n  render() {\n    const {\n      onLeave\n    } = this.props;\n    return __jsx(React.Fragment, null, __jsx(\"div\", {\n      style: {\n        display: 'inline-flex',\n        width: '100%',\n        maxHeight: '86vh'\n      }\n    }, __jsx(\"div\", {\n      style: {\n        width: '78%',\n        maxHeight: '85vh',\n        overflow: 'auto'\n      }\n    }, this.getStreamToDisplay()), __jsx(\"div\", {\n      style: {\n        width: '22%',\n        maxHeight: '85vh',\n        overflow: 'auto',\n        height: '1000px'\n      }\n    }, __jsx(Publisher, {\n      style: {\n        width: '13.57vw',\n        maxWidth: '13.57vw',\n        marginBottom: '5px'\n      },\n      session: this.sessionHelper.session,\n      name: this.props.name\n    }), this.state.streams.map(stream => __jsx(React.Fragment, null, __jsx(Button, {\n      onClick: () => {\n        this.setState({\n          focusStream: stream\n        });\n        this.setState({\n          expand: true\n        });\n      },\n      style: {\n        padding: '0px',\n        width: '100%',\n        maxHeight: '18vh',\n        margin: '0px'\n      }\n    }, __jsx(OTSubscriber, {\n      key: stream.id,\n      session: this.sessionHelper.session,\n      stream: stream,\n      properties: {\n        width: '100%',\n        height: '18vh',\n        maxHeight: '18vh',\n        margin: '0px'\n      },\n      onSubscribe: this.handleSubscribe,\n      onError: this.handleSubscribeError\n    })))))), this.videoStateButton(), this.unexpandButton(), this.screenShareButton(), this.appointLeaderButton(), __jsx(Button, {\n      onClick: onLeave,\n      color: \"red\",\n      icon: \"close\",\n      style: {\n        fontSize: '.8vw',\n        display: 'inline-flex'\n      },\n      content: \"Leave call\"\n    }));\n  }\n\n}\n\nScreenContainer.propTypes = {\n  sessionId: PropTypes.string.isRequired,\n  token: PropTypes.string.isRequired,\n  onLeave: PropTypes.func.isRequired\n};\nexport default ScreenContainer;","map":{"version":3,"sources":["C:/Users/ryanj/Documents/mercury/components/screenContainer.js"],"names":["React","PropTypes","Publisher","EventEmitter","OTSubscriber","createSession","Button","ScreenContainer","Component","constructor","props","console","log","error","state","currGroup","ssButton","streams","focusStream","videoButton","expand","defineEventEmitterCallbacks","sessionEventHandlers","sessionConnected","sessionDisconnected","sessionReconnected","sessionReconnecting","publishEventHandlers","accessDenied","streamCreated","streamDestroyed","subscribeEventHandlers","videoEnabled","videoDisabled","subscribe","setState","getStreamToDisplay","id","sessionHelper","session","maxWidth","maxHeight","height","width","handleSubscribe","handleSubscribeError","screenShareButton","publish","fontSize","display","videoStateButton","unexpandButton","componentWillMount","sessionId","token","onLeave","apiKey","process","env","NEXT_PUBLIC_VV_API_KEY","onStreamsUpdated","appointLeaderButton","componentWillUnmount","disconnect","render","overflow","marginBottom","name","map","stream","padding","margin","propTypes","string","isRequired","func"],"mappings":"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","sourcesContent":["import React from 'react'\nimport PropTypes from 'prop-types'\nimport Publisher from './publisher'\nimport { EventEmitter } from './util/EventEmitter'\nimport { OTSubscriber, createSession } from 'opentok-react'\nimport { Button } from 'semantic-ui-react'\n\nclass ScreenContainer extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      currGroup: this.props.currGroup,\n      ssButton: true,\n      streams: [],\n      focusStream: {},\n      videoButton: true,\n      expand: false,\n    }\n\n    this.defineEventEmitterCallbacks()\n\n    this.sessionEventHandlers = {\n      sessionConnected: () => {},\n      sessionDisconnected: () => {},\n      sessionReconnected: () => {},\n      sessionReconnecting: () => {},\n    }\n\n    this.publishEventHandlers = {\n      accessDenied: () => {},\n      streamCreated: () => {},\n      streamDestroyed: () => {},\n    }\n\n    this.subscribeEventHandlers = {\n      videoEnabled: () => {},\n      videoDisabled: () => {},\n    }\n  }\n\n  handlePublish = () => {\n    console.log('Successfully published!')\n  }\n\n  handleSubscribe = () => {\n    console.log('Subscribed!')\n  }\n\n  handleSessionError = (error) => {\n    console.error(error)\n  }\n\n  handlePublishError = (error) => {\n    console.error(error)\n  }\n\n  handleSubscribeError = (error) => {\n    console.error(error)\n  }\n\n  defineEventEmitterCallbacks() {\n    EventEmitter.subscribe('disableVideoButton', () => {\n      this.setState({ videoButton: false })\n    })\n    EventEmitter.subscribe('enableVideoButton', () => {\n      this.setState({ videoButton: true })\n    })\n  }\n\n  getStreamToDisplay() {\n    return this.state.expand === true ? (\n      <OTSubscriber\n        key={this.state.focusStream.id}\n        session={this.sessionHelper.session}\n        stream={this.state.focusStream}\n        properties={{\n          maxWidth: '75vw',\n          maxHeight: '75vh',\n          height: '85vh',\n          width: '48vw',\n        }}\n        onSubscribe={this.handleSubscribe}\n        onError={this.handleSubscribeError}\n      />\n    ) : null\n  }\n\n  screenShareButton() {\n    return this.state.ssButton === true ? (\n      <Button\n        onClick={() => {\n          EventEmitter.publish('startScreenShare')\n          this.setState({ ssButton: false })\n        }}\n        style={{ fontSize: '.8vw', display: 'inline-flex' }}\n        icon=\"tv\"\n        content=\"Share Screen\"\n      />\n    ) : (\n      <Button\n        onClick={() => {\n          EventEmitter.publish('stopScreenShare')\n          this.setState({ ssButton: true })\n        }}\n        icon=\"tv\"\n        style={{ fontSize: '.8vw', display: 'inline-flex' }}\n        content=\"Stop Screen Share\"\n      />\n    )\n  }\n\n  videoStateButton() {\n    return this.state.videoButton === true ? (\n      <Button\n        onClick={() => {\n          EventEmitter.publish('disableVideo')\n        }}\n        icon=\"hide\"\n        style={{ fontSize: '.8vw', display: 'inline-flex' }}\n        content=\"Disable video\"\n      />\n    ) : (\n      <Button\n        onClick={() => {\n          EventEmitter.publish('enableVideo')\n        }}\n        icon=\"eye\"\n        style={{ fontSize: '.8vw', display: 'inline-flex' }}\n        content=\"Enable video\"\n      />\n    )\n  }\n\n  unexpandButton() {\n    return this.state.expand === true ? (\n      <Button\n        onClick={() => {\n          this.setState({ expand: false })\n          console.log('ore')\n        }}\n        style={{ fontSize: '.8vw', display: 'inline-flex' }}\n        content=\"Unexpand video\"\n      />\n    ) : null\n  }\n\n  componentWillMount() {\n    const { sessionId, token, onLeave } = this.props\n    this.sessionHelper = createSession({\n      apiKey: `${process.env.NEXT_PUBLIC_VV_API_KEY}`,\n      sessionId: `${sessionId}`,\n      token: `${token}`,\n      onStreamsUpdated: (streams) => {\n        this.setState({ streams })\n      },\n    })\n  }\n\n  appointLeaderButton() {\n    return (\n      <Button\n        icon=\"chess king\"\n        style={{ fontSize: '.8vw', display: 'inline-flex' }}\n        content=\"Appoint Leader\"\n      />\n    )\n  }\n\n  componentWillUnmount() {\n    this.sessionHelper.disconnect()\n  }\n\n  render() {\n    const { onLeave } = this.props\n    return (\n      <>\n        <div\n          style={{ display: 'inline-flex', width: '100%', maxHeight: '86vh' }}\n        >\n          <div style={{ width: '78%', maxHeight: '85vh', overflow: 'auto' }}>\n            {this.getStreamToDisplay()}\n          </div>\n          <div\n            style={{\n              width: '22%',\n              maxHeight: '85vh',\n              overflow: 'auto',\n              height: '1000px',\n            }}\n          >\n            <Publisher\n              style={{\n                width: '13.57vw',\n                maxWidth: '13.57vw',\n                marginBottom: '5px',\n              }}\n              session={this.sessionHelper.session}\n              name = {this.props.name}\n            />\n            {this.state.streams.map((stream) => (\n              <>\n                <Button\n                  onClick={() => {\n                    this.setState({ focusStream: stream })\n                    this.setState({ expand: true })\n                  }}\n                  style={{\n                    padding: '0px',\n                    width: '100%',\n                    maxHeight: '18vh',\n                    margin: '0px',\n                  }}\n                >\n                  <OTSubscriber\n                    key={stream.id}\n                    session={this.sessionHelper.session}\n                    stream={stream}\n                    properties={{\n                      width: '100%',\n                      height: '18vh',\n                      maxHeight: '18vh',\n                      margin: '0px',\n                    }}\n                    onSubscribe={this.handleSubscribe}\n                    onError={this.handleSubscribeError}\n                  />\n                </Button>\n              </>\n            ))}\n          </div>\n        </div>\n        {this.videoStateButton()}\n        {this.unexpandButton()}\n        {this.screenShareButton()}\n        {this.appointLeaderButton()}\n        <Button\n          onClick={onLeave}\n          color=\"red\"\n          icon=\"close\"\n          style={{ fontSize: '.8vw', display: 'inline-flex' }}\n          content=\"Leave call\"\n        />\n      </>\n    )\n  }\n}\n\nScreenContainer.propTypes = {\n  sessionId: PropTypes.string.isRequired,\n  token: PropTypes.string.isRequired,\n  onLeave: PropTypes.func.isRequired,\n}\n\nexport default ScreenContainer\n"]},"metadata":{},"sourceType":"module"}