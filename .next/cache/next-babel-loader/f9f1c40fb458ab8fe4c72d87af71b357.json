{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { Component } from 'react';\nimport { Label, Button } from 'semantic-ui-react';\nimport styled from 'styled-components';\nimport QueueWebSocket from './queuews';\nimport * as api from '../../util/mercuryService';\nimport { AuthRequired } from '../../components/authProvider';\nimport YourTurnModal from '../yourTurnModal';\nconst QueueDiv = styled.div.withConfig({\n  displayName: \"queue__QueueDiv\",\n  componentId: \"sc-1vy3urw-0\"\n})([\"grid-gap:2vh;\"]);\nconst QueueLabel = styled(Label).withConfig({\n  displayName: \"queue__QueueLabel\",\n  componentId: \"sc-1vy3urw-1\"\n})([\"text-align:center;\"]);\n\nclass Queue extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      displayStudentsStyle: {\n        display: 'grid'\n      },\n      iconToDisplay: 'caret square down outline',\n      connection: new QueueWebSocket(this),\n      studentsInQueue: [],\n      me: {},\n      classData: [],\n      inQueue: false,\n      isYourTurn: false\n    };\n    this.getRoleForClass.bind(this);\n  }\n\n  componentDidMount() {\n    this.courseId = Number(window.location.href.split('/')[4]);\n    this.state.connection.start();\n    let me = {};\n    let classData = {};\n    api.getMe().then(meData => {\n      me = meData;\n    }).then(() => api.getClasses()).then(classPayload => {\n      classData = classPayload;\n    }).then(() => this.setState({\n      me,\n      classData\n    }));\n  }\n\n  isStudentDisplayed() {\n    let {\n      display\n    } = this.state.displayStudentsStyle;\n    return display === 'grid';\n  }\n\n  alterStudentDisplay() {\n    let displayStudentsStyle = this.isStudentDisplayed() ? {\n      display: 'none'\n    } : {\n      display: 'grid'\n    };\n    let iconToDisplay = this.isStudentDisplayed() ? 'caret square up outline' : 'caret square down outline';\n    this.setState({\n      displayStudentsStyle,\n      iconToDisplay\n    });\n  }\n\n  addMeToQueue() {\n    const {\n      firstName,\n      lastName\n    } = this.state.me;\n    const fullName = `${firstName} ${lastName}`;\n\n    if (this.state.studentsInQueue.indexOf(fullName) >= 0) {\n      return;\n    }\n\n    this.state.connection.addMeToQueue();\n  }\n\n  removeMeFromQueue() {\n    const {\n      firstName,\n      lastName\n    } = this.state.me;\n    const fullName = `${firstName} ${lastName}`;\n\n    if (this.state.studentsInQueue.indexOf(fullName) < 0) {\n      return;\n    }\n\n    this.state.connection.removeMeFromQueue();\n  }\n\n  getRoleForClass() {\n    const {\n      classData\n    } = this.state;\n    let userRole = null;\n    classData.forEach(row => {\n      let {\n        id,\n        role\n      } = row;\n\n      if (this.courseId === Number(id)) {\n        userRole = role;\n      }\n    });\n    return userRole;\n  }\n\n  getNextStudentInQueue() {\n    this.state.connection.getNextStudent();\n  }\n\n  render() {\n    const {\n      connection\n    } = this.state;\n\n    if (!connection) {\n      return null;\n    }\n\n    const userRole = this.getRoleForClass();\n\n    let buttonToDisplay = __jsx(\"div\", {\n      style: {\n        position: 'absolute',\n        width: 'calc(100% - 38px)',\n        bottom: 14,\n        display: 'inline-flex'\n      }\n    }, __jsx(Button, {\n      onClick: this.addMeToQueue.bind(this),\n      style: {\n        width: '50%',\n        fontSize: '1vw'\n      },\n      primary: true\n    }, \"Join Queue\"), __jsx(Button, {\n      onClick: this.removeMeFromQueue.bind(this),\n      style: {\n        width: '50%',\n        fontSize: '1vw'\n      },\n      secondary: true\n    }, \"Leave Queue\"));\n\n    if (userRole !== 'Student') {\n      buttonToDisplay = __jsx(\"div\", {\n        style: {\n          position: 'absolute',\n          width: 'calc(100% - 38px)',\n          bottom: 14,\n          display: 'inline-flex'\n        }\n      }, __jsx(Button, {\n        onClick: this.getNextStudentInQueue.bind(this),\n        primary: true\n      }, \"Next\"));\n    }\n\n    const queueLabels = this.state.displayStudentsStyle.display == 'none' ? __jsx(React.Fragment, null) : this.state.studentsInQueue.map(student => __jsx(QueueLabel, {\n      vertical: true,\n      style: {\n        fontSize: '1.2vw',\n        textAlign: 'center',\n        width: '95%',\n        marginBottom: '2%',\n        minWidth: '41px',\n        marginLeft: '.8%',\n        marginRight: '1%'\n      },\n      key: student\n    }, student));\n    return __jsx(QueueDiv, null, __jsx(YourTurnModal, {\n      isYourTurn: this.state.isYourTurn\n    }), __jsx(Button.Group, {\n      size: \"huge\",\n      style: {\n        marginBottom: 12,\n        width: '95%'\n      },\n      fluid: true,\n      vertical: true\n    }, __jsx(Button, {\n      compact: true,\n      content: \"Queue\",\n      icon: this.state.iconToDisplay,\n      labelPosition: \"right\",\n      onClick: this.alterStudentDisplay.bind(this),\n      style: {\n        fontSize: '1.5vw',\n        textAlign: 'center',\n        width: '100%',\n        marginBottom: '2%',\n        minWidth: '41px'\n      }\n    })), __jsx(QueueDiv, {\n      style: {\n        width: '100%',\n        marginBottom: '2%',\n        minWidth: '41px'\n      }\n    }, queueLabels), buttonToDisplay);\n  }\n\n}\n\nexport default AuthRequired(Queue);","map":{"version":3,"sources":["C:/Users/ryanj/Documents/mercury/components/queue/queue.js"],"names":["React","Component","Label","Button","styled","QueueWebSocket","api","AuthRequired","YourTurnModal","QueueDiv","div","QueueLabel","Queue","constructor","props","state","displayStudentsStyle","display","iconToDisplay","connection","studentsInQueue","me","classData","inQueue","isYourTurn","getRoleForClass","bind","componentDidMount","courseId","Number","window","location","href","split","start","getMe","then","meData","getClasses","classPayload","setState","isStudentDisplayed","alterStudentDisplay","addMeToQueue","firstName","lastName","fullName","indexOf","removeMeFromQueue","userRole","forEach","row","id","role","getNextStudentInQueue","getNextStudent","render","buttonToDisplay","position","width","bottom","fontSize","queueLabels","map","student","textAlign","marginBottom","minWidth","marginLeft","marginRight"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\r\nimport { Label, Button } from 'semantic-ui-react'\r\nimport styled from 'styled-components'\r\nimport QueueWebSocket from './queuews'\r\nimport * as api from '../../util/mercuryService'\r\nimport { AuthRequired } from '../../components/authProvider'\r\nimport YourTurnModal from '../yourTurnModal'\r\n\r\nconst QueueDiv = styled.div`\r\n  grid-gap: 2vh;\r\n`\r\n\r\nconst QueueLabel = styled(Label)`\r\n  text-align: center;\r\n`\r\n\r\nclass Queue extends Component {\r\n  constructor(props) {\r\n    super(props)\r\n    this.state = {\r\n      displayStudentsStyle: { display: 'grid' },\r\n      iconToDisplay: 'caret square down outline',\r\n      connection: new QueueWebSocket(this),\r\n      studentsInQueue: [],\r\n      me: {},\r\n      classData: [],\r\n      inQueue: false,\r\n      isYourTurn: false,\r\n    }\r\n\r\n    this.getRoleForClass.bind(this)\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.courseId = Number(window.location.href.split('/')[4])\r\n    this.state.connection.start()\r\n\r\n    let me = {}\r\n    let classData = {}\r\n\r\n    api\r\n      .getMe()\r\n      .then((meData) => {\r\n        me = meData\r\n      })\r\n      .then(() => api.getClasses())\r\n      .then((classPayload) => {\r\n        classData = classPayload\r\n      })\r\n      .then(() => this.setState({ me, classData }))\r\n  }\r\n\r\n  isStudentDisplayed() {\r\n    let { display } = this.state.displayStudentsStyle\r\n    return display === 'grid'\r\n  }\r\n\r\n  alterStudentDisplay() {\r\n    let displayStudentsStyle = this.isStudentDisplayed()\r\n      ? { display: 'none' }\r\n      : { display: 'grid' }\r\n\r\n    let iconToDisplay = this.isStudentDisplayed()\r\n      ? 'caret square up outline'\r\n      : 'caret square down outline'\r\n\r\n    this.setState({ displayStudentsStyle, iconToDisplay })\r\n  }\r\n\r\n  addMeToQueue() {\r\n    const { firstName, lastName } = this.state.me\r\n    const fullName = `${firstName} ${lastName}`\r\n\r\n    if (this.state.studentsInQueue.indexOf(fullName) >= 0) {\r\n      return\r\n    }\r\n\r\n    this.state.connection.addMeToQueue()\r\n  }\r\n\r\n  removeMeFromQueue() {\r\n    const { firstName, lastName } = this.state.me\r\n    const fullName = `${firstName} ${lastName}`\r\n\r\n    if (this.state.studentsInQueue.indexOf(fullName) < 0) {\r\n      return\r\n    }\r\n\r\n    this.state.connection.removeMeFromQueue()\r\n  }\r\n\r\n  getRoleForClass() {\r\n    const { classData } = this.state\r\n    let userRole = null\r\n\r\n    classData.forEach((row) => {\r\n      let { id, role } = row\r\n      if (this.courseId === Number(id)) {\r\n        userRole = role\r\n      }\r\n    })\r\n\r\n    return userRole\r\n  }\r\n\r\n  getNextStudentInQueue() {\r\n    this.state.connection.getNextStudent()\r\n  }\r\n\r\n  render() {\r\n    const { connection } = this.state\r\n\r\n    if (!connection) {\r\n      return null\r\n    }\r\n\r\n    const userRole = this.getRoleForClass()\r\n\r\n    let buttonToDisplay = (\r\n      <div\r\n        style={{\r\n          position: 'absolute',\r\n          width: 'calc(100% - 38px)',\r\n          bottom: 14,\r\n          display: 'inline-flex',\r\n        }}\r\n      >\r\n        <Button onClick={this.addMeToQueue.bind(this)} style = {{width: '50%', fontSize: '1vw'}} primary>\r\n          Join Queue\r\n        </Button>\r\n        <Button onClick={this.removeMeFromQueue.bind(this)} style = {{width: '50%', fontSize: '1vw'}} secondary>\r\n          Leave Queue\r\n        </Button>\r\n      </div>\r\n    )\r\n\r\n    if (userRole !== 'Student') {\r\n      buttonToDisplay = (\r\n        <div\r\n          style={{\r\n            position: 'absolute',\r\n            width: 'calc(100% - 38px)',\r\n            bottom: 14,\r\n            display: 'inline-flex',\r\n          }}\r\n        >\r\n          <Button onClick={this.getNextStudentInQueue.bind(this)} primary>\r\n            Next\r\n          </Button>\r\n        </div>\r\n      )\r\n    }\r\n\r\n    const queueLabels =\r\n      this.state.displayStudentsStyle.display == 'none' ? (\r\n        <></>\r\n      ) : (\r\n        this.state.studentsInQueue.map((student) => (\r\n          <QueueLabel\r\n            vertical\r\n            style={{\r\n              fontSize: '1.2vw',\r\n              textAlign: 'center',\r\n              width: '95%',\r\n              marginBottom: '2%',\r\n              minWidth: '41px',\r\n              marginLeft: '.8%',\r\n              marginRight: '1%',\r\n            }}\r\n            key={student}\r\n          >\r\n            {student}\r\n          </QueueLabel>\r\n        ))\r\n      )\r\n\r\n    return (\r\n      <QueueDiv>\r\n        <YourTurnModal isYourTurn={this.state.isYourTurn} />\r\n\r\n        <Button.Group\r\n          size=\"huge\"\r\n          style={{ marginBottom: 12, width: '95%' }}\r\n          fluid\r\n          vertical\r\n        >\r\n          <Button\r\n            compact\r\n            content=\"Queue\"\r\n            icon={this.state.iconToDisplay}\r\n            labelPosition=\"right\"\r\n            onClick={this.alterStudentDisplay.bind(this)}\r\n            style={{\r\n              fontSize: '1.5vw',\r\n              textAlign: 'center',\r\n              width: '100%',\r\n              marginBottom: '2%',\r\n              minWidth: '41px',\r\n            }}\r\n          />\r\n        </Button.Group>\r\n\r\n        <QueueDiv\r\n          style={{ width: '100%', marginBottom: '2%', minWidth: '41px' }}\r\n        >\r\n          {queueLabels}\r\n        </QueueDiv>\r\n\r\n        {buttonToDisplay}\r\n      </QueueDiv>\r\n    )\r\n  }\r\n}\r\n\r\nexport default AuthRequired(Queue)\r\n"]},"metadata":{},"sourceType":"module"}