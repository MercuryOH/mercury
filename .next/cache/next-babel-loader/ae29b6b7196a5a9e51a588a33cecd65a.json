{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { Modal, Button, Checkbox, Table, Header, Input } from 'semantic-ui-react';\nimport _ from 'lodash';\nimport * as api from '../util/mercuryService';\nimport { EventEmitter } from './util/EventEmitter';\n\nclass ModifyClassesModal extends Component {\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"handleSubmit\", () => {\n      this.setState({\n        modalState: false\n      });\n      EventEmitter.publish('currentlyEnrolled', this.state.classRoles);\n    });\n\n    this.state = {\n      modalState: false,\n      classRoles: []\n    };\n  }\n\n  componentDidMount() {\n    const classRoles = [];\n    api.getMe().then(meData => {\n      this.user = meData;\n    }).then(() => api.getAllClasses()).then(classes => {\n      console.log(classes);\n      classes.map(cc => {\n        api.getClass(cc.id).then(c => {\n          const userRole = c.users.find(u => u.id === this.user.id);\n          classRoles.push(_objectSpread(_objectSpread({}, cc), {}, {\n            role: userRole ? userRole.role : ''\n          }));\n        });\n      });\n      this.setState({\n        classRoles\n      });\n    }).catch(console.error);\n  }\n\n  getTACell(classRole) {\n    return classRole === 'Student' || classRole === '' ? __jsx(Input, {\n      placeholder: 'Enter permission code...'\n    }) : __jsx(Header, {\n      as: \"h4\"\n    }, __jsx(Header.Content, null, 'verified ' + classRole));\n  }\n\n  render() {\n    return __jsx(\"div\", null, __jsx(Modal, {\n      style: {\n        borderless: 'true',\n        width: '40%',\n        height: '40%'\n      },\n      trigger: __jsx(Button, {\n        color: \"teal\",\n        content: \"Modify Class\",\n        fluid: true,\n        style: {\n          fontSize: '1vw'\n        },\n        onClick: () => this.setState({\n          groupName: '',\n          value: '',\n          modalState: true\n        })\n      }),\n      open: this.state.modalState,\n      onClose: () => this.setState({\n        modalState: false\n      }),\n      closeOnDimmerClick: false,\n      closeOnEscape: false,\n      closeIcon: true\n    }, __jsx(Modal.Content, {\n      style: {\n        borderless: 'true'\n      }\n    }, __jsx(\"div\", {\n      style: {\n        textAlign: 'center',\n        padding: '5%',\n        height: '50%',\n        overflowY: 'auto'\n      }\n    }, __jsx(Table, {\n      basic: \"very\",\n      celled: true\n    }, __jsx(Table.Header, null, __jsx(Table.Row, null, __jsx(Table.HeaderCell, {\n      style: {\n        textAlign: 'center'\n      }\n    }, \"Classes\"), __jsx(Table.HeaderCell, {\n      style: {\n        textAlign: 'center'\n      }\n    }, \"Student\"), __jsx(Table.HeaderCell, {\n      style: {\n        textAlign: 'center'\n      }\n    }, \"TA/Professor\"))), __jsx(Table.Body, null, this.state.classRoles.map(c => __jsx(Table.Row, {\n      key: c.id\n    }, __jsx(Table.Cell, {\n      style: {\n        textAlign: 'center'\n      }\n    }, __jsx(Header, {\n      as: \"h4\"\n    }, __jsx(Header.Content, null, c.name))), __jsx(Table.Cell, {\n      style: {\n        textAlign: 'center'\n      }\n    }, __jsx(Checkbox, {\n      disabled: c.role === 'Professor' || c.role === 'TA',\n      checked: c.role === 'Student',\n      onChange: () => this.setState({\n        classRoles: this.state.classRoles.map(cc => {\n          if (cc.id === c.id && (cc.role === '' || cc.role === 'Student')) {\n            return _objectSpread(_objectSpread({}, cc), {}, {\n              role: cc.role === '' ? 'Student' : ''\n            });\n          }\n\n          return cc;\n        })\n      })\n    })), __jsx(Table.Cell, {\n      style: {\n        textAlign: 'center'\n      }\n    }, this.getTACell(c.role))))))), __jsx(\"div\", {\n      style: {\n        textAlign: 'center',\n        width: '70%',\n        height: '70%',\n        margin: 'auto',\n        padding: '5%'\n      }\n    }, __jsx(Button, {\n      color: \"teal\",\n      style: {\n        width: '50%',\n        fontSize: '1vw'\n      },\n      onClick: this.handleSubmit,\n      content: 'Done'\n    })))));\n  }\n\n}\n\nexport default ModifyClassesModal;","map":{"version":3,"sources":["C:/Users/ryanj/Documents/mercury/components/modifyClassesModal.js"],"names":["React","Component","PropTypes","Modal","Button","Checkbox","Table","Header","Input","_","api","EventEmitter","ModifyClassesModal","constructor","props","setState","modalState","publish","state","classRoles","componentDidMount","getMe","then","meData","user","getAllClasses","classes","console","log","map","cc","getClass","id","c","userRole","users","find","u","push","role","catch","error","getTACell","classRole","render","borderless","width","height","fontSize","groupName","value","textAlign","padding","overflowY","name","margin","handleSubmit"],"mappings":";;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SACEC,KADF,EAEEC,MAFF,EAGEC,QAHF,EAIEC,KAJF,EAKEC,MALF,EAMEC,KANF,QAOO,mBAPP;AAQA,OAAOC,CAAP,MAAc,QAAd;AACA,OAAO,KAAKC,GAAZ,MAAqB,wBAArB;AACA,SAASC,YAAT,QAA6B,qBAA7B;;AAEA,MAAMC,kBAAN,SAAiCX,SAAjC,CAA2C;AACzCY,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;;AADiB,0CAkCJ,MAAM;AACnB,WAAKC,QAAL,CAAc;AAAEC,QAAAA,UAAU,EAAE;AAAd,OAAd;AACAL,MAAAA,YAAY,CAACM,OAAb,CAAqB,mBAArB,EAA0C,KAAKC,KAAL,CAAWC,UAArD;AACD,KArCkB;;AAGjB,SAAKD,KAAL,GAAa;AACXF,MAAAA,UAAU,EAAE,KADD;AAEXG,MAAAA,UAAU,EAAE;AAFD,KAAb;AAID;;AAEDC,EAAAA,iBAAiB,GAAG;AAClB,UAAMD,UAAU,GAAG,EAAnB;AACAT,IAAAA,GAAG,CACAW,KADH,GAEGC,IAFH,CAESC,MAAD,IAAY;AAChB,WAAKC,IAAL,GAAYD,MAAZ;AACD,KAJH,EAKGD,IALH,CAKQ,MAAMZ,GAAG,CAACe,aAAJ,EALd,EAMGH,IANH,CAMSI,OAAD,IAAa;AACjBC,MAAAA,OAAO,CAACC,GAAR,CAAYF,OAAZ;AACAA,MAAAA,OAAO,CAACG,GAAR,CAAaC,EAAD,IAAQ;AAClBpB,QAAAA,GAAG,CAACqB,QAAJ,CAAaD,EAAE,CAACE,EAAhB,EAAoBV,IAApB,CAA0BW,CAAD,IAAO;AAC9B,gBAAMC,QAAQ,GAAGD,CAAC,CAACE,KAAF,CAAQC,IAAR,CAAcC,CAAD,IAAOA,CAAC,CAACL,EAAF,KAAS,KAAKR,IAAL,CAAUQ,EAAvC,CAAjB;AACAb,UAAAA,UAAU,CAACmB,IAAX,iCACKR,EADL;AAEES,YAAAA,IAAI,EAAEL,QAAQ,GAAGA,QAAQ,CAACK,IAAZ,GAAmB;AAFnC;AAID,SAND;AAOD,OARD;AASA,WAAKxB,QAAL,CAAc;AAAEI,QAAAA;AAAF,OAAd;AACD,KAlBH,EAoBGqB,KApBH,CAoBSb,OAAO,CAACc,KApBjB;AAqBD;;AAODC,EAAAA,SAAS,CAACC,SAAD,EAAY;AACnB,WAAOA,SAAS,KAAK,SAAd,IAA2BA,SAAS,KAAK,EAAzC,GACL,MAAC,KAAD;AAAO,MAAA,WAAW,EAAE;AAApB,MADK,GAGL,MAAC,MAAD;AAAQ,MAAA,EAAE,EAAC;AAAX,OACE,MAAC,MAAD,CAAQ,OAAR,QAAiB,cAAcA,SAA/B,CADF,CAHF;AAOD;;AAEDC,EAAAA,MAAM,GAAG;AACP,WACE,mBACE,MAAC,KAAD;AACE,MAAA,KAAK,EAAE;AACLC,QAAAA,UAAU,EAAE,MADP;AAELC,QAAAA,KAAK,EAAE,KAFF;AAGLC,QAAAA,MAAM,EAAE;AAHH,OADT;AAME,MAAA,OAAO,EACL,MAAC,MAAD;AACE,QAAA,KAAK,EAAC,MADR;AAEE,QAAA,OAAO,EAAC,cAFV;AAGE,QAAA,KAAK,MAHP;AAIE,QAAA,KAAK,EAAE;AAAEC,UAAAA,QAAQ,EAAE;AAAZ,SAJT;AAKE,QAAA,OAAO,EAAE,MACP,KAAKjC,QAAL,CAAc;AAAEkC,UAAAA,SAAS,EAAE,EAAb;AAAiBC,UAAAA,KAAK,EAAE,EAAxB;AAA4BlC,UAAAA,UAAU,EAAE;AAAxC,SAAd;AANJ,QAPJ;AAiBE,MAAA,IAAI,EAAE,KAAKE,KAAL,CAAWF,UAjBnB;AAkBE,MAAA,OAAO,EAAE,MAAM,KAAKD,QAAL,CAAc;AAAEC,QAAAA,UAAU,EAAE;AAAd,OAAd,CAlBjB;AAmBE,MAAA,kBAAkB,EAAE,KAnBtB;AAoBE,MAAA,aAAa,EAAE,KApBjB;AAqBE,MAAA,SAAS;AArBX,OAuBE,MAAC,KAAD,CAAO,OAAP;AAAe,MAAA,KAAK,EAAE;AAAE6B,QAAAA,UAAU,EAAE;AAAd;AAAtB,OACE;AACE,MAAA,KAAK,EAAE;AACLM,QAAAA,SAAS,EAAE,QADN;AAELC,QAAAA,OAAO,EAAE,IAFJ;AAGLL,QAAAA,MAAM,EAAE,KAHH;AAILM,QAAAA,SAAS,EAAE;AAJN;AADT,OAQE,MAAC,KAAD;AAAO,MAAA,KAAK,EAAC,MAAb;AAAoB,MAAA,MAAM;AAA1B,OACE,MAAC,KAAD,CAAO,MAAP,QACE,MAAC,KAAD,CAAO,GAAP,QACE,MAAC,KAAD,CAAO,UAAP;AAAkB,MAAA,KAAK,EAAE;AAAEF,QAAAA,SAAS,EAAE;AAAb;AAAzB,iBADF,EAIE,MAAC,KAAD,CAAO,UAAP;AAAkB,MAAA,KAAK,EAAE;AAAEA,QAAAA,SAAS,EAAE;AAAb;AAAzB,iBAJF,EAOE,MAAC,KAAD,CAAO,UAAP;AAAkB,MAAA,KAAK,EAAE;AAAEA,QAAAA,SAAS,EAAE;AAAb;AAAzB,sBAPF,CADF,CADF,EAeE,MAAC,KAAD,CAAO,IAAP,QACG,KAAKjC,KAAL,CAAWC,UAAX,CAAsBU,GAAtB,CAA2BI,CAAD,IACzB,MAAC,KAAD,CAAO,GAAP;AAAW,MAAA,GAAG,EAAEA,CAAC,CAACD;AAAlB,OACE,MAAC,KAAD,CAAO,IAAP;AAAY,MAAA,KAAK,EAAE;AAAEmB,QAAAA,SAAS,EAAE;AAAb;AAAnB,OACE,MAAC,MAAD;AAAQ,MAAA,EAAE,EAAC;AAAX,OACE,MAAC,MAAD,CAAQ,OAAR,QAAiBlB,CAAC,CAACqB,IAAnB,CADF,CADF,CADF,EAME,MAAC,KAAD,CAAO,IAAP;AAAY,MAAA,KAAK,EAAE;AAAEH,QAAAA,SAAS,EAAE;AAAb;AAAnB,OACE,MAAC,QAAD;AACE,MAAA,QAAQ,EACNlB,CAAC,CAACM,IAAF,KAAW,WAAX,IAA0BN,CAAC,CAACM,IAAF,KAAW,IAFzC;AAIE,MAAA,OAAO,EAAEN,CAAC,CAACM,IAAF,KAAW,SAJtB;AAKE,MAAA,QAAQ,EAAE,MACR,KAAKxB,QAAL,CAAc;AACZI,QAAAA,UAAU,EAAE,KAAKD,KAAL,CAAWC,UAAX,CAAsBU,GAAtB,CAA2BC,EAAD,IAAQ;AAC5C,cACEA,EAAE,CAACE,EAAH,KAAUC,CAAC,CAACD,EAAZ,KACCF,EAAE,CAACS,IAAH,KAAY,EAAZ,IACCT,EAAE,CAACS,IAAH,KAAY,SAFd,CADF,EAIE;AACA,mDACKT,EADL;AAEES,cAAAA,IAAI,EACFT,EAAE,CAACS,IAAH,KAAY,EAAZ,GAAiB,SAAjB,GAA6B;AAHjC;AAKD;;AACD,iBAAOT,EAAP;AACD,SAbW;AADA,OAAd;AANJ,MADF,CANF,EAgCE,MAAC,KAAD,CAAO,IAAP;AAAY,MAAA,KAAK,EAAE;AAAEqB,QAAAA,SAAS,EAAE;AAAb;AAAnB,OACG,KAAKT,SAAL,CAAeT,CAAC,CAACM,IAAjB,CADH,CAhCF,CADD,CADH,CAfF,CARF,CADF,EAmEE;AACE,MAAA,KAAK,EAAE;AACLY,QAAAA,SAAS,EAAE,QADN;AAELL,QAAAA,KAAK,EAAE,KAFF;AAGLC,QAAAA,MAAM,EAAE,KAHH;AAILQ,QAAAA,MAAM,EAAE,MAJH;AAKLH,QAAAA,OAAO,EAAE;AALJ;AADT,OASE,MAAC,MAAD;AACE,MAAA,KAAK,EAAC,MADR;AAEE,MAAA,KAAK,EAAE;AAAEN,QAAAA,KAAK,EAAE,KAAT;AAAgBE,QAAAA,QAAQ,EAAE;AAA1B,OAFT;AAGE,MAAA,OAAO,EAAE,KAAKQ,YAHhB;AAIE,MAAA,OAAO,EAAE;AAJX,MATF,CAnEF,CAvBF,CADF,CADF;AAgHD;;AAnKwC;;AAsK3C,eAAe5C,kBAAf","sourcesContent":["import React, { Component } from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport {\r\n  Modal,\r\n  Button,\r\n  Checkbox,\r\n  Table,\r\n  Header,\r\n  Input,\r\n} from 'semantic-ui-react'\r\nimport _ from 'lodash'\r\nimport * as api from '../util/mercuryService'\r\nimport { EventEmitter } from './util/EventEmitter'\r\n\r\nclass ModifyClassesModal extends Component {\r\n  constructor(props) {\r\n    super(props)\r\n\r\n    this.state = {\r\n      modalState: false,\r\n      classRoles: [],\r\n    }\r\n  }\r\n\r\n  componentDidMount() {\r\n    const classRoles = []\r\n    api\r\n      .getMe()\r\n      .then((meData) => {\r\n        this.user = meData\r\n      })\r\n      .then(() => api.getAllClasses())\r\n      .then((classes) => {\r\n        console.log(classes)\r\n        classes.map((cc) => {\r\n          api.getClass(cc.id).then((c) => {\r\n            const userRole = c.users.find((u) => u.id === this.user.id)\r\n            classRoles.push({\r\n              ...cc,\r\n              role: userRole ? userRole.role : '',\r\n            })\r\n          })\r\n        })\r\n        this.setState({ classRoles })\r\n      })\r\n\r\n      .catch(console.error)\r\n  }\r\n\r\n  handleSubmit = () => {\r\n    this.setState({ modalState: false })\r\n    EventEmitter.publish('currentlyEnrolled', this.state.classRoles)\r\n  }\r\n\r\n  getTACell(classRole) {\r\n    return classRole === 'Student' || classRole === '' ? (\r\n      <Input placeholder={'Enter permission code...'} />\r\n    ) : (\r\n      <Header as=\"h4\">\r\n        <Header.Content>{'verified ' + classRole}</Header.Content>\r\n      </Header>\r\n    )\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <Modal\r\n          style={{\r\n            borderless: 'true',\r\n            width: '40%',\r\n            height: '40%',\r\n          }}\r\n          trigger={\r\n            <Button\r\n              color=\"teal\"\r\n              content=\"Modify Class\"\r\n              fluid\r\n              style={{ fontSize: '1vw' }}\r\n              onClick={() =>\r\n                this.setState({ groupName: '', value: '', modalState: true })\r\n              }\r\n            />\r\n          }\r\n          open={this.state.modalState}\r\n          onClose={() => this.setState({ modalState: false })}\r\n          closeOnDimmerClick={false}\r\n          closeOnEscape={false}\r\n          closeIcon\r\n        >\r\n          <Modal.Content style={{ borderless: 'true' }}>\r\n            <div\r\n              style={{\r\n                textAlign: 'center',\r\n                padding: '5%',\r\n                height: '50%',\r\n                overflowY: 'auto',\r\n              }}\r\n            >\r\n              <Table basic=\"very\" celled>\r\n                <Table.Header>\r\n                  <Table.Row>\r\n                    <Table.HeaderCell style={{ textAlign: 'center' }}>\r\n                      Classes\r\n                    </Table.HeaderCell>\r\n                    <Table.HeaderCell style={{ textAlign: 'center' }}>\r\n                      Student\r\n                    </Table.HeaderCell>\r\n                    <Table.HeaderCell style={{ textAlign: 'center' }}>\r\n                      TA/Professor\r\n                    </Table.HeaderCell>\r\n                  </Table.Row>\r\n                </Table.Header>\r\n\r\n                <Table.Body>\r\n                  {this.state.classRoles.map((c) => (\r\n                    <Table.Row key={c.id}>\r\n                      <Table.Cell style={{ textAlign: 'center' }}>\r\n                        <Header as=\"h4\">\r\n                          <Header.Content>{c.name}</Header.Content>\r\n                        </Header>\r\n                      </Table.Cell>\r\n                      <Table.Cell style={{ textAlign: 'center' }}>\r\n                        <Checkbox\r\n                          disabled={\r\n                            c.role === 'Professor' || c.role === 'TA'\r\n                          }\r\n                          checked={c.role === 'Student'}\r\n                          onChange={() =>\r\n                            this.setState({\r\n                              classRoles: this.state.classRoles.map((cc) => {\r\n                                if (\r\n                                  cc.id === c.id &&\r\n                                  (cc.role === '' ||\r\n                                    cc.role === 'Student')\r\n                                ) {\r\n                                  return {\r\n                                    ...cc,\r\n                                    role:\r\n                                      cc.role === '' ? 'Student' : '',\r\n                                  }\r\n                                }\r\n                                return cc\r\n                              }),\r\n                            })\r\n                          }\r\n                        />\r\n                      </Table.Cell>\r\n                      <Table.Cell style={{ textAlign: 'center' }}>\r\n                        {this.getTACell(c.role)}\r\n                      </Table.Cell>\r\n                    </Table.Row>\r\n                  ))}\r\n                </Table.Body>\r\n              </Table>\r\n            </div>\r\n\r\n            <div\r\n              style={{\r\n                textAlign: 'center',\r\n                width: '70%',\r\n                height: '70%',\r\n                margin: 'auto',\r\n                padding: '5%',\r\n              }}\r\n            >\r\n              <Button\r\n                color=\"teal\"\r\n                style={{ width: '50%', fontSize: '1vw' }}\r\n                onClick={this.handleSubmit}\r\n                content={'Done'}\r\n              />\r\n            </div>\r\n          </Modal.Content>\r\n        </Modal>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default ModifyClassesModal\r\n"]},"metadata":{},"sourceType":"module"}