{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nvar __jsx = React.createElement;\nimport React from 'react';\nimport * as yup from 'yup';\nimport { useRouter } from 'next/router';\nimport { Formik } from 'formik';\nimport { Button, Form, Grid, Header, Message, Segment } from 'semantic-ui-react';\nimport { useAuth } from '../components/authProvider';\nimport { NotificationContainer, NotificationManager } from 'react-notifications';\nvar loginSchema = yup.object({\n  email: yup.string().email().required(),\n  password: yup.string().min(8).required()\n});\n\nfunction LoginPage() {\n  var router = useRouter();\n\n  var _useAuth = useAuth(),\n      login = _useAuth.login;\n\n  var handleLogin = /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(values, _ref) {\n      var setSubmitting, user;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              setSubmitting = _ref.setSubmitting;\n              setSubmitting(true);\n              _context.next = 4;\n              return login(values.email, values.password);\n\n            case 4:\n              user = _context.sent;\n\n              if (!user) {\n                _context.next = 10;\n                break;\n              }\n\n              _context.next = 8;\n              return router.push('/calendar');\n\n            case 8:\n              _context.next = 11;\n              break;\n\n            case 10:\n              NotificationManager.error('Username And/Or Password Are Incorrect');\n\n            case 11:\n              setSubmitting(false);\n\n            case 12:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function handleLogin(_x, _x2) {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n\n  return __jsx(\"div\", null, __jsx(Grid, {\n    textAlign: \"center\",\n    style: {\n      height: '100vh'\n    },\n    verticalAlign: \"middle\"\n  }, __jsx(Grid.Column, {\n    style: {\n      maxWidth: 450,\n      minWidth: 300\n    }\n  }, __jsx(Header, {\n    as: \"h2\",\n    color: \"teal\",\n    textAlign: \"center\"\n  }, \"Mercury | Login\"), __jsx(Formik, {\n    initialValues: {\n      email: '',\n      password: ''\n    },\n    validationSchema: loginSchema,\n    onSubmit: handleLogin\n  }, function (_ref3) {\n    var values = _ref3.values,\n        errors = _ref3.errors,\n        touched = _ref3.touched,\n        isSubmitting = _ref3.isSubmitting,\n        handleChange = _ref3.handleChange,\n        handleBlur = _ref3.handleBlur,\n        handleSubmit = _ref3.handleSubmit;\n    return __jsx(Form, {\n      size: \"large\",\n      onSubmit: handleSubmit\n    }, __jsx(Segment, null, __jsx(Form.Input, {\n      fluid: true,\n      icon: \"user\",\n      iconPosition: \"left\",\n      placeholder: \"Email address\",\n      name: \"email\",\n      value: values.email,\n      onChange: handleChange,\n      onBlur: handleBlur,\n      error: getError(errors, touched, 'email')\n    }), __jsx(Form.Input, {\n      fluid: true,\n      icon: \"lock\",\n      iconPosition: \"left\",\n      placeholder: \"Password\",\n      type: \"password\",\n      name: \"password\",\n      value: values.password,\n      onChange: handleChange,\n      onBlur: handleBlur,\n      error: getError(errors, touched, 'password')\n    }), __jsx(Button, {\n      fluid: true,\n      color: \"teal\",\n      size: \"large\",\n      type: \"submit\",\n      disabled: isSubmitting,\n      loading: isSubmitting\n    }, \"Login\")));\n  }), __jsx(Message, null, \"New to us? \", __jsx(\"a\", {\n    href: \"#\"\n  }, \"Sign Up\")))), __jsx(NotificationContainer, null));\n}\n\nfunction getError(errors, touched, name) {\n  if (errors[name] && touched[name]) {\n    return {\n      content: errors[name]\n    };\n  }\n\n  return null;\n}\n\nexport default LoginPage;","map":null,"metadata":{},"sourceType":"module"}