{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { EventEmitter } from '../components/util/EventEmitter';\nconst url = 'ws://localhost:8080';\nconst role = 'Instructor';\n/**\n * QueueWebSocket controls the web socket business logic for the course queue and\n * functions as a controller for the queue state\n */\n\nexport default class TAWebSocketClient {\n  start({\n    me,\n    courseId,\n    onJoin\n  }) {\n    const {\n      id\n    } = me;\n    this.id = id;\n    this.courseId = courseId;\n    this.onJoin = onJoin;\n    this.connection = new WebSocket(url);\n    this.connection.onopen = this.processConnectionOpen.bind(this);\n    this.connection.onerror = this.processConnectionError.bind(this);\n    this.connection.onmessage = this.processConnectionMessage.bind(this);\n    this.defineEventEmitterCallbacks();\n  }\n\n  defineEventEmitterCallbacks() {\n    EventEmitter.subscribe('greeting', () => {\n      this.connection.send(this.prepareMessage({\n        msgType: 'greeting',\n        msg: this.id\n      }));\n    });\n    EventEmitter.subscribe('signalGetNextStudent', () => {\n      this.getNextStudent();\n    });\n    EventEmitter.subscribe('signalCallOver', () => {\n      this.signalCallOver();\n    });\n    EventEmitter.subscribe('userLeaveGroup', group => {\n      this.connection.send(this.prepareMessage({\n        msgType: 'userLeaveGroup',\n        msg: group\n      }));\n    });\n    EventEmitter.subscribe('userJoinGroup', data => {\n      this.connection.send(this.prepareMessage({\n        msgType: 'userJoinGroup',\n        msg: data\n      }));\n    });\n    EventEmitter.subscribe('classGroupSetChanged', classId => {\n      this.connection.send(this.prepareMessage({\n        msgType: 'classGroupSetChanged',\n        msg: classId\n      }));\n    });\n    EventEmitter.subscribe('sendOutInvite', ({\n      sender,\n      recepientIds,\n      group\n    }) => {\n      recepientIds.forEach(id => {\n        this.sendOutInvite(sender, id, group);\n      });\n    });\n    EventEmitter.subscribe('startLeaderAppointmentProcess', data => {\n      this.connection.send(this.prepareMessage({\n        msgType: 'startLeaderAppointmentProcess',\n        msg: data\n      }));\n    });\n    EventEmitter.subscribe('sendLeaderAppointmentNotification', data => {\n      this.connection.send(this.prepareMessage({\n        msgType: 'leaderAppointmentNotification',\n        msg: data\n      }));\n    });\n    EventEmitter.subscribe('screenShareOn', data => {\n      this.connection.send(this.prepareMessage({\n        msgType: 'screenShareOn',\n        msg: data\n      }));\n    });\n  }\n\n  processConnectionOpen() {\n    this.connection.send(this.prepareMessage({\n      msgType: 'greeting',\n      msg: this.id\n    })); // notify the server which courseId this websocket belongs to\n  }\n\n  processConnectionError(error) {\n    console.log(`WebSocket error: ${error}`);\n  }\n\n  activateTAWaitingModal(studentName) {\n    EventEmitter.publish('activateTAWaitingModal', studentName);\n  }\n\n  removeTAWaitingModalOnTimeout() {\n    EventEmitter.publish('removeTAWaitingModalOnTimeout');\n  }\n\n  removeTAWaitingModalOnAccept() {\n    EventEmitter.publish('removeTAWaitingModalOnAccept');\n  }\n\n  removeTAWaitingModalOnDecline() {\n    EventEmitter.publish('removeTAWaitingModalOnDecline');\n  }\n\n  updateStudentsInQueue(msg) {\n    EventEmitter.publish('updateStudentsInQueue', msg);\n  }\n\n  updateCurrStudent(msg) {\n    EventEmitter.publish('updateCurrStudent', msg);\n  }\n\n  initializeQueueOnGreeting(msg) {\n    EventEmitter.publish('initializeQueueOnGreeting', msg);\n  }\n\n  notifyFetchGroups() {\n    EventEmitter.publish('fetchGroups');\n  }\n\n  activateReceiveInviteModal(msg) {\n    EventEmitter.publish('activateReceiveInviteModal', msg);\n  }\n\n  refreshScreenContainer() {\n    EventEmitter.publish('refreshScreenContainer');\n  }\n\n  changeScreensharer(msg) {\n    EventEmitter.publish('newScreensharer', msg);\n  }\n\n  processConnectionMessage(e) {\n    const {\n      msgType,\n      msg\n    } = JSON.parse(e.data);\n\n    switch (msgType) {\n      case 'greetingAck':\n        this.initializeQueueOnGreeting(msg);\n        break;\n\n      case 'queue':\n        // in this case, the server will send a message indicating the current students in the queue\n        // msg - the new queue\n        this.updateStudentsInQueue(msg);\n        break;\n\n      case 'nextStudentNotified':\n        // in this case, the server lets the TA know that the student has been notified\n        // msg - the name of the student who was notified\n        this.activateTAWaitingModal(msg);\n        break;\n\n      case 'studentTimeout':\n        // in this case, the server lets the TA know that the student has timed out\n        this.removeTAWaitingModalOnTimeout();\n        break;\n\n      case 'studentJoin':\n        // in this case, the TA's invitation to join has been accepted\n        this.removeTAWaitingModalOnAccept();\n        this.onJoin(JSON.parse(msg));\n        break;\n\n      case 'studentDecline':\n        // in this case the student declines the TA's invitation, and the TA's modal closes\n        this.removeTAWaitingModalOnDecline();\n        break;\n\n      case 'currStudentUpdate':\n        this.updateCurrStudent(msg);\n        break;\n\n      case 'fetchGroups':\n        this.notifyFetchGroups();\n        break;\n\n      case 'receiveInviteTA':\n        // in this case, another TA invites you to their group\n        // msg - sender, group\n        this.activateReceiveInviteModal(msg);\n        break;\n\n      case 'newLeaderAppointed':\n        this.refreshScreenContainer();\n        break;\n\n      case 'fetchScreensharer':\n        this.changeScreensharer(msg);\n        break;\n\n      default:\n        throw new Error(`Message ${msg} is incorrectly formatted`);\n    }\n  }\n\n  getNextStudent() {\n    this.connection.send(this.prepareMessage({\n      msgType: 'next',\n      msg: this.id\n    }));\n  }\n\n  signalCallOver() {\n    this.connection.send(this.prepareMessage({\n      msgType: 'callOver',\n      msg: 'callOver'\n    }));\n  }\n\n  sendOutInvite(sender, recepientId, group) {\n    this.connection.send(this.prepareMessage({\n      msgType: 'sendOutInvite',\n      msg: JSON.stringify({\n        sender,\n        recepientId,\n        group\n      })\n    }));\n  }\n\n  prepareMessage(msg) {\n    const {\n      courseId\n    } = this;\n\n    const enrichedPayload = _objectSpread(_objectSpread({}, msg), {}, {\n      courseId,\n      role\n    });\n\n    return JSON.stringify(enrichedPayload);\n  }\n\n}","map":{"version":3,"sources":["C:/Users/ryanj/Documents/mercury/util/taWebSocket.js"],"names":["EventEmitter","url","role","TAWebSocketClient","start","me","courseId","onJoin","id","connection","WebSocket","onopen","processConnectionOpen","bind","onerror","processConnectionError","onmessage","processConnectionMessage","defineEventEmitterCallbacks","subscribe","send","prepareMessage","msgType","msg","getNextStudent","signalCallOver","group","data","classId","sender","recepientIds","forEach","sendOutInvite","error","console","log","activateTAWaitingModal","studentName","publish","removeTAWaitingModalOnTimeout","removeTAWaitingModalOnAccept","removeTAWaitingModalOnDecline","updateStudentsInQueue","updateCurrStudent","initializeQueueOnGreeting","notifyFetchGroups","activateReceiveInviteModal","refreshScreenContainer","changeScreensharer","e","JSON","parse","Error","recepientId","stringify","enrichedPayload"],"mappings":"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","sourcesContent":["import { EventEmitter } from '../components/util/EventEmitter'\nconst url = 'ws://localhost:8080'\nconst role = 'Instructor'\n\n/**\n * QueueWebSocket controls the web socket business logic for the course queue and\n * functions as a controller for the queue state\n */\n\nexport default class TAWebSocketClient {\n  start({ me, courseId, onJoin }) {\n    const { id } = me\n    this.id = id\n    this.courseId = courseId\n    this.onJoin = onJoin\n    this.connection = new WebSocket(url)\n    this.connection.onopen = this.processConnectionOpen.bind(this)\n    this.connection.onerror = this.processConnectionError.bind(this)\n    this.connection.onmessage = this.processConnectionMessage.bind(this)\n    this.defineEventEmitterCallbacks()\n  }\n\n  defineEventEmitterCallbacks() {\n    EventEmitter.subscribe('greeting', () => {\n      this.connection.send(\n        this.prepareMessage({\n          msgType: 'greeting',\n          msg: this.id,\n        })\n      )\n    })\n\n    EventEmitter.subscribe('signalGetNextStudent', () => {\n      this.getNextStudent()\n    })\n\n    EventEmitter.subscribe('signalCallOver', () => {\n      this.signalCallOver()\n    })\n\n    EventEmitter.subscribe('userLeaveGroup', (group) => {\n      this.connection.send(\n        this.prepareMessage({\n          msgType: 'userLeaveGroup',\n          msg: group,\n        })\n      )\n    })\n\n    EventEmitter.subscribe('userJoinGroup', (data) => {\n      this.connection.send(\n        this.prepareMessage({\n          msgType: 'userJoinGroup',\n          msg: data,\n        })\n      )\n    })\n\n    EventEmitter.subscribe('classGroupSetChanged', (classId) => {\n      this.connection.send(\n        this.prepareMessage({\n          msgType: 'classGroupSetChanged',\n          msg: classId,\n        })\n      )\n    })\n\n    EventEmitter.subscribe(\n      'sendOutInvite',\n      ({ sender, recepientIds, group }) => {\n        recepientIds.forEach((id) => {\n          this.sendOutInvite(sender, id, group)\n        })\n      }\n    )\n\n    EventEmitter.subscribe('startLeaderAppointmentProcess', (data) => {\n      this.connection.send(\n        this.prepareMessage({\n          msgType: 'startLeaderAppointmentProcess',\n          msg: data,\n        })\n      )\n    })\n\n    EventEmitter.subscribe('sendLeaderAppointmentNotification', (data) => {\n      this.connection.send(\n        this.prepareMessage({\n          msgType: 'leaderAppointmentNotification',\n          msg: data,\n        })\n      )\n    })\n\n    EventEmitter.subscribe('screenShareOn', (data) => {\n      this.connection.send(\n        this.prepareMessage({\n          msgType: 'screenShareOn',\n          msg: data,\n        })\n      )\n    })\n  }\n\n  processConnectionOpen() {\n    this.connection.send(\n      this.prepareMessage({\n        msgType: 'greeting',\n        msg: this.id,\n      })\n    ) // notify the server which courseId this websocket belongs to\n  }\n\n  processConnectionError(error) {\n    console.log(`WebSocket error: ${error}`)\n  }\n\n  activateTAWaitingModal(studentName) {\n    EventEmitter.publish('activateTAWaitingModal', studentName)\n  }\n\n  removeTAWaitingModalOnTimeout() {\n    EventEmitter.publish('removeTAWaitingModalOnTimeout')\n  }\n\n  removeTAWaitingModalOnAccept() {\n    EventEmitter.publish('removeTAWaitingModalOnAccept')\n  }\n\n  removeTAWaitingModalOnDecline() {\n    EventEmitter.publish('removeTAWaitingModalOnDecline')\n  }\n\n  updateStudentsInQueue(msg) {\n    EventEmitter.publish('updateStudentsInQueue', msg)\n  }\n\n  updateCurrStudent(msg) {\n    EventEmitter.publish('updateCurrStudent', msg)\n  }\n\n  initializeQueueOnGreeting(msg) {\n    EventEmitter.publish('initializeQueueOnGreeting', msg)\n  }\n\n  notifyFetchGroups() {\n    EventEmitter.publish('fetchGroups')\n  }\n\n  activateReceiveInviteModal(msg) {\n    EventEmitter.publish('activateReceiveInviteModal', msg)\n  }\n\n  refreshScreenContainer() {\n    EventEmitter.publish('refreshScreenContainer')\n  }\n\n  changeScreensharer(msg) {\n    EventEmitter.publish('newScreensharer', msg)\n  }\n\n  processConnectionMessage(e) {\n    const { msgType, msg } = JSON.parse(e.data)\n\n    switch (msgType) {\n      case 'greetingAck':\n        this.initializeQueueOnGreeting(msg)\n        break\n\n      case 'queue': // in this case, the server will send a message indicating the current students in the queue\n        // msg - the new queue\n        this.updateStudentsInQueue(msg)\n        break\n\n      case 'nextStudentNotified': // in this case, the server lets the TA know that the student has been notified\n        // msg - the name of the student who was notified\n        this.activateTAWaitingModal(msg)\n        break\n\n      case 'studentTimeout': // in this case, the server lets the TA know that the student has timed out\n        this.removeTAWaitingModalOnTimeout()\n        break\n\n      case 'studentJoin': // in this case, the TA's invitation to join has been accepted\n        this.removeTAWaitingModalOnAccept()\n        this.onJoin(JSON.parse(msg))\n        break\n\n      case 'studentDecline': // in this case the student declines the TA's invitation, and the TA's modal closes\n        this.removeTAWaitingModalOnDecline()\n        break\n\n      case 'currStudentUpdate':\n        this.updateCurrStudent(msg)\n        break\n\n      case 'fetchGroups':\n        this.notifyFetchGroups()\n        break\n\n      case 'receiveInviteTA': // in this case, another TA invites you to their group\n        // msg - sender, group\n        this.activateReceiveInviteModal(msg)\n        break\n\n      case 'newLeaderAppointed':\n        this.refreshScreenContainer()\n        break\n\n        case 'fetchScreensharer':\n          this.changeScreensharer(msg)\n          break\n\n      default:\n        throw new Error(`Message ${msg} is incorrectly formatted`)\n    }\n  }\n\n  getNextStudent() {\n    this.connection.send(\n      this.prepareMessage({\n        msgType: 'next',\n        msg: this.id,\n      })\n    )\n  }\n\n  signalCallOver() {\n    this.connection.send(\n      this.prepareMessage({\n        msgType: 'callOver',\n        msg: 'callOver',\n      })\n    )\n  }\n\n  sendOutInvite(sender, recepientId, group) {\n    this.connection.send(\n      this.prepareMessage({\n        msgType: 'sendOutInvite',\n        msg: JSON.stringify({ sender, recepientId, group }),\n      })\n    )\n  }\n\n  prepareMessage(msg) {\n    const { courseId } = this\n    const enrichedPayload = { ...msg, courseId, role }\n    return JSON.stringify(enrichedPayload)\n  }\n}\n"]},"metadata":{},"sourceType":"module"}