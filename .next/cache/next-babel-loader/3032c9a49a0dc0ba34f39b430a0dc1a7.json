{"ast":null,"code":"var __jsx = React.createElement;\nimport React from 'react';\nimport * as yup from 'yup';\nimport { useRouter } from 'next/router';\nimport { Formik } from 'formik';\nimport { Button, Form, Grid, Header, Message, Segment } from 'semantic-ui-react';\nimport { useAuth } from '../components/authProvider';\nimport { NotificationContainer, NotificationManager } from 'react-notifications';\nimport HeadComponent from '../components/headComponent';\nconst loginSchema = yup.object({\n  email: yup.string().email().required(),\n  password: yup.string().min(8).required()\n});\n\nfunction LoginPage() {\n  const router = useRouter();\n  const {\n    login\n  } = useAuth();\n\n  const handleLogin = async (values, {\n    setSubmitting\n  }) => {\n    setSubmitting(true);\n    const user = await login(values.email, values.password);\n\n    if (user) {\n      await router.push('/calendar');\n    } else {\n      NotificationManager.error('Username And/Or Password Are Incorrect');\n    }\n\n    setSubmitting(false);\n  };\n\n  return __jsx(React.Fragment, null, __jsx(HeadComponent, null), __jsx(\"div\", null, __jsx(Grid, {\n    textAlign: \"center\",\n    style: {\n      height: '100vh'\n    },\n    verticalAlign: \"middle\"\n  }, __jsx(Grid.Column, {\n    style: {\n      maxWidth: 450,\n      minWidth: 300\n    }\n  }, __jsx(Header, {\n    as: \"h2\",\n    color: \"teal\",\n    textAlign: \"center\"\n  }, \"Mercury | Login\"), __jsx(Formik, {\n    initialValues: {\n      email: '',\n      password: ''\n    },\n    validationSchema: loginSchema,\n    onSubmit: handleLogin\n  }, ({\n    values,\n    errors,\n    touched,\n    isSubmitting,\n    handleChange,\n    handleBlur,\n    handleSubmit\n  }) => __jsx(Form, {\n    size: \"large\",\n    onSubmit: handleSubmit\n  }, __jsx(Segment, null, __jsx(Form.Input, {\n    fluid: true,\n    icon: \"user\",\n    iconPosition: \"left\",\n    placeholder: \"Email address\",\n    name: \"email\",\n    value: values.email,\n    onChange: handleChange,\n    onBlur: handleBlur,\n    error: getError(errors, touched, 'email')\n  }), __jsx(Form.Input, {\n    fluid: true,\n    icon: \"lock\",\n    iconPosition: \"left\",\n    placeholder: \"Password\",\n    type: \"password\",\n    name: \"password\",\n    value: values.password,\n    onChange: handleChange,\n    onBlur: handleBlur,\n    error: getError(errors, touched, 'password')\n  }), __jsx(Button, {\n    fluid: true,\n    color: \"teal\",\n    size: \"large\",\n    type: \"submit\",\n    disabled: isSubmitting,\n    loading: isSubmitting\n  }, \"Login\")))), __jsx(Message, null, \"New to us? \", __jsx(\"a\", {\n    href: \"#\"\n  }, \"Sign Up\")))), __jsx(NotificationContainer, null)));\n}\n\nfunction getError(errors, touched, name) {\n  if (errors[name] && touched[name]) {\n    return {\n      content: errors[name]\n    };\n  }\n\n  return null;\n}\n\nexport default LoginPage;","map":{"version":3,"sources":["C:/Users/ryanj/Documents/mercury/pages/login.js"],"names":["React","yup","useRouter","Formik","Button","Form","Grid","Header","Message","Segment","useAuth","NotificationContainer","NotificationManager","HeadComponent","loginSchema","object","email","string","required","password","min","LoginPage","router","login","handleLogin","values","setSubmitting","user","push","error","height","maxWidth","minWidth","errors","touched","isSubmitting","handleChange","handleBlur","handleSubmit","getError","name","content"],"mappings":"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","sourcesContent":["import React from 'react'\r\nimport * as yup from 'yup'\r\nimport { useRouter } from 'next/router'\r\nimport { Formik } from 'formik'\r\nimport { Button, Form, Grid, Header, Message, Segment } from 'semantic-ui-react'\r\nimport { useAuth } from '../components/authProvider'\r\nimport { NotificationContainer, NotificationManager } from 'react-notifications'\r\nimport HeadComponent from '../components/headComponent'\r\n\r\nconst loginSchema = yup.object({\r\n  email: yup.string().email().required(),\r\n  password: yup.string().min(8).required(),\r\n})\r\n\r\nfunction LoginPage() {\r\n  const router = useRouter()\r\n  const { login } = useAuth()\r\n\r\n  const handleLogin = async (values, { setSubmitting }) => {\r\n    setSubmitting(true)\r\n\r\n    const user = await login(values.email, values.password)\r\n\r\n    if (user) {\r\n      await router.push('/calendar')\r\n    } else {\r\n      NotificationManager.error('Username And/Or Password Are Incorrect')\r\n    }\r\n\r\n    setSubmitting(false)\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <HeadComponent />\r\n      <div>\r\n        <Grid\r\n          textAlign=\"center\"\r\n          style={{ height: '100vh' }}\r\n          verticalAlign=\"middle\"\r\n        >\r\n          <Grid.Column style={{ maxWidth: 450, minWidth: 300 }}>\r\n            <Header as=\"h2\" color=\"teal\" textAlign=\"center\">\r\n              Mercury | Login\r\n            </Header>\r\n            <Formik\r\n              initialValues={{ email: '', password: '' }}\r\n              validationSchema={loginSchema}\r\n              onSubmit={handleLogin}\r\n            >\r\n              {({\r\n                values,\r\n                errors,\r\n                touched,\r\n                isSubmitting,\r\n                handleChange,\r\n                handleBlur,\r\n                handleSubmit,\r\n              }) => (\r\n                <Form size=\"large\" onSubmit={handleSubmit}>\r\n                  <Segment>\r\n                    <Form.Input\r\n                      fluid\r\n                      icon=\"user\"\r\n                      iconPosition=\"left\"\r\n                      placeholder=\"Email address\"\r\n                      name=\"email\"\r\n                      value={values.email}\r\n                      onChange={handleChange}\r\n                      onBlur={handleBlur}\r\n                      error={getError(errors, touched, 'email')}\r\n                    />\r\n                    <Form.Input\r\n                      fluid\r\n                      icon=\"lock\"\r\n                      iconPosition=\"left\"\r\n                      placeholder=\"Password\"\r\n                      type=\"password\"\r\n                      name=\"password\"\r\n                      value={values.password}\r\n                      onChange={handleChange}\r\n                      onBlur={handleBlur}\r\n                      error={getError(errors, touched, 'password')}\r\n                    />\r\n\r\n                    <Button\r\n                      fluid\r\n                      color=\"teal\"\r\n                      size=\"large\"\r\n                      type=\"submit\"\r\n                      disabled={isSubmitting}\r\n                      loading={isSubmitting}\r\n                    >\r\n                      Login\r\n                    </Button>\r\n                  </Segment>\r\n                </Form>\r\n              )}\r\n            </Formik>\r\n            <Message>\r\n              New to us? <a href=\"#\">Sign Up</a>\r\n            </Message>\r\n          </Grid.Column>\r\n        </Grid>\r\n        <NotificationContainer />\r\n      </div>\r\n    </>\r\n  )\r\n}\r\n\r\nfunction getError(errors, touched, name) {\r\n  if (errors[name] && touched[name]) {\r\n    return { content: errors[name] }\r\n  }\r\n\r\n  return null\r\n}\r\n\r\nexport default LoginPage\r\n"]},"metadata":{},"sourceType":"module"}