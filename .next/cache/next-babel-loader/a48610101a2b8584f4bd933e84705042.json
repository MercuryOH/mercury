{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { EventEmitter } from '../../util/EventEmitter';\nvar url = 'ws://localhost:8080';\nvar role = 'Instructor';\n/**\r\n * QueueWebSocket controls the web socket business logic for the course queue and\r\n * functions as a controller for the queue state\r\n */\n\nvar TAWebSocketController = /*#__PURE__*/function () {\n  function TAWebSocketController() {\n    _classCallCheck(this, TAWebSocketController);\n  }\n\n  _createClass(TAWebSocketController, [{\n    key: \"start\",\n    value: function start(_ref) {\n      var me = _ref.me,\n          courseId = _ref.courseId,\n          onJoin = _ref.onJoin;\n      var firstName = me.firstName,\n          lastName = me.lastName;\n      this.fullName = \"\".concat(firstName, \" \").concat(lastName);\n      this.courseId = courseId;\n      this.onJoin = onJoin;\n      this.connection = new WebSocket(url);\n      this.connection.onopen = this.processConnectionOpen.bind(this);\n      this.connection.onerror = this.processConnectionError.bind(this);\n      this.connection.onmessage = this.processConnectionMessage.bind(this);\n    }\n  }, {\n    key: \"processConnectionOpen\",\n    value: function processConnectionOpen() {\n      var fullName = this.fullName;\n      this.connection.send(this.prepareMessage({\n        msgType: 'greeting',\n        msg: fullName\n      })); // notify the server which courseId this websocket belongs to\n    }\n  }, {\n    key: \"processConnectionError\",\n    value: function processConnectionError(error) {\n      console.log(\"WebSocket error: \".concat(error));\n    }\n  }, {\n    key: \"activateTAWaitingModal\",\n    value: function activateTAWaitingModal(studentName) {\n      EventEmitter.publish('activateTAWaitingModal', studentName);\n    }\n  }, {\n    key: \"removeTAWaitingModalOnTimeout\",\n    value: function removeTAWaitingModalOnTimeout() {\n      EventEmitter.publish('removeTAWaitingModalOnTimeout');\n    }\n  }, {\n    key: \"removeTAWaitingModalOnAccept\",\n    value: function removeTAWaitingModalOnAccept() {\n      EventEmitter.publish('removeTAWaitingModalOnAccept');\n    }\n  }, {\n    key: \"removeTAWaitingModalOnDecline\",\n    value: function removeTAWaitingModalOnDecline() {\n      EventEmitter.publish('removeTAWaitingModalOnDecline');\n    }\n  }, {\n    key: \"updateStudentsInQueue\",\n    value: function updateStudentsInQueue(msg) {\n      EventEmitter.publish('updateStudentsInQueue', msg);\n    }\n  }, {\n    key: \"updateCurrStudent\",\n    value: function updateCurrStudent(msg) {\n      EventEmitter.publish('updateCurrStudent', msg);\n    }\n  }, {\n    key: \"processConnectionMessage\",\n    value: function processConnectionMessage(e) {\n      var _JSON$parse = JSON.parse(e.data),\n          msgType = _JSON$parse.msgType,\n          msg = _JSON$parse.msg;\n\n      switch (msgType) {\n        case 'queue':\n          // in this case, the server will send a message indicating the current students in the queue\n          // msg - the new queue\n          this.updateStudentsInQueue(msg);\n          break;\n\n        case 'nextStudentNotified':\n          // in this case, the server lets the TA know that the student has been notified\n          // msg - the name of the student who was notified\n          this.activateTAWaitingModal(msg);\n          break;\n\n        case 'studentTimeout':\n          // in this case, the server lets the TA know that the student has timed out\n          this.removeTAWaitingModalOnTimeout();\n          break;\n\n        case 'studentJoin':\n          // in this case, the TA's invitation to join has been accepted\n          this.removeTAWaitingModalOnAccept();\n          this.onJoin(JSON.parse(msg));\n          break;\n\n        case 'studentDecline':\n          // in this case the student declines the TA's invitation, and the TA's modal closes\n          this.removeTAWaitingModalOnDecline();\n          break;\n\n        case 'currStudentUpdate':\n          this.updateCurrStudent(msg);\n          break;\n\n        default:\n          throw new Error(\"Message \".concat(msg, \" is incorrectly formatted\"));\n      }\n    }\n  }, {\n    key: \"getNextStudent\",\n    value: function getNextStudent() {\n      this.connection.send(this.prepareMessage({\n        msgType: 'next',\n        msg: this.fullName\n      }));\n    }\n  }, {\n    key: \"prepareMessage\",\n    value: function prepareMessage(msg) {\n      var courseId = this.courseId;\n\n      var enrichedPayload = _objectSpread(_objectSpread({}, msg), {}, {\n        courseId: courseId,\n        role: role\n      });\n\n      return JSON.stringify(enrichedPayload);\n    }\n  }]);\n\n  return TAWebSocketController;\n}();\n\nexport { TAWebSocketController as default };","map":{"version":3,"sources":["C:/Users/ryanj/Documents/mercury/components/queue/ta/taWebSocket.js"],"names":["EventEmitter","url","role","TAWebSocketController","me","courseId","onJoin","firstName","lastName","fullName","connection","WebSocket","onopen","processConnectionOpen","bind","onerror","processConnectionError","onmessage","processConnectionMessage","send","prepareMessage","msgType","msg","error","console","log","studentName","publish","e","JSON","parse","data","updateStudentsInQueue","activateTAWaitingModal","removeTAWaitingModalOnTimeout","removeTAWaitingModalOnAccept","removeTAWaitingModalOnDecline","updateCurrStudent","Error","enrichedPayload","stringify"],"mappings":"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","sourcesContent":["import { EventEmitter } from '../../util/EventEmitter'\r\n\r\nconst url = 'ws://localhost:8080'\r\nconst role = 'Instructor'\r\n\r\n/**\r\n * QueueWebSocket controls the web socket business logic for the course queue and\r\n * functions as a controller for the queue state\r\n */\r\n\r\nexport default class TAWebSocketController {\r\n  start({ me, courseId, onJoin }) {\r\n    const { firstName, lastName } = me\r\n    this.fullName = `${firstName} ${lastName}`\r\n    this.courseId = courseId\r\n    this.onJoin = onJoin\r\n    this.connection = new WebSocket(url)\r\n    this.connection.onopen = this.processConnectionOpen.bind(this)\r\n    this.connection.onerror = this.processConnectionError.bind(this)\r\n    this.connection.onmessage = this.processConnectionMessage.bind(this)\r\n  }\r\n\r\n  processConnectionOpen() {\r\n    const { fullName } = this\r\n\r\n    this.connection.send(\r\n      this.prepareMessage({\r\n        msgType: 'greeting',\r\n        msg: fullName,\r\n      })\r\n    ) // notify the server which courseId this websocket belongs to\r\n  }\r\n\r\n  processConnectionError(error) {\r\n    console.log(`WebSocket error: ${error}`)\r\n  }\r\n\r\n  activateTAWaitingModal(studentName) {\r\n    EventEmitter.publish('activateTAWaitingModal', studentName)\r\n  }\r\n\r\n  removeTAWaitingModalOnTimeout() {\r\n    EventEmitter.publish('removeTAWaitingModalOnTimeout')\r\n  }\r\n\r\n  removeTAWaitingModalOnAccept() {\r\n    EventEmitter.publish('removeTAWaitingModalOnAccept')\r\n  }\r\n\r\n  removeTAWaitingModalOnDecline() {\r\n    EventEmitter.publish('removeTAWaitingModalOnDecline')\r\n  }\r\n\r\n  updateStudentsInQueue(msg) {\r\n    EventEmitter.publish('updateStudentsInQueue', msg)\r\n  }\r\n\r\n  updateCurrStudent(msg) {\r\n    EventEmitter.publish('updateCurrStudent', msg)\r\n  }\r\n\r\n  processConnectionMessage(e) {\r\n    const { msgType, msg } = JSON.parse(e.data)\r\n\r\n    switch (msgType) {\r\n      case 'queue': // in this case, the server will send a message indicating the current students in the queue\r\n        // msg - the new queue\r\n        this.updateStudentsInQueue(msg)\r\n        break\r\n\r\n      case 'nextStudentNotified': // in this case, the server lets the TA know that the student has been notified\r\n        // msg - the name of the student who was notified\r\n        this.activateTAWaitingModal(msg)\r\n        break\r\n\r\n      case 'studentTimeout': // in this case, the server lets the TA know that the student has timed out\r\n        this.removeTAWaitingModalOnTimeout()\r\n        break\r\n\r\n      case 'studentJoin': // in this case, the TA's invitation to join has been accepted\r\n        this.removeTAWaitingModalOnAccept()\r\n        this.onJoin(JSON.parse(msg))\r\n        break\r\n\r\n      case 'studentDecline': // in this case the student declines the TA's invitation, and the TA's modal closes\r\n        this.removeTAWaitingModalOnDecline()\r\n        break\r\n\r\n      case 'currStudentUpdate':\r\n        this.updateCurrStudent(msg)\r\n        break\r\n\r\n      default:\r\n        throw new Error(`Message ${msg} is incorrectly formatted`)\r\n    }\r\n  }\r\n\r\n  getNextStudent() {\r\n    this.connection.send(\r\n      this.prepareMessage({\r\n        msgType: 'next',\r\n        msg: this.fullName,\r\n      })\r\n    )\r\n  }\r\n\r\n  prepareMessage(msg) {\r\n    const { courseId } = this\r\n    const enrichedPayload = { ...msg, courseId, role }\r\n    return JSON.stringify(enrichedPayload)\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}