{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useEffect, useState } from 'react';\nimport { useRouter } from 'next/router';\nimport dynamic from 'next/dynamic';\nimport Layout from '../../components/layout';\nimport { Button, Accordion, List } from 'semantic-ui-react';\nimport { AuthRequired } from '../../components/authProvider';\nimport Queue from '../../components/queue/queue';\nimport * as api from '../../util/mercuryService';\nimport CreateGroupModal from '../../components/createGroupModal';\nconst Vonage = dynamic(() => import('../../components/vonage'), {\n  ssr: false,\n  loadableGenerated: {\n    webpack: () => [require.resolveWeak('../../components/vonage')],\n    modules: ['../../components/vonage']\n  }\n});\n\nfunction ClassPage() {\n  const router = useRouter();\n  const {\n    0: currGroup,\n    1: setCurrGroup\n  } = useState('bs');\n  const {\n    0: groups,\n    1: setGroups\n  } = useState([]);\n  const {\n    0: classes,\n    1: setClasses\n  } = useState([]);\n  const {\n    0: currentClass,\n    1: setCurrentClass\n  } = useState({\n    id: '',\n    name: 'bob',\n    Groups: []\n  });\n  const {\n    0: vonageCred,\n    1: setVonageCred\n  } = useState(null);\n  const {\n    classId\n  } = router.query;\n\n  const fetchCurrentClass = () => {\n    api.getClassNG(classId).then(currentClass => setCurrentClass(currentClass)).catch(console.error);\n  };\n\n  useEffect(() => {\n    if (!classId) return;\n    fetchCurrentClass();\n  }, [classId]);\n  useEffect(() => {\n    api.getClasses().then(classes => setClasses(classes)).catch(console.error);\n  }, []);\n\n  const handleBack = async () => {\n    await router.push('/calendar');\n  };\n\n  const handleSelectGroup = group => {\n    api.postGroupToken(classId, group.id).then(({\n      token\n    }) => {\n      setVonageCred(null);\n      setVonageCred({\n        sessionId: group.sessionId,\n        token\n      });\n    }).catch(console.error);\n  };\n\n  function getRole() {\n    let userRole = null;\n    classes.forEach(row => {\n      let {\n        id,\n        role\n      } = row;\n\n      if (currentClass.id === Number(id)) {\n        userRole = role;\n      }\n    });\n    return userRole;\n  }\n\n  function getButtonToDisplay() {\n    if (getRole() === null) {\n      return null;\n    }\n\n    if (getRole() === 'Student') {\n      return __jsx(CreateGroupModal, {\n        onCreate: handleCreateGroup\n      });\n    } else {\n      return __jsx(Button, {\n        color: \"teal\",\n        content: \"Modify Discussions\",\n        fluid: true,\n        style: {\n          fontSize: '1vw'\n        }\n      });\n    }\n  }\n\n  function showOffice() {\n    if (getRole() !== 'Student' && getRole() !== null) {\n      return __jsx(\"div\", {\n        style: {\n          paddingLeft: 20\n        }\n      }, __jsx(List, {\n        relaxed: true\n      }, currentClass.Groups.filter(group => group.type === 'office').map(group => __jsx(List.Item, {\n        key: `office`,\n        onClick: () => {\n          handleSelectGroup(group);\n          changeColor(group.id);\n        },\n        style: currGroup == group.id && vonageCred !== null ? clickedGroupsStyle : unClickedGroupsStyle\n      }, __jsx(List.Icon, {\n        name: \"graduation cap\"\n      }), __jsx(List.Content, null, __jsx(List.Header, {\n        as: \"a\"\n      }, \"TA Office\"))))));\n    }\n\n    return null;\n  }\n\n  const handleCreateGroup = async group => {\n    await api.postGroup(classId, group.name, group.type);\n    fetchCurrentClass();\n  };\n\n  const changeColor = groupId => {\n    setCurrGroup(groupId);\n  };\n\n  const unClickedGroupsStyle = {\n    fontSize: '.8vw',\n    textAlign: 'left',\n    width: '75%',\n    marginBottom: '2%',\n    minWidth: '41px'\n  };\n  const clickedGroupsStyle = {\n    fontSize: '.8vw',\n    textAlign: 'left',\n    width: '75%',\n    marginBottom: '2%',\n    minWidth: '41px',\n    background: '#e0e1e2',\n    borderRadius: 10,\n    borderWidth: 1,\n    borderColor: '#fff'\n  };\n  return __jsx(Layout, {\n    left: __jsx(\"div\", {\n      style: {\n        height: '100%',\n        marginLeft: '2.5%'\n      }\n    }, __jsx(Button.Group, {\n      size: \"huge\",\n      style: {\n        marginBottom: 12,\n        width: '100%'\n      },\n      fluid: true\n    }, __jsx(Button, {\n      compact: true,\n      icon: \"angle left\",\n      content: currentClass.name,\n      style: {\n        fontSize: '1.5vw',\n        textAlign: 'left',\n        width: '75%',\n        marginBottom: '2%',\n        minWidth: '41px'\n      },\n      onClick: handleBack\n    }), __jsx(Button, {\n      compact: true,\n      icon: \"setting\",\n      style: {\n        fontSize: '1.5vw',\n        textAlign: 'center',\n        width: '15%',\n        marginBottom: '2%',\n        minWidth: '14px'\n      }\n    })), showOffice(), __jsx(Accordion, {\n      fluid: true,\n      exclusive: false,\n      defaultActiveIndex: [0, 1],\n      style: {\n        fontSize: '1vw',\n        textAlign: 'left',\n        width: '100%',\n        marginBottom: '2%',\n        minWidth: '41px'\n      },\n      panels: [{\n        key: 'discussions',\n        title: 'Discussions',\n        content: {\n          content: __jsx(\"div\", {\n            style: {\n              paddingLeft: 20\n            }\n          }, __jsx(List, {\n            relaxed: true\n          }, currentClass.Groups.filter(group => group.type === 'discussion').map(group => __jsx(List.Item, {\n            key: `discussion_${group.id}`,\n            onClick: () => {\n              handleSelectGroup(group);\n              changeColor(group.id);\n            },\n            style: currGroup == group.id && vonageCred !== null ? clickedGroupsStyle : unClickedGroupsStyle\n          }, __jsx(List.Icon, {\n            name: \"sound\"\n          }), __jsx(List.Content, null, __jsx(List.Header, {\n            as: \"a\"\n          }, group.name))))))\n        }\n      }, {\n        key: 'private-groups',\n        title: 'Private Groups',\n        content: {\n          content: __jsx(\"div\", {\n            style: {\n              paddingLeft: 20\n            }\n          }, __jsx(List, {\n            relaxed: true\n          }, currentClass.Groups.filter(group => group.type === 'group').map(group => __jsx(List.Item, {\n            key: `private_group_${group.id}`,\n            onClick: () => {\n              handleSelectGroup(group);\n              changeColor(group.id);\n            },\n            style: currGroup == group.id && vonageCred !== null ? clickedGroupsStyle : unClickedGroupsStyle\n          }, __jsx(List.Icon, {\n            name: \"lock\"\n          }), __jsx(List.Content, null, __jsx(List.Header, {\n            as: \"a\"\n          }, group.name))))))\n        }\n      }]\n    }), __jsx(\"div\", {\n      style: {\n        position: 'absolute',\n        width: 'calc(100% - 38px)',\n        bottom: 14\n      }\n    }, getButtonToDisplay())),\n    right: __jsx(Queue, null)\n  }, vonageCred && __jsx(Vonage, {\n    sessionId: vonageCred.sessionId,\n    token: vonageCred.token,\n    onLeave: () => setVonageCred(null)\n  }));\n}\n\nexport default AuthRequired(ClassPage);","map":{"version":3,"sources":["C:/Users/ryanj/Documents/mercury/pages/classes/[classId].js"],"names":["React","useEffect","useState","useRouter","dynamic","Layout","Button","Accordion","List","AuthRequired","Queue","api","CreateGroupModal","Vonage","ssr","ClassPage","router","currGroup","setCurrGroup","groups","setGroups","classes","setClasses","currentClass","setCurrentClass","id","name","Groups","vonageCred","setVonageCred","classId","query","fetchCurrentClass","getClassNG","then","catch","console","error","getClasses","handleBack","push","handleSelectGroup","group","postGroupToken","token","sessionId","getRole","userRole","forEach","row","role","Number","getButtonToDisplay","handleCreateGroup","fontSize","showOffice","paddingLeft","filter","type","map","changeColor","clickedGroupsStyle","unClickedGroupsStyle","postGroup","groupId","textAlign","width","marginBottom","minWidth","background","borderRadius","borderWidth","borderColor","height","marginLeft","key","title","content","position","bottom"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react'\r\nimport { useRouter } from 'next/router'\r\nimport dynamic from 'next/dynamic'\r\nimport Layout from '../../components/layout'\r\nimport { Button, Accordion, List } from 'semantic-ui-react'\r\nimport { AuthRequired } from '../../components/authProvider'\r\nimport Queue from '../../components/queue/queue'\r\nimport * as api from '../../util/mercuryService'\r\nimport CreateGroupModal from '../../components/createGroupModal'\r\n\r\nconst Vonage = dynamic(() => import('../../components/vonage'), {\r\n  ssr: false,\r\n})\r\n\r\nfunction ClassPage() {\r\n  const router = useRouter()\r\n  const [currGroup, setCurrGroup] = useState('bs')\r\n\r\n  const [groups, setGroups] = useState([])\r\n  const [classes, setClasses] = useState([])\r\n  const [currentClass, setCurrentClass] = useState({\r\n    id: '',\r\n    name: 'bob',\r\n    Groups: [],\r\n  })\r\n  const [vonageCred, setVonageCred] = useState(null)\r\n  const { classId } = router.query\r\n\r\n  const fetchCurrentClass = () => {\r\n    api\r\n      .getClassNG(classId)\r\n      .then((currentClass) => setCurrentClass(currentClass))\r\n      .catch(console.error)\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (!classId) return\r\n\r\n    fetchCurrentClass()\r\n  }, [classId])\r\n\r\n  useEffect(() => {\r\n    api\r\n      .getClasses()\r\n      .then((classes) => setClasses(classes))\r\n      .catch(console.error)\r\n  }, [])\r\n\r\n  const handleBack = async () => {\r\n    await router.push('/calendar')\r\n  }\r\n\r\n  const handleSelectGroup = (group) => {\r\n    api\r\n      .postGroupToken(classId, group.id)\r\n      .then(({ token }) => {\r\n        setVonageCred(null)\r\n        setVonageCred({ sessionId: group.sessionId, token })\r\n      })\r\n      .catch(console.error)\r\n  }\r\n\r\n  function getRole() {\r\n    let userRole = null\r\n\r\n    classes.forEach((row) => {\r\n      let { id, role } = row\r\n      if (currentClass.id === Number(id)) {\r\n        userRole = role\r\n      }\r\n    })\r\n\r\n    return userRole\r\n  }\r\n\r\n  function getButtonToDisplay() {\r\n    if (getRole() === null) {\r\n      return null\r\n    }\r\n\r\n    if (getRole() === 'Student') {\r\n      return <CreateGroupModal onCreate={handleCreateGroup} />\r\n    } else {\r\n      return (\r\n        <Button\r\n          color=\"teal\"\r\n          content=\"Modify Discussions\"\r\n          fluid\r\n          style={{ fontSize: '1vw' }}\r\n        />\r\n      )\r\n    }\r\n  }\r\n\r\n  function showOffice() {\r\n    if (getRole() !== 'Student' && getRole() !== null) {\r\n      return (\r\n        <div style={{ paddingLeft: 20 }}>\r\n          <List relaxed>\r\n            {currentClass.Groups.filter((group) => group.type === 'office').map(\r\n              (group) => (\r\n                <List.Item\r\n                  key={`office`}\r\n                  onClick={() => {\r\n                    handleSelectGroup(group)\r\n                    changeColor(group.id)\r\n                  }}\r\n                  style={\r\n                    currGroup == group.id && vonageCred !== null\r\n                      ? clickedGroupsStyle\r\n                      : unClickedGroupsStyle\r\n                  }\r\n                >\r\n                  <List.Icon name=\"graduation cap\" />\r\n                  <List.Content>\r\n                    <List.Header as=\"a\">TA Office</List.Header>\r\n                  </List.Content>\r\n                </List.Item>\r\n              )\r\n            )}\r\n          </List>\r\n        </div>\r\n      )\r\n    }\r\n    return null\r\n  }\r\n  const handleCreateGroup = async (group) => {\r\n    await api.postGroup(classId, group.name, group.type)\r\n\r\n    fetchCurrentClass()\r\n  }\r\n\r\n  const changeColor = (groupId) => {\r\n    setCurrGroup(groupId)\r\n  }\r\n\r\n  const unClickedGroupsStyle = {\r\n    fontSize: '.8vw',\r\n    textAlign: 'left',\r\n    width: '75%',\r\n    marginBottom: '2%',\r\n    minWidth: '41px',\r\n  }\r\n  const clickedGroupsStyle = {\r\n    fontSize: '.8vw',\r\n    textAlign: 'left',\r\n    width: '75%',\r\n    marginBottom: '2%',\r\n    minWidth: '41px',\r\n    background: '#e0e1e2',\r\n    borderRadius: 10,\r\n    borderWidth: 1,\r\n    borderColor: '#fff',\r\n  }\r\n\r\n  return (\r\n    <Layout\r\n      left={\r\n        <div style={{ height: '100%', marginLeft: '2.5%' }}>\r\n          <Button.Group\r\n            size=\"huge\"\r\n            style={{ marginBottom: 12, width: '100%' }}\r\n            fluid\r\n          >\r\n            <Button\r\n              compact\r\n              icon=\"angle left\"\r\n              content={currentClass.name}\r\n              style={{\r\n                fontSize: '1.5vw',\r\n                textAlign: 'left',\r\n                width: '75%',\r\n                marginBottom: '2%',\r\n                minWidth: '41px',\r\n              }}\r\n              onClick={handleBack}\r\n            />\r\n            <Button\r\n              compact\r\n              icon=\"setting\"\r\n              style={{\r\n                fontSize: '1.5vw',\r\n                textAlign: 'center',\r\n                width: '15%',\r\n                marginBottom: '2%',\r\n                minWidth: '14px',\r\n              }}\r\n            />\r\n          </Button.Group>\r\n          {showOffice()}\r\n          <Accordion\r\n            fluid\r\n            exclusive={false}\r\n            defaultActiveIndex={[0, 1]}\r\n            style={{\r\n              fontSize: '1vw',\r\n              textAlign: 'left',\r\n              width: '100%',\r\n              marginBottom: '2%',\r\n              minWidth: '41px',\r\n            }}\r\n            panels={[\r\n              {\r\n                key: 'discussions',\r\n                title: 'Discussions',\r\n                content: {\r\n                  content: (\r\n                    <div style={{ paddingLeft: 20 }}>\r\n                      <List relaxed>\r\n                        {currentClass.Groups.filter(\r\n                          (group) => group.type === 'discussion'\r\n                        ).map((group) => (\r\n                          <List.Item\r\n                            key={`discussion_${group.id}`}\r\n                            onClick={() => {\r\n                              handleSelectGroup(group)\r\n                              changeColor(group.id)\r\n                            }}\r\n                            style={\r\n                              currGroup == group.id && vonageCred !== null\r\n                                ? clickedGroupsStyle\r\n                                : unClickedGroupsStyle\r\n                            }\r\n                          >\r\n                            <List.Icon name=\"sound\" />\r\n                            <List.Content>\r\n                              <List.Header as=\"a\">{group.name}</List.Header>\r\n                            </List.Content>\r\n                          </List.Item>\r\n                        ))}\r\n                      </List>\r\n                    </div>\r\n                  ),\r\n                },\r\n              },\r\n              {\r\n                key: 'private-groups',\r\n                title: 'Private Groups',\r\n                content: {\r\n                  content: (\r\n                    <div style={{ paddingLeft: 20 }}>\r\n                      <List relaxed>\r\n                        {currentClass.Groups.filter(\r\n                          (group) => group.type === 'group'\r\n                        ).map((group) => (\r\n                          <List.Item\r\n                            key={`private_group_${group.id}`}\r\n                            onClick={() => {\r\n                              handleSelectGroup(group)\r\n                              changeColor(group.id)\r\n                            }}\r\n                            style={\r\n                              currGroup == group.id && vonageCred !== null\r\n                                ? clickedGroupsStyle\r\n                                : unClickedGroupsStyle\r\n                            }\r\n                          >\r\n                            <List.Icon name=\"lock\" />\r\n                            <List.Content>\r\n                              <List.Header as=\"a\">{group.name}</List.Header>\r\n                            </List.Content>\r\n                          </List.Item>\r\n                        ))}\r\n                      </List>\r\n                    </div>\r\n                  ),\r\n                },\r\n              },\r\n            ]}\r\n          />\r\n          <div\r\n            style={{\r\n              position: 'absolute',\r\n              width: 'calc(100% - 38px)',\r\n              bottom: 14,\r\n            }}\r\n          >\r\n            {getButtonToDisplay()}\r\n          </div>\r\n        </div>\r\n      }\r\n      right={<Queue />}\r\n    >\r\n      {vonageCred && (\r\n        <Vonage\r\n          sessionId={vonageCred.sessionId}\r\n          token={vonageCred.token}\r\n          onLeave={() => setVonageCred(null)}\r\n        />\r\n      )}\r\n    </Layout>\r\n  )\r\n}\r\n\r\nexport default AuthRequired(ClassPage)\r\n"]},"metadata":{},"sourceType":"module"}