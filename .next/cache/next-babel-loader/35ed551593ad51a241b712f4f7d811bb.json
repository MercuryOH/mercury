{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport * as api from '../../util/mercuryService';\nimport StudentQueueView from './student/studentQueueView';\nimport TAQueueView from './ta/taQueueView';\n\nclass Queue extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      isDataLoaded: false,\n      me: {},\n      classData: [],\n      office: {},\n      currentGroup: this.props.currentGroup\n    };\n  }\n\n  componentDidMount() {\n    this.courseId = Number(window.location.href.split('/')[4]);\n    let me = {};\n    let classData = {};\n    let office = {};\n    api.getMe().then(meData => {\n      me = meData;\n    }).then(() => api.getClasses()).then(classPayload => {\n      classData = classPayload;\n    }).then(() => api.getClass(this.courseId)).then(cclass => {\n      office = cclass.groups.find(group => group.type === 'office');\n    }).then(() => this.setState({\n      me,\n      classData,\n      office,\n      isDataLoaded: true\n    }));\n  }\n\n  componentWillReceiveProps(nextProps) {\n    this.setState({\n      currentGroup: nextProps.currentGroup\n    });\n  }\n\n  getRoleForClass() {\n    const {\n      classData\n    } = this.state;\n    let userRole = null;\n    classData.forEach(row => {\n      let {\n        id,\n        role\n      } = row;\n\n      if (this.courseId === Number(id)) {\n        userRole = role;\n      }\n    });\n    return userRole;\n  }\n\n  render() {\n    const {\n      isDataLoaded,\n      me,\n      classData,\n      office\n    } = this.state;\n\n    if (!isDataLoaded) {\n      return null;\n    }\n\n    if (this.getRoleForClass() === 'Student') {\n      console.log(this.state.currentGroup);\n      return __jsx(StudentQueueView, {\n        me: me,\n        classData: classData,\n        onJoin: this.props.onJoin,\n        office: office // onInvite={this.props.onInvite}\n        ,\n        currentGroup: this.state.currentGroup\n      });\n    }\n\n    return __jsx(TAQueueView, {\n      me: me,\n      classData: classData,\n      onJoin: this.props.onJoin\n    });\n  }\n\n}\n\nQueue.propTypes = {\n  onJoin: PropTypes.func.isRequired\n};\nexport default Queue;","map":{"version":3,"sources":["C:/Users/ryanj/Documents/mercury/components/queue/queue.js"],"names":["React","Component","PropTypes","api","StudentQueueView","TAQueueView","Queue","constructor","props","state","isDataLoaded","me","classData","office","currentGroup","componentDidMount","courseId","Number","window","location","href","split","getMe","then","meData","getClasses","classPayload","getClass","cclass","groups","find","group","type","setState","componentWillReceiveProps","nextProps","getRoleForClass","userRole","forEach","row","id","role","render","console","log","onJoin","propTypes","func","isRequired"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport * as api from '../../util/mercuryService'\r\nimport StudentQueueView from './student/studentQueueView'\r\nimport TAQueueView from './ta/taQueueView'\r\n\r\nclass Queue extends Component {\r\n  constructor(props) {\r\n    super(props)\r\n    this.state = {\r\n      isDataLoaded: false,\r\n      me: {},\r\n      classData: [],\r\n      office: {},\r\n      currentGroup: this.props.currentGroup,\r\n    }\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.courseId = Number(window.location.href.split('/')[4])\r\n\r\n    let me = {}\r\n    let classData = {}\r\n    let office = {}\r\n\r\n    api\r\n      .getMe()\r\n      .then((meData) => {\r\n        me = meData\r\n      })\r\n      .then(() => api.getClasses())\r\n      .then((classPayload) => {\r\n        classData = classPayload\r\n      })\r\n\r\n      .then(() => api.getClass(this.courseId))\r\n      .then((cclass) => {\r\n        office = cclass.groups.find((group) => group.type === 'office')\r\n      })\r\n\r\n      .then(() => this.setState({ me, classData, office, isDataLoaded: true }))\r\n  }\r\n\r\n  componentWillReceiveProps(nextProps) {\r\n    this.setState({ currentGroup: nextProps.currentGroup })\r\n  }\r\n\r\n  getRoleForClass() {\r\n    const { classData } = this.state\r\n    let userRole = null\r\n\r\n    classData.forEach((row) => {\r\n      let { id, role } = row\r\n      if (this.courseId === Number(id)) {\r\n        userRole = role\r\n      }\r\n    })\r\n\r\n    return userRole\r\n  }\r\n\r\n  render() {\r\n    const { isDataLoaded, me, classData, office } = this.state\r\n    if (!isDataLoaded) {\r\n      return null\r\n    }\r\n\r\n    if (this.getRoleForClass() === 'Student') {\r\n      console.log(this.state.currentGroup)\r\n      return (\r\n        <StudentQueueView\r\n          me={me}\r\n          classData={classData}\r\n          onJoin={this.props.onJoin}\r\n          office={office}\r\n          // onInvite={this.props.onInvite}\r\n          currentGroup={this.state.currentGroup}\r\n        />\r\n      )\r\n    }\r\n\r\n    return (\r\n      <TAQueueView me={me} classData={classData} onJoin={this.props.onJoin} />\r\n    )\r\n  }\r\n}\r\n\r\nQueue.propTypes = {\r\n  onJoin: PropTypes.func.isRequired,\r\n}\r\n\r\nexport default Queue\r\n"]},"metadata":{},"sourceType":"module"}