{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { EventEmitter } from '../../util/EventEmitter';\nconst url = 'ws://localhost:8080';\nconst role = 'Instructor';\n/**\r\n * QueueWebSocket controls the web socket business logic for the course queue and\r\n * functions as a controller for the queue state\r\n */\n\nexport default class TAWebSocketController {\n  start({\n    me,\n    courseId,\n    onJoin\n  }) {\n    const {\n      firstName,\n      lastName\n    } = me;\n    this.fullName = `${firstName} ${lastName}`;\n    this.courseId = courseId;\n    this.onJoin = onJoin;\n    this.connection = new WebSocket(url);\n    this.connection.onopen = this.processConnectionOpen.bind(this);\n    this.connection.onerror = this.processConnectionError.bind(this);\n    this.connection.onmessage = this.processConnectionMessage.bind(this);\n  }\n\n  processConnectionOpen() {\n    const {\n      fullName\n    } = this;\n    this.connection.send(this.prepareMessage({\n      msgType: 'greeting',\n      msg: fullName\n    })); // notify the server which courseId this websocket belongs to\n  }\n\n  processConnectionError(error) {\n    console.log(`WebSocket error: ${error}`);\n  }\n\n  activateTAWaitingModal(studentName) {\n    EventEmitter.publish('activateTAWaitingModal', studentName);\n  }\n\n  removeTAWaitingModalOnTimeout() {\n    EventEmitter.publish('removeTAWaitingModalOnTimeout');\n  }\n\n  removeTAWaitingModalOnAccept() {\n    EventEmitter.publish('removeTAWaitingModalOnAccept');\n  }\n\n  removeTAWaitingModalOnDecline() {\n    EventEmitter.publish('removeTAWaitingModalOnDecline');\n  }\n\n  updateStudentsInQueue(msg) {\n    EventEmitter.publish('updateStudentsInQueue', msg);\n  }\n\n  updateCurrStudent(msg) {\n    EventEmitter.publish('updateCurrStudent', msg);\n  }\n\n  processConnectionMessage(e) {\n    const {\n      msgType,\n      msg\n    } = JSON.parse(e.data);\n\n    switch (msgType) {\n      case 'queue':\n        // in this case, the server will send a message indicating the current students in the queue\n        // msg - the new queue\n        this.updateStudentsInQueue(msg);\n        break;\n\n      case 'nextStudentNotified':\n        // in this case, the server lets the TA know that the student has been notified\n        // msg - the name of the student who was notified\n        this.activateTAWaitingModal(msg);\n        break;\n\n      case 'studentTimeout':\n        // in this case, the server lets the TA know that the student has timed out\n        this.removeTAWaitingModalOnTimeout();\n        break;\n\n      case 'studentJoin':\n        // in this case, the TA's invitation to join has been accepted\n        this.removeTAWaitingModalOnAccept();\n        this.onJoin(JSON.parse(msg));\n        break;\n\n      case 'studentDecline':\n        // in this case the student declines the TA's invitation, and the TA's modal closes\n        this.removeTAWaitingModalOnDecline();\n        break;\n\n      case 'currStudentUpdate':\n        this.updateCurrStudent(msg);\n        break;\n\n      default:\n        throw new Error(`Message ${msg} is incorrectly formatted`);\n    }\n  }\n\n  getNextStudent() {\n    this.connection.send(this.prepareMessage({\n      msgType: 'next',\n      msg: this.fullName\n    }));\n  }\n\n  prepareMessage(msg) {\n    const {\n      courseId\n    } = this;\n\n    const enrichedPayload = _objectSpread(_objectSpread({}, msg), {}, {\n      courseId,\n      role\n    });\n\n    return JSON.stringify(enrichedPayload);\n  }\n\n}","map":{"version":3,"sources":["C:/Users/ryanj/Documents/mercury/components/queue/ta/taWebSocket.js"],"names":["EventEmitter","url","role","TAWebSocketController","start","me","courseId","onJoin","firstName","lastName","fullName","connection","WebSocket","onopen","processConnectionOpen","bind","onerror","processConnectionError","onmessage","processConnectionMessage","send","prepareMessage","msgType","msg","error","console","log","activateTAWaitingModal","studentName","publish","removeTAWaitingModalOnTimeout","removeTAWaitingModalOnAccept","removeTAWaitingModalOnDecline","updateStudentsInQueue","updateCurrStudent","e","JSON","parse","data","Error","getNextStudent","enrichedPayload","stringify"],"mappings":"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","sourcesContent":["import { EventEmitter } from '../../util/EventEmitter'\r\n\r\nconst url = 'ws://localhost:8080'\r\nconst role = 'Instructor'\r\n\r\n/**\r\n * QueueWebSocket controls the web socket business logic for the course queue and\r\n * functions as a controller for the queue state\r\n */\r\n\r\nexport default class TAWebSocketController {\r\n  start({ me, courseId, onJoin }) {\r\n    const { firstName, lastName } = me\r\n    this.fullName = `${firstName} ${lastName}`\r\n    this.courseId = courseId\r\n    this.onJoin = onJoin\r\n    this.connection = new WebSocket(url)\r\n    this.connection.onopen = this.processConnectionOpen.bind(this)\r\n    this.connection.onerror = this.processConnectionError.bind(this)\r\n    this.connection.onmessage = this.processConnectionMessage.bind(this)\r\n  }\r\n\r\n  processConnectionOpen() {\r\n    const { fullName } = this\r\n\r\n    this.connection.send(\r\n      this.prepareMessage({\r\n        msgType: 'greeting',\r\n        msg: fullName,\r\n      })\r\n    ) // notify the server which courseId this websocket belongs to\r\n  }\r\n\r\n  processConnectionError(error) {\r\n    console.log(`WebSocket error: ${error}`)\r\n  }\r\n\r\n  activateTAWaitingModal(studentName) {\r\n    EventEmitter.publish('activateTAWaitingModal', studentName)\r\n  }\r\n\r\n  removeTAWaitingModalOnTimeout() {\r\n    EventEmitter.publish('removeTAWaitingModalOnTimeout')\r\n  }\r\n\r\n  removeTAWaitingModalOnAccept() {\r\n    EventEmitter.publish('removeTAWaitingModalOnAccept')\r\n  }\r\n\r\n  removeTAWaitingModalOnDecline() {\r\n    EventEmitter.publish('removeTAWaitingModalOnDecline')\r\n  }\r\n\r\n  updateStudentsInQueue(msg) {\r\n    EventEmitter.publish('updateStudentsInQueue', msg)\r\n  }\r\n\r\n  updateCurrStudent(msg) {\r\n    EventEmitter.publish('updateCurrStudent', msg)\r\n  }\r\n\r\n  processConnectionMessage(e) {\r\n    const { msgType, msg } = JSON.parse(e.data)\r\n\r\n    switch (msgType) {\r\n      case 'queue': // in this case, the server will send a message indicating the current students in the queue\r\n        // msg - the new queue\r\n        this.updateStudentsInQueue(msg)\r\n        break\r\n\r\n      case 'nextStudentNotified': // in this case, the server lets the TA know that the student has been notified\r\n        // msg - the name of the student who was notified\r\n        this.activateTAWaitingModal(msg)\r\n        break\r\n\r\n      case 'studentTimeout': // in this case, the server lets the TA know that the student has timed out\r\n        this.removeTAWaitingModalOnTimeout()\r\n        break\r\n\r\n      case 'studentJoin': // in this case, the TA's invitation to join has been accepted\r\n        this.removeTAWaitingModalOnAccept()\r\n        this.onJoin(JSON.parse(msg))\r\n        break\r\n\r\n      case 'studentDecline': // in this case the student declines the TA's invitation, and the TA's modal closes\r\n        this.removeTAWaitingModalOnDecline()\r\n        break\r\n\r\n      case 'currStudentUpdate':\r\n        this.updateCurrStudent(msg)\r\n        break\r\n\r\n      default:\r\n        throw new Error(`Message ${msg} is incorrectly formatted`)\r\n    }\r\n  }\r\n\r\n  getNextStudent() {\r\n    this.connection.send(\r\n      this.prepareMessage({\r\n        msgType: 'next',\r\n        msg: this.fullName,\r\n      })\r\n    )\r\n  }\r\n\r\n  prepareMessage(msg) {\r\n    const { courseId } = this\r\n    const enrichedPayload = { ...msg, courseId, role }\r\n    return JSON.stringify(enrichedPayload)\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}