{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { Component } from 'react';\nimport { Accordion, List, Button } from 'semantic-ui-react';\nexport default class DropDown extends Component {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"state\", {\n      activeIndexs: []\n    });\n\n    _defineProperty(this, \"handleClick\", (e, titleProps) => {\n      const {\n        index\n      } = titleProps;\n      const {\n        activeIndexs\n      } = this.state;\n      const newIndex = activeIndexs;\n      const currentIndexPosition = activeIndexs.indexOf(index);\n\n      if (currentIndexPosition > -1) {\n        newIndex.splice(currentIndexPosition, 1);\n      } else {\n        newIndex.push(index);\n      }\n\n      this.setState({\n        activeIndexs: newIndex\n      });\n    });\n  }\n\n  render() {\n    const {\n      activeIndexs\n    } = this.state;\n    const colors = ['red', 'orange', 'yellow', 'olive', 'green', 'teal', 'blue', 'violet', 'purple', 'pink', 'brown', 'gray', 'black'];\n    const sClasses = ['CS 2110', 'CS 2800', 'MATH 2940'];\n    const taClasses = ['CS 1110'];\n\n    function zip() {\n      var args = [].slice.call(arguments);\n      var shortest = args.length == 0 ? [] : args.reduce(function (a, b) {\n        return a.length < b.length ? a : b;\n      });\n      return shortest.map(function (_, i) {\n        return args.map(function (array) {\n          return array[i];\n        });\n      });\n    }\n\n    return __jsx(\"div\", null, __jsx(Accordion, {\n      fluid: true,\n      exclusive: false,\n      defaultActiveIndex: [0, 1],\n      panels: [{\n        key: 'student',\n        title: 'Student',\n        content: {\n          content: __jsx(\"div\", null, __jsx(List, {\n            relaxed: true\n          }, zip(colors, sClasses).map(zipped => __jsx(List.Item, null, __jsx(List.Content, null, __jsx(Button, {\n            color: zipped[0],\n            content: zipped[1],\n            style: {\n              fontSize: '1vw',\n              width: '100%'\n            }\n          }))))))\n        }\n      }, {\n        key: 'ta',\n        title: 'TA',\n        content: {\n          content: __jsx(\"div\", null, __jsx(List, {\n            relaxed: true\n          }, zip(colors, taClasses).map(zipped => __jsx(List.Item, null, __jsx(List.Content, null, __jsx(Button, {\n            color: zipped[0],\n            content: zipped[1],\n            style: {\n              width: '100%'\n            }\n          }))))))\n        }\n      }]\n    }));\n  }\n\n}","map":{"version":3,"sources":["C:/Users/ryanj/Documents/mercury/components/dropDown.js"],"names":["React","Component","Accordion","List","Button","DropDown","activeIndexs","e","titleProps","index","state","newIndex","currentIndexPosition","indexOf","splice","push","setState","render","colors","sClasses","taClasses","zip","args","slice","call","arguments","shortest","length","reduce","a","b","map","_","i","array","key","title","content","zipped","fontSize","width"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport { Accordion, List, Button} from 'semantic-ui-react'\n\nexport default class DropDown extends Component {\n  state = { activeIndexs: [] }\n\n  handleClick = (e, titleProps) => {\n    const { index } = titleProps\n    const { activeIndexs } = this.state\n    const newIndex = activeIndexs\n\n    const currentIndexPosition = activeIndexs.indexOf(index)\n    if (currentIndexPosition > -1) {\n      newIndex.splice(currentIndexPosition, 1)\n    } else {\n      newIndex.push(index)\n    }\n\n    this.setState({ activeIndexs: newIndex })\n  }\n\n  render() {\n    const { activeIndexs } = this.state\n\n    const colors = [\n      'red',\n      'orange',\n      'yellow',\n      'olive',\n      'green',\n      'teal',\n      'blue',\n      'violet',\n      'purple',\n      'pink',\n      'brown',\n      'gray',\n      'black',\n    ]\n\n    const sClasses = [\n      'CS 2110',\n      'CS 2800',\n      'MATH 2940',\n    ]\n\n    const taClasses = [\n      'CS 1110',\n    ]\n\n    function zip() {\n      var args = [].slice.call(arguments);\n      var shortest = args.length==0 ? [] : args.reduce(function(a,b){\n        return a.length<b.length ? a : b\n      });\n\n      return shortest.map(function(_,i){\n        return args.map(function(array){return array[i]})\n      });\n\n    }\n\n    return (\n      <div>\n        {/* <Accordion>\n          <Accordion.Title\n            active={activeIndexs.includes(0)}\n            index={0}\n            onClick={this.handleClick}\n          >\n            <Icon name=\"dropdown\" style = {{fontSize: '1vw', width: '20%', float: 'left'}}/>\n            <p style = {{fontSize: '1vw', width: '75%', float: 'left', marginBottom: '4%'}}>Student</p>\n          </Accordion.Title>\n          <Accordion.Content active={activeIndexs.includes(0)}>\n            <div className=\"ui selection list\" style = {{fontSize: '1vw', width: '100%'}}>\n              <a className=\"item\">\n                <div style = {{fontSize: '1vw', width: '100%', marginBottom: '4%'}} className=\"ui blue horizontal label\">CS 2110</div>\n              </a>\n              <a className=\"item\">\n                <div style = {{fontSize: '1vw', width: '100%', marginBottom: '4%'}} className=\"ui green horizontal label\">CS 2800</div>\n              </a>\n              <a className=\"item\">\n                <div style = {{fontSize: '1vw', width: '100%', marginBottom: '4%'}} className=\"ui purple horizontal label\">Math 2940</div>\n              </a>\n            </div>\n          </Accordion.Content>\n\n          <Accordion.Title\n            active={activeIndexs.includes(1)}\n            index={1}\n            onClick={this.handleClick}\n          >\n            <Icon style = {{fontSize: '1vw', width: '20%', float: 'left'}} name=\"dropdown\" />\n            <p style = {{fontSize: '1vw', width: '75%', float: 'left', marginBottom: '4%'}}>TA</p>\n          </Accordion.Title>\n          <Accordion.Content active={activeIndexs.includes(1)}>\n            <div style = {{fontSize: '1vw', width: '100%'}} className=\"ui selection list\">\n              <a className=\"item\">\n                <div style = {{fontSize: '1vw', width: '100%', marginBottom: '4%'}} className=\"ui orange horizontal label\">CS 1110</div>\n              </a>\n            </div>\n          </Accordion.Content>\n        </Accordion> */}\n        <Accordion\n          fluid\n          exclusive={false}\n          defaultActiveIndex={[0, 1]}\n          panels={[\n            {\n              key: 'student',\n              title: 'Student',\n              content: {\n                content: (\n                  <div>\n                    <List relaxed>\n                      {zip(colors, sClasses).map((zipped) => (\n                        <List.Item>\n                          <List.Content>\n                            <Button color={zipped[0]} content = {zipped[1]} style={{fontSize: '1vw', width: '100%'}}></Button>\n                          </List.Content>\n                        </List.Item>\n                      ))}\n                    </List>\n                  </div>\n                ),\n              },\n            },\n            {\n              key: 'ta',\n              title: 'TA',\n              content: {\n                content: (\n                  <div>\n                    <List relaxed>\n                    {zip(colors, taClasses).map((zipped) => (\n                      <List.Item>\n                        <List.Content>\n                          <Button color={zipped[0]} content = {zipped[1]} style={{width: '100%'}}></Button>\n                        </List.Content>\n                      </List.Item>\n                    ))}\n                    </List>\n                  </div>\n                ),\n              },\n            },\n          ]}\n        />\n      </div>\n    )\n  }\n}\n"]},"metadata":{},"sourceType":"module"}