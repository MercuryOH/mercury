{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { EventEmitter } from '../components/util/EventEmitter';\nvar url = 'ws://localhost:8080';\nvar role = 'Instructor';\n/**\r\n * QueueWebSocket controls the web socket business logic for the course queue and\r\n * functions as a controller for the queue state\r\n */\n\nvar TAWebSocketClient = /*#__PURE__*/function () {\n  function TAWebSocketClient() {\n    _classCallCheck(this, TAWebSocketClient);\n  }\n\n  _createClass(TAWebSocketClient, [{\n    key: \"start\",\n    value: function start(_ref) {\n      var me = _ref.me,\n          courseId = _ref.courseId,\n          onJoin = _ref.onJoin;\n      var id = me.id;\n      this.id = id;\n      this.courseId = courseId;\n      this.onJoin = onJoin;\n      this.connection = new WebSocket(url);\n      this.connection.onopen = this.processConnectionOpen.bind(this);\n      this.connection.onerror = this.processConnectionError.bind(this);\n      this.connection.onmessage = this.processConnectionMessage.bind(this);\n      this.defineEventEmitterCallbacks();\n    }\n  }, {\n    key: \"defineEventEmitterCallbacks\",\n    value: function defineEventEmitterCallbacks() {\n      var _this = this;\n\n      EventEmitter.subscribe('greeting', function () {\n        _this.connection.send(_this.prepareMessage({\n          msgType: 'greeting',\n          msg: _this.id\n        }));\n      });\n      EventEmitter.subscribe('signalGetNextStudent', function () {\n        _this.getNextStudent();\n      });\n      EventEmitter.subscribe('signalCallOver', function () {\n        _this.signalCallOver();\n      });\n      EventEmitter.subscribe('userLeaveGroup', function (group) {\n        _this.connection.send(_this.prepareMessage({\n          msgType: 'userLeaveGroup',\n          msg: group\n        }));\n      });\n      EventEmitter.subscribe('userJoinGroup', function (data) {\n        _this.connection.send(_this.prepareMessage({\n          msgType: 'userJoinGroup',\n          msg: data\n        }));\n      });\n      EventEmitter.subscribe('classGroupSetChanged', function (classId) {\n        _this.connection.send(_this.prepareMessage({\n          msgType: 'classGroupSetChanged',\n          msg: classId\n        }));\n      });\n      EventEmitter.subscribe('sendOutInvite', function (_ref2) {\n        var sender = _ref2.sender,\n            recepientIds = _ref2.recepientIds,\n            group = _ref2.group;\n        recepientIds.forEach(function (id) {\n          _this.sendOutInvite(sender, id, group);\n        });\n      });\n      EventEmitter.subscribe('bidForLeaderPosition', function (_ref3) {\n        var userId = _ref3.userId,\n            groupId = _ref3.groupId;\n\n        _this.connection.send('bidForLeaderPosition', _this.prepareMessage({\n          msgType: 'bidForLeaderPosition',\n          msg: {\n            newLeader: _this.id,\n            oldLeader: userId,\n            groupId: groupId\n          }\n        }));\n      });\n      EventEmitter.subscribe('screenShareOn', function (data) {\n        _this.connection.send(_this.prepareMessage({\n          msgType: 'screenShareOn',\n          msg: data\n        }));\n      });\n    }\n  }, {\n    key: \"processConnectionOpen\",\n    value: function processConnectionOpen() {\n      this.connection.send(this.prepareMessage({\n        msgType: 'greeting',\n        msg: this.id\n      })); // notify the server which courseId this websocket belongs to\n    }\n  }, {\n    key: \"processConnectionError\",\n    value: function processConnectionError(error) {\n      console.log(\"WebSocket error: \".concat(error));\n    }\n  }, {\n    key: \"activateTAWaitingModal\",\n    value: function activateTAWaitingModal(studentName) {\n      EventEmitter.publish('activateTAWaitingModal', studentName);\n    }\n  }, {\n    key: \"removeTAWaitingModalOnTimeout\",\n    value: function removeTAWaitingModalOnTimeout() {\n      EventEmitter.publish('removeTAWaitingModalOnTimeout');\n    }\n  }, {\n    key: \"removeTAWaitingModalOnAccept\",\n    value: function removeTAWaitingModalOnAccept() {\n      EventEmitter.publish('removeTAWaitingModalOnAccept');\n    }\n  }, {\n    key: \"removeTAWaitingModalOnDecline\",\n    value: function removeTAWaitingModalOnDecline() {\n      EventEmitter.publish('removeTAWaitingModalOnDecline');\n    }\n  }, {\n    key: \"updateStudentsInQueue\",\n    value: function updateStudentsInQueue(msg) {\n      EventEmitter.publish('updateStudentsInQueue', msg);\n    }\n  }, {\n    key: \"updateCurrStudent\",\n    value: function updateCurrStudent(msg) {\n      EventEmitter.publish('updateCurrStudent', msg);\n    }\n  }, {\n    key: \"initializeQueueOnGreeting\",\n    value: function initializeQueueOnGreeting(msg) {\n      EventEmitter.publish('initializeQueueOnGreeting', msg);\n    }\n  }, {\n    key: \"notifyFetchGroups\",\n    value: function notifyFetchGroups() {\n      EventEmitter.publish('fetchGroups');\n    }\n  }, {\n    key: \"activateReceiveInviteModal\",\n    value: function activateReceiveInviteModal(msg) {\n      EventEmitter.publish('activateReceiveInviteModal', msg);\n    }\n  }, {\n    key: \"refreshScreenContainer\",\n    value: function refreshScreenContainer() {\n      EventEmitter.publish('refreshScreenContainer');\n    }\n  }, {\n    key: \"changeScreensharer\",\n    value: function changeScreensharer(msg) {\n      EventEmitter.publish('newScreensharer', msg);\n    }\n  }, {\n    key: \"activateWaitingForNewLeaderModal\",\n    value: function activateWaitingForNewLeaderModal(data) {\n      EventEmitter.publish('activateWaitingForNewLeaderModal', data);\n    }\n  }, {\n    key: \"removeWaitingForNewLeaderModal\",\n    value: function removeWaitingForNewLeaderModal(newLeaderId) {\n      EventEmitter.publish('removeWaitingForNewLeaderModal', newLeaderId);\n    }\n  }, {\n    key: \"processConnectionMessage\",\n    value: function processConnectionMessage(e) {\n      var _JSON$parse = JSON.parse(e.data),\n          msgType = _JSON$parse.msgType,\n          msg = _JSON$parse.msg;\n\n      switch (msgType) {\n        case 'greetingAck':\n          this.initializeQueueOnGreeting(msg);\n          break;\n\n        case 'queue':\n          // in this case, the server will send a message indicating the current students in the queue\n          // msg - the new queue\n          this.updateStudentsInQueue(msg);\n          break;\n\n        case 'nextStudentNotified':\n          // in this case, the server lets the TA know that the student has been notified\n          // msg - the name of the student who was notified\n          this.activateTAWaitingModal(msg);\n          break;\n\n        case 'studentTimeout':\n          // in this case, the server lets the TA know that the student has timed out\n          this.removeTAWaitingModalOnTimeout();\n          break;\n\n        case 'studentJoin':\n          // in this case, the TA's invitation to join has been accepted\n          this.removeTAWaitingModalOnAccept();\n          this.onJoin(JSON.parse(msg));\n          break;\n\n        case 'studentDecline':\n          // in this case the student declines the TA's invitation, and the TA's modal closes\n          this.removeTAWaitingModalOnDecline();\n          break;\n\n        case 'currStudentUpdate':\n          this.updateCurrStudent(msg);\n          break;\n\n        case 'fetchGroups':\n          this.notifyFetchGroups();\n          break;\n\n        case 'receiveInviteTA':\n          // in this case, another TA invites you to their group\n          // msg - sender, group\n          this.activateReceiveInviteModal(msg);\n          break;\n\n        case 'newLeaderAppointed':\n          this.refreshScreenContainer();\n          break;\n\n        case 'fetchScreensharer':\n          this.changeScreensharer(msg);\n          break;\n\n        case 'oldLeaderHasLeft':\n          // msg - the old leader Id and the group id\n          this.activateWaitingForNewLeaderModal(msg);\n          break;\n\n        case 'wonLeaderBid':\n          this.removeWaitingForNewLeaderModal(msg);\n\n        default:\n          throw new Error(\"Message \".concat(msg, \" is incorrectly formatted\"));\n      }\n    }\n  }, {\n    key: \"getNextStudent\",\n    value: function getNextStudent() {\n      this.connection.send(this.prepareMessage({\n        msgType: 'next',\n        msg: this.id\n      }));\n    }\n  }, {\n    key: \"signalCallOver\",\n    value: function signalCallOver() {\n      this.connection.send(this.prepareMessage({\n        msgType: 'callOver',\n        msg: 'callOver'\n      }));\n    }\n  }, {\n    key: \"sendOutInvite\",\n    value: function sendOutInvite(sender, recepientId, group) {\n      this.connection.send(this.prepareMessage({\n        msgType: 'sendOutInvite',\n        msg: JSON.stringify({\n          sender: sender,\n          recepientId: recepientId,\n          group: group\n        })\n      }));\n    }\n  }, {\n    key: \"prepareMessage\",\n    value: function prepareMessage(msg) {\n      var courseId = this.courseId;\n\n      var enrichedPayload = _objectSpread(_objectSpread({}, msg), {}, {\n        courseId: courseId,\n        role: role\n      });\n\n      return JSON.stringify(enrichedPayload);\n    }\n  }]);\n\n  return TAWebSocketClient;\n}();\n\nexport { TAWebSocketClient as default };","map":null,"metadata":{},"sourceType":"module"}