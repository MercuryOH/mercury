{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { EventEmitter } from '../components/util/EventEmitter';\nconst url = 'ws://localhost:8080';\nconst role = 'Instructor';\n/**\r\n * QueueWebSocket controls the web socket business logic for the course queue and\r\n * functions as a controller for the queue state\r\n */\n\nexport default class TAWebSocketClient {\n  start({\n    me,\n    courseId,\n    onJoin\n  }) {\n    const {\n      id\n    } = me;\n    this.id = id;\n    this.courseId = courseId;\n    this.onJoin = onJoin;\n    this.connection = new WebSocket(url);\n    this.connection.onopen = this.processConnectionOpen.bind(this);\n    this.connection.onerror = this.processConnectionError.bind(this);\n    this.connection.onmessage = this.processConnectionMessage.bind(this);\n    this.defineEventEmitterCallbacks();\n  }\n\n  defineEventEmitterCallbacks() {\n    EventEmitter.subscribe('greeting', () => {\n      this.connection.send(this.prepareMessage({\n        msgType: 'greeting',\n        msg: this.id\n      }));\n    });\n    EventEmitter.subscribe('signalGetNextStudent', () => {\n      this.getNextStudent();\n    });\n    EventEmitter.subscribe('signalCallOver', () => {\n      this.signalCallOver();\n    });\n    EventEmitter.subscribe('userLeaveGroup', group => {\n      this.connection.send(this.prepareMessage({\n        msgType: 'userLeaveGroup',\n        msg: group\n      }));\n    });\n    EventEmitter.subscribe('userJoinGroup', data => {\n      this.connection.send(this.prepareMessage({\n        msgType: 'userJoinGroup',\n        msg: data\n      }));\n    });\n    EventEmitter.subscribe('classGroupSetChanged', classId => {\n      this.connection.send(this.prepareMessage({\n        msgType: 'classGroupSetChanged',\n        msg: classId\n      }));\n    });\n    EventEmitter.subscribe('sendOutInvite', ({\n      sender,\n      recepientIds,\n      group\n    }) => {\n      recepientIds.forEach(id => {\n        this.sendOutInvite(sender, id, group);\n      });\n    });\n    EventEmitter.subscribe('bidForLeaderPosition', ({\n      userId,\n      groupId\n    }) => {\n      this.connection.send('bidForLeaderPosition', this.prepareMessage({\n        msgType: 'bidForLeaderPosition',\n        msg: {\n          newLeader: this.id,\n          oldLeader: userId,\n          groupId\n        }\n      }));\n    });\n    EventEmitter.subscribe('screenShareOn', data => {\n      this.connection.send(this.prepareMessage({\n        msgType: 'screenShareOn',\n        msg: data\n      }));\n    });\n  }\n\n  processConnectionOpen() {// this.connection.send(\n    //   this.prepareMessage({\n    //     msgType: 'greeting',\n    //     msg: this.id,\n    //   })\n    // ) // notify the server which courseId this websocket belongs to\n  }\n\n  processConnectionError(error) {\n    console.log(`WebSocket error: ${error}`);\n  }\n\n  activateTAWaitingModal(studentName) {\n    EventEmitter.publish('activateTAWaitingModal', studentName);\n  }\n\n  removeTAWaitingModalOnTimeout() {\n    EventEmitter.publish('removeTAWaitingModalOnTimeout');\n  }\n\n  removeTAWaitingModalOnAccept() {\n    EventEmitter.publish('removeTAWaitingModalOnAccept');\n  }\n\n  removeTAWaitingModalOnDecline() {\n    EventEmitter.publish('removeTAWaitingModalOnDecline');\n  }\n\n  updateStudentsInQueue(msg) {\n    EventEmitter.publish('updateStudentsInQueue', msg);\n  }\n\n  updateCurrStudent(msg) {\n    EventEmitter.publish('updateCurrStudent', msg);\n  }\n\n  initializeQueueOnGreeting(msg) {\n    EventEmitter.publish('initializeQueueOnGreeting', msg);\n  }\n\n  notifyFetchGroups() {\n    EventEmitter.publish('fetchGroups');\n  }\n\n  activateReceiveInviteModal(msg) {\n    EventEmitter.publish('activateReceiveInviteModal', msg);\n  }\n\n  refreshScreenContainer() {\n    EventEmitter.publish('refreshScreenContainer');\n  }\n\n  changeScreensharer(msg) {\n    EventEmitter.publish('newScreensharer', msg);\n  }\n\n  activateWaitingForNewLeaderModal(data) {\n    EventEmitter.publish('activateWaitingForNewLeaderModal', data);\n  }\n\n  removeWaitingForNewLeaderModal(newLeaderId) {\n    EventEmitter.publish('removeWaitingForNewLeaderModal', newLeaderId);\n  }\n\n  processConnectionMessage(e) {\n    const {\n      msgType,\n      msg\n    } = JSON.parse(e.data);\n\n    switch (msgType) {\n      case 'greetingAck':\n        this.initializeQueueOnGreeting(msg);\n        break;\n\n      case 'queue':\n        // in this case, the server will send a message indicating the current students in the queue\n        // msg - the new queue\n        this.updateStudentsInQueue(msg);\n        break;\n\n      case 'nextStudentNotified':\n        // in this case, the server lets the TA know that the student has been notified\n        // msg - the name of the student who was notified\n        this.activateTAWaitingModal(msg);\n        break;\n\n      case 'studentTimeout':\n        // in this case, the server lets the TA know that the student has timed out\n        this.removeTAWaitingModalOnTimeout();\n        break;\n\n      case 'studentJoin':\n        // in this case, the TA's invitation to join has been accepted\n        this.removeTAWaitingModalOnAccept();\n        this.onJoin(JSON.parse(msg));\n        break;\n\n      case 'studentDecline':\n        // in this case the student declines the TA's invitation, and the TA's modal closes\n        this.removeTAWaitingModalOnDecline();\n        break;\n\n      case 'currStudentUpdate':\n        this.updateCurrStudent(msg);\n        break;\n\n      case 'fetchGroups':\n        this.notifyFetchGroups();\n        break;\n\n      case 'receiveInviteTA':\n        // in this case, another TA invites you to their group\n        // msg - sender, group\n        this.activateReceiveInviteModal(msg);\n        break;\n\n      case 'newLeaderAppointed':\n        this.refreshScreenContainer();\n        break;\n\n      case 'fetchScreensharer':\n        this.changeScreensharer(msg);\n        break;\n\n      case 'oldLeaderHasLeft':\n        // msg - the old leader Id and the group id\n        this.activateWaitingForNewLeaderModal(msg);\n        break;\n\n      case 'wonLeaderBid':\n        this.removeWaitingForNewLeaderModal(msg);\n\n      default:\n        throw new Error(`Message ${msg} is incorrectly formatted`);\n    }\n  }\n\n  getNextStudent() {\n    this.connection.send(this.prepareMessage({\n      msgType: 'next',\n      msg: this.id\n    }));\n  }\n\n  signalCallOver() {\n    this.connection.send(this.prepareMessage({\n      msgType: 'callOver',\n      msg: 'callOver'\n    }));\n  }\n\n  sendOutInvite(sender, recepientId, group) {\n    this.connection.send(this.prepareMessage({\n      msgType: 'sendOutInvite',\n      msg: JSON.stringify({\n        sender,\n        recepientId,\n        group\n      })\n    }));\n  }\n\n  prepareMessage(msg) {\n    const {\n      courseId\n    } = this;\n\n    const enrichedPayload = _objectSpread(_objectSpread({}, msg), {}, {\n      courseId,\n      role\n    });\n\n    return JSON.stringify(enrichedPayload);\n  }\n\n}","map":{"version":3,"sources":["C:/Users/ryanj/Documents/mercury/util/taWebSocket.js"],"names":["EventEmitter","url","role","TAWebSocketClient","start","me","courseId","onJoin","id","connection","WebSocket","onopen","processConnectionOpen","bind","onerror","processConnectionError","onmessage","processConnectionMessage","defineEventEmitterCallbacks","subscribe","send","prepareMessage","msgType","msg","getNextStudent","signalCallOver","group","data","classId","sender","recepientIds","forEach","sendOutInvite","userId","groupId","newLeader","oldLeader","error","console","log","activateTAWaitingModal","studentName","publish","removeTAWaitingModalOnTimeout","removeTAWaitingModalOnAccept","removeTAWaitingModalOnDecline","updateStudentsInQueue","updateCurrStudent","initializeQueueOnGreeting","notifyFetchGroups","activateReceiveInviteModal","refreshScreenContainer","changeScreensharer","activateWaitingForNewLeaderModal","removeWaitingForNewLeaderModal","newLeaderId","e","JSON","parse","Error","recepientId","stringify","enrichedPayload"],"mappings":"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","sourcesContent":["import { EventEmitter } from '../components/util/EventEmitter'\r\nconst url = 'ws://localhost:8080'\r\nconst role = 'Instructor'\r\n\r\n/**\r\n * QueueWebSocket controls the web socket business logic for the course queue and\r\n * functions as a controller for the queue state\r\n */\r\n\r\nexport default class TAWebSocketClient {\r\n  start({ me, courseId, onJoin }) {\r\n    const { id } = me\r\n    this.id = id\r\n    this.courseId = courseId\r\n    this.onJoin = onJoin\r\n    this.connection = new WebSocket(url)\r\n    this.connection.onopen = this.processConnectionOpen.bind(this)\r\n    this.connection.onerror = this.processConnectionError.bind(this)\r\n    this.connection.onmessage = this.processConnectionMessage.bind(this)\r\n    this.defineEventEmitterCallbacks()\r\n  }\r\n\r\n  defineEventEmitterCallbacks() {\r\n    EventEmitter.subscribe('greeting', () => {\r\n      this.connection.send(\r\n        this.prepareMessage({\r\n          msgType: 'greeting',\r\n          msg: this.id,\r\n        })\r\n      )\r\n    })\r\n\r\n    EventEmitter.subscribe('signalGetNextStudent', () => {\r\n      this.getNextStudent()\r\n    })\r\n\r\n    EventEmitter.subscribe('signalCallOver', () => {\r\n      this.signalCallOver()\r\n    })\r\n\r\n    EventEmitter.subscribe('userLeaveGroup', (group) => {\r\n      this.connection.send(\r\n        this.prepareMessage({\r\n          msgType: 'userLeaveGroup',\r\n          msg: group,\r\n        })\r\n      )\r\n    })\r\n\r\n    EventEmitter.subscribe('userJoinGroup', (data) => {\r\n      this.connection.send(\r\n        this.prepareMessage({\r\n          msgType: 'userJoinGroup',\r\n          msg: data,\r\n        })\r\n      )\r\n    })\r\n\r\n    EventEmitter.subscribe('classGroupSetChanged', (classId) => {\r\n      this.connection.send(\r\n        this.prepareMessage({\r\n          msgType: 'classGroupSetChanged',\r\n          msg: classId,\r\n        })\r\n      )\r\n    })\r\n\r\n    EventEmitter.subscribe(\r\n      'sendOutInvite',\r\n      ({ sender, recepientIds, group }) => {\r\n        recepientIds.forEach((id) => {\r\n          this.sendOutInvite(sender, id, group)\r\n        })\r\n      }\r\n    )\r\n\r\n    EventEmitter.subscribe('bidForLeaderPosition', ({ userId, groupId }) => {\r\n      this.connection.send(\r\n        'bidForLeaderPosition',\r\n        this.prepareMessage({\r\n          msgType: 'bidForLeaderPosition',\r\n          msg: { newLeader: this.id, oldLeader: userId, groupId },\r\n        })\r\n      )\r\n    })\r\n\r\n    EventEmitter.subscribe('screenShareOn', (data) => {\r\n      this.connection.send(\r\n        this.prepareMessage({\r\n          msgType: 'screenShareOn',\r\n          msg: data,\r\n        })\r\n      )\r\n    })\r\n  }\r\n\r\n  processConnectionOpen() {\r\n    // this.connection.send(\r\n    //   this.prepareMessage({\r\n    //     msgType: 'greeting',\r\n    //     msg: this.id,\r\n    //   })\r\n    // ) // notify the server which courseId this websocket belongs to\r\n  }\r\n\r\n  processConnectionError(error) {\r\n    console.log(`WebSocket error: ${error}`)\r\n  }\r\n\r\n  activateTAWaitingModal(studentName) {\r\n    EventEmitter.publish('activateTAWaitingModal', studentName)\r\n  }\r\n\r\n  removeTAWaitingModalOnTimeout() {\r\n    EventEmitter.publish('removeTAWaitingModalOnTimeout')\r\n  }\r\n\r\n  removeTAWaitingModalOnAccept() {\r\n    EventEmitter.publish('removeTAWaitingModalOnAccept')\r\n  }\r\n\r\n  removeTAWaitingModalOnDecline() {\r\n    EventEmitter.publish('removeTAWaitingModalOnDecline')\r\n  }\r\n\r\n  updateStudentsInQueue(msg) {\r\n    EventEmitter.publish('updateStudentsInQueue', msg)\r\n  }\r\n\r\n  updateCurrStudent(msg) {\r\n    EventEmitter.publish('updateCurrStudent', msg)\r\n  }\r\n\r\n  initializeQueueOnGreeting(msg) {\r\n    EventEmitter.publish('initializeQueueOnGreeting', msg)\r\n  }\r\n\r\n  notifyFetchGroups() {\r\n    EventEmitter.publish('fetchGroups')\r\n  }\r\n\r\n  activateReceiveInviteModal(msg) {\r\n    EventEmitter.publish('activateReceiveInviteModal', msg)\r\n  }\r\n\r\n  refreshScreenContainer() {\r\n    EventEmitter.publish('refreshScreenContainer')\r\n  }\r\n\r\n  changeScreensharer(msg) {\r\n    EventEmitter.publish('newScreensharer', msg)\r\n  }\r\n\r\n  activateWaitingForNewLeaderModal(data) {\r\n    EventEmitter.publish('activateWaitingForNewLeaderModal', data)\r\n  }\r\n\r\n  removeWaitingForNewLeaderModal(newLeaderId) {\r\n    EventEmitter.publish('removeWaitingForNewLeaderModal', newLeaderId)\r\n  }\r\n\r\n  processConnectionMessage(e) {\r\n    const { msgType, msg } = JSON.parse(e.data)\r\n\r\n    switch (msgType) {\r\n      case 'greetingAck':\r\n        this.initializeQueueOnGreeting(msg)\r\n        break\r\n\r\n      case 'queue': // in this case, the server will send a message indicating the current students in the queue\r\n        // msg - the new queue\r\n        this.updateStudentsInQueue(msg)\r\n        break\r\n\r\n      case 'nextStudentNotified': // in this case, the server lets the TA know that the student has been notified\r\n        // msg - the name of the student who was notified\r\n        this.activateTAWaitingModal(msg)\r\n        break\r\n\r\n      case 'studentTimeout': // in this case, the server lets the TA know that the student has timed out\r\n        this.removeTAWaitingModalOnTimeout()\r\n        break\r\n\r\n      case 'studentJoin': // in this case, the TA's invitation to join has been accepted\r\n        this.removeTAWaitingModalOnAccept()\r\n        this.onJoin(JSON.parse(msg))\r\n        break\r\n\r\n      case 'studentDecline': // in this case the student declines the TA's invitation, and the TA's modal closes\r\n        this.removeTAWaitingModalOnDecline()\r\n        break\r\n\r\n      case 'currStudentUpdate':\r\n        this.updateCurrStudent(msg)\r\n        break\r\n\r\n      case 'fetchGroups':\r\n        this.notifyFetchGroups()\r\n        break\r\n\r\n      case 'receiveInviteTA': // in this case, another TA invites you to their group\r\n        // msg - sender, group\r\n        this.activateReceiveInviteModal(msg)\r\n        break\r\n\r\n      case 'newLeaderAppointed':\r\n        this.refreshScreenContainer()\r\n        break\r\n\r\n      case 'fetchScreensharer':\r\n        this.changeScreensharer(msg)\r\n        break\r\n\r\n      case 'oldLeaderHasLeft':\r\n        // msg - the old leader Id and the group id\r\n        this.activateWaitingForNewLeaderModal(msg)\r\n        break\r\n\r\n      case 'wonLeaderBid':\r\n        this.removeWaitingForNewLeaderModal(msg)\r\n\r\n      default:\r\n        throw new Error(`Message ${msg} is incorrectly formatted`)\r\n    }\r\n  }\r\n\r\n  getNextStudent() {\r\n    this.connection.send(\r\n      this.prepareMessage({\r\n        msgType: 'next',\r\n        msg: this.id,\r\n      })\r\n    )\r\n  }\r\n\r\n  signalCallOver() {\r\n    this.connection.send(\r\n      this.prepareMessage({\r\n        msgType: 'callOver',\r\n        msg: 'callOver',\r\n      })\r\n    )\r\n  }\r\n\r\n  sendOutInvite(sender, recepientId, group) {\r\n    this.connection.send(\r\n      this.prepareMessage({\r\n        msgType: 'sendOutInvite',\r\n        msg: JSON.stringify({ sender, recepientId, group }),\r\n      })\r\n    )\r\n  }\r\n\r\n  prepareMessage(msg) {\r\n    const { courseId } = this\r\n    const enrichedPayload = { ...msg, courseId, role }\r\n    return JSON.stringify(enrichedPayload)\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}