{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useEffect, useState } from 'react';\nimport { useRouter } from 'next/router';\nimport dynamic from 'next/dynamic';\nimport Layout from '../../components/layout';\nimport { Button, Accordion, List } from 'semantic-ui-react';\nimport { AuthRequired, useAuth } from '../../components/authProvider';\nimport Queue from '../../components/queue/queue';\nimport * as api from '../../util/mercuryService';\nimport CreateGroupModal from '../../components/createGroupModal';\nimport ModifyDiscussionModal from '../../components/modifyDiscussionModal';\nconst Vonage = dynamic(() => import('../../components/vonage'), {\n  ssr: false,\n  loadableGenerated: {\n    webpack: () => [require.resolveWeak('../../components/vonage')],\n    modules: ['../../components/vonage']\n  }\n});\n\nfunction ClassPage() {\n  const router = useRouter();\n  const {\n    user\n  } = useAuth();\n  const {\n    0: currentGroup,\n    1: setCurrentGroup\n  } = useState({\n    id: '',\n    name: ''\n  });\n  const {\n    0: currentClass,\n    1: setCurrentClass\n  } = useState({\n    id: '',\n    name: '',\n    groups: [],\n    users: [],\n    role: 'Student'\n  });\n  const {\n    0: vonageCred,\n    1: setVonageCred\n  } = useState(null);\n  const {\n    classId\n  } = router.query;\n\n  const plusIcon = __jsx(List.Icon, {\n    name: \"user plus\",\n    size: \"med\"\n  });\n\n  const noPlusIcon = __jsx(\"div\", null);\n\n  const fetchCurrentClass = () => {\n    api.getClass(classId).then(currentClass => setCurrentClass(currentClass)).catch(console.error);\n  };\n\n  useEffect(() => {\n    if (!classId) return;\n    api.getClass(classId).then(c => {\n      const userRole = c.users.find(u => u.id === user.id);\n      if (!userRole) router.push('/calendar');\n      setCurrentClass(_objectSpread(_objectSpread({}, c), {}, {\n        role: userRole.role\n      }));\n    }).catch(console.error);\n  }, [classId]);\n\n  const handleBack = async () => {\n    await router.push('/calendar');\n  };\n\n  const handleSelectGroup = group => {\n    api.postGroupToken(classId, group.id).then(({\n      token\n    }) => {\n      setVonageCred(null);\n      setVonageCred({\n        sessionId: group.sessionId,\n        token\n      });\n    }).catch(console.error);\n  };\n\n  const handleJoinTA = group => {\n    handleSelectGroup(group);\n    setCurrentGroup(group);\n  };\n\n  function getButtonToDisplay() {\n    return currentClass.role === 'Student' ? __jsx(CreateGroupModal, {\n      onCreate: handleCreateGroup\n    }) : __jsx(ModifyDiscussionModal, {\n      onCreate: handleCreateGroup\n    });\n  }\n\n  function leftDisplay() {\n    return currentClass.role === 'Student' ? __jsx(\"div\", {\n      style: {\n        height: '100%',\n        marginLeft: '2.5%'\n      }\n    }, __jsx(Button.Group, {\n      size: \"huge\",\n      style: {\n        marginBottom: 12,\n        width: '100%'\n      },\n      fluid: true\n    }, __jsx(Button, {\n      compact: true,\n      icon: \"angle left\",\n      content: currentClass.name,\n      style: {\n        fontSize: '1.5vw',\n        textAlign: 'left',\n        width: '75%',\n        marginBottom: '2%',\n        minWidth: '41px'\n      },\n      onClick: handleBack\n    }), __jsx(Button, {\n      compact: true,\n      icon: \"setting\",\n      style: {\n        fontSize: '1.5vw',\n        textAlign: 'center',\n        width: '15%',\n        marginBottom: '2%',\n        minWidth: '14px'\n      }\n    })), showOffice(), __jsx(Accordion, {\n      fluid: true,\n      exclusive: false,\n      defaultActiveIndex: [0, 1],\n      style: {\n        fontSize: '1vw',\n        textAlign: 'left',\n        width: '100%',\n        marginBottom: '2%',\n        minWidth: '41px'\n      },\n      panels: [{\n        key: 'discussions',\n        title: 'Discussions',\n        content: {\n          content: __jsx(\"div\", {\n            style: {\n              paddingLeft: 20\n            }\n          }, __jsx(List, {\n            relaxed: true,\n            selection: true\n          }, currentClass.groups.filter(group => group.type === 'discussion').map(group => __jsx(List.Item, {\n            key: `discussion_${group.id}`,\n            onClick: () => {\n              if (currentGroup.id !== group.id) {\n                handleSelectGroup(group);\n                setCurrentGroup(group);\n              }\n            },\n            style: currentGroup.id == group.id && vonageCred !== null ? clickedGroupsStyle : unClickedGroupsStyle\n          }, __jsx(List.Icon, {\n            name: \"sound\"\n          }), __jsx(List.Content, null, __jsx(List.Header, {\n            as: \"a\"\n          }, group.name)), showInviteButton(group)))))\n        }\n      }, {\n        key: 'private-groups',\n        title: 'Private Groups',\n        content: {\n          content: __jsx(\"div\", {\n            style: {\n              paddingLeft: 20\n            }\n          }, __jsx(List, {\n            relaxed: true,\n            selection: true\n          }, currentClass.groups.filter(group => group.type === 'group').map(group => __jsx(List.Item, {\n            key: `private_group_${group.id}`,\n            onClick: () => {\n              if (currentGroup.id !== group.id) {\n                handleSelectGroup(group);\n                setCurrentGroup(group);\n              }\n            },\n            style: currentGroup.id == group.id && vonageCred !== null ? clickedGroupsStyle : unClickedGroupsStyle\n          }, __jsx(List.Icon, {\n            name: \"lock\"\n          }), __jsx(List.Content, null, __jsx(List.Header, {\n            as: \"a\"\n          }, group.name)), showInviteButton(group)))))\n        }\n      }]\n    }), __jsx(\"div\", {\n      style: {\n        position: 'absolute',\n        width: 'calc(100% - 38px)',\n        bottom: 14\n      }\n    }, getButtonToDisplay())) : __jsx(ModifyDiscussionModal, {\n      onCreate: handleCreateGroup\n    });\n  }\n\n  function showOffice() {\n    return (currentClass.role !== 'Student' || currentGroup.type === 'office') && __jsx(\"div\", {\n      style: {\n        paddingLeft: 20\n      }\n    }, __jsx(List, {\n      relaxed: true,\n      selection: true\n    }, currentClass.groups.filter(group => group.type === 'office').map(group => __jsx(List.Item, {\n      key: `office`,\n      onClick: () => {\n        if (currentGroup.id !== group.id) {\n          handleSelectGroup(group);\n          setCurrentGroup(group);\n        }\n      },\n      style: currentGroup.id == group.id && vonageCred !== null ? clickedGroupsStyle : unClickedGroupsStyle\n    }, __jsx(List.Icon, {\n      name: \"graduation cap\"\n    }), __jsx(List.Content, null, __jsx(List.Header, {\n      as: \"a\"\n    }, \"TA Office\")), showInviteButton(group)))));\n  }\n\n  const handleCreateGroup = async group => {\n    await api.postGroup(classId, group.name, group.type);\n    fetchCurrentClass();\n  };\n\n  function showInviteButton(group) {\n    return currentGroup.id == group.id && vonageCred !== null ? plusIcon : noPlusIcon;\n  }\n\n  return __jsx(Layout, {\n    left: leftDisplay()\n    /*<div style={{ height: '100%', marginLeft: '2.5%' }}>\n      <Button.Group\n        size=\"huge\"\n        style={{ marginBottom: 12, width: '100%' }}\n        fluid\n      >\n        <Button\n          compact\n          icon=\"angle left\"\n          content={currentClass.name}\n          style={{\n            fontSize: '1.5vw',\n            textAlign: 'left',\n            width: '75%',\n            marginBottom: '2%',\n            minWidth: '41px',\n          }}\n          onClick={handleBack}\n        />\n        <Button\n          compact\n          icon=\"setting\"\n          style={{\n            fontSize: '1.5vw',\n            textAlign: 'center',\n            width: '15%',\n            marginBottom: '2%',\n            minWidth: '14px',\n          }}\n        />\n      </Button.Group>\n      {showOffice()}\n      <Accordion\n        fluid\n        exclusive={false}\n        defaultActiveIndex={[0, 1]}\n        style={{\n          fontSize: '1vw',\n          textAlign: 'left',\n          width: '100%',\n          marginBottom: '2%',\n          minWidth: '41px',\n        }}\n        panels={[\n          {\n            key: 'discussions',\n            title: 'Discussions',\n            content: {\n              content: (\n                <div style={{ paddingLeft: 20 }}>\n                  <List relaxed selection>\n                    {currentClass.groups\n                      .filter((group) => group.type === 'discussion')\n                      .map((group) => (\n                        <List.Item\n                          key={`discussion_${group.id}`}\n                          onClick={() => {\n                            if (currentGroup.id !== group.id) {\n                              handleSelectGroup(group)\n                              setCurrentGroup(group)\n                            }\n                          }}\n                          style={\n                            currentGroup.id == group.id &&\n                            vonageCred !== null\n                              ? clickedGroupsStyle\n                              : unClickedGroupsStyle\n                          }\n                        >\n                          <List.Icon name=\"sound\" />\n                          <List.Content>\n                            <List.Header as=\"a\">{group.name}</List.Header>\n                          </List.Content>\n                          {showInviteButton(group)}\n                        </List.Item>\n                      ))}\n                  </List>\n                </div>\n              ),\n            },\n          },\n          {\n            key: 'private-groups',\n            title: 'Private Groups',\n            content: {\n              content: (\n                <div style={{ paddingLeft: 20 }}>\n                  <List relaxed selection>\n                    {currentClass.groups\n                      .filter((group) => group.type === 'group')\n                      .map((group) => (\n                        <List.Item\n                          key={`private_group_${group.id}`}\n                          onClick={() => {\n                            if (currentGroup.id !== group.id) {\n                              handleSelectGroup(group)\n                              setCurrentGroup(group)\n                            }\n                          }}\n                          style={\n                            currentGroup.id == group.id &&\n                            vonageCred !== null\n                              ? clickedGroupsStyle\n                              : unClickedGroupsStyle\n                          }\n                        >\n                          <List.Icon name=\"lock\" />\n                          <List.Content>\n                            <List.Header as=\"a\">{group.name}</List.Header>\n                          </List.Content>\n                          {showInviteButton(group)}\n                        </List.Item>\n                      ))}\n                  </List>\n                </div>\n              ),\n            },\n          },\n        ]}\n      />\n      <div\n        style={{\n          position: 'absolute',\n          width: 'calc(100% - 38px)',\n          bottom: 14,\n        }}\n      >\n        {getButtonToDisplay()}\n      </div>\n    </div>*/\n    ,\n    right: __jsx(Queue, {\n      onJoin: handleJoinTA,\n      currentGroup: currentGroup\n    })\n  }, vonageCred && __jsx(Vonage, {\n    sessionId: vonageCred.sessionId,\n    token: vonageCred.token,\n    onLeave: () => {\n      setVonageCred(null);\n      setCurrentGroup({\n        id: '',\n        name: ''\n      });\n    }\n  }));\n}\n\nconst unClickedGroupsStyle = {\n  fontSize: '.8vw',\n  textAlign: 'left',\n  width: '75%',\n  marginBottom: '2%',\n  minWidth: '41px'\n};\nconst clickedGroupsStyle = {\n  fontSize: '.8vw',\n  textAlign: 'left',\n  width: '75%',\n  marginBottom: '2%',\n  minWidth: '41px',\n  background: '#e0e1e2',\n  borderRadius: 10,\n  borderWidth: 1,\n  borderColor: '#fff'\n};\nexport default AuthRequired(ClassPage);","map":{"version":3,"sources":["C:/Users/ryanj/Documents/mercury/pages/classes/[classId].js"],"names":["React","useEffect","useState","useRouter","dynamic","Layout","Button","Accordion","List","AuthRequired","useAuth","Queue","api","CreateGroupModal","ModifyDiscussionModal","Vonage","ssr","ClassPage","router","user","currentGroup","setCurrentGroup","id","name","currentClass","setCurrentClass","groups","users","role","vonageCred","setVonageCred","classId","query","plusIcon","noPlusIcon","fetchCurrentClass","getClass","then","catch","console","error","c","userRole","find","u","push","handleBack","handleSelectGroup","group","postGroupToken","token","sessionId","handleJoinTA","getButtonToDisplay","handleCreateGroup","leftDisplay","height","marginLeft","marginBottom","width","fontSize","textAlign","minWidth","showOffice","key","title","content","paddingLeft","filter","type","map","clickedGroupsStyle","unClickedGroupsStyle","showInviteButton","position","bottom","postGroup","background","borderRadius","borderWidth","borderColor"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react'\nimport { useRouter } from 'next/router'\nimport dynamic from 'next/dynamic'\nimport Layout from '../../components/layout'\nimport { Button, Accordion, List } from 'semantic-ui-react'\nimport { AuthRequired, useAuth } from '../../components/authProvider'\nimport Queue from '../../components/queue/queue'\nimport * as api from '../../util/mercuryService'\nimport CreateGroupModal from '../../components/createGroupModal'\nimport ModifyDiscussionModal from '../../components/modifyDiscussionModal'\n\nconst Vonage = dynamic(() => import('../../components/vonage'), {\n  ssr: false,\n})\n\nfunction ClassPage() {\n  const router = useRouter()\n  const { user } = useAuth()\n  const [currentGroup, setCurrentGroup] = useState({ id: '', name: '' })\n  const [currentClass, setCurrentClass] = useState({\n    id: '',\n    name: '',\n    groups: [],\n    users: [],\n    role: 'Student',\n  })\n  const [vonageCred, setVonageCred] = useState(null)\n  const { classId } = router.query\n  const plusIcon = <List.Icon name=\"user plus\" size=\"med\" />\n  const noPlusIcon = <div></div>\n\n  const fetchCurrentClass = () => {\n    api\n      .getClass(classId)\n      .then((currentClass) => setCurrentClass(currentClass))\n      .catch(console.error)\n  }\n\n  useEffect(() => {\n    if (!classId) return\n\n    api\n      .getClass(classId)\n      .then((c) => {\n        const userRole = c.users.find((u) => u.id === user.id)\n        if (!userRole) router.push('/calendar')\n\n        setCurrentClass({ ...c, role: userRole.role })\n      })\n      .catch(console.error)\n  }, [classId])\n\n  const handleBack = async () => {\n    await router.push('/calendar')\n  }\n\n  const handleSelectGroup = (group) => {\n    api\n      .postGroupToken(classId, group.id)\n      .then(({ token }) => {\n        setVonageCred(null)\n        setVonageCred({ sessionId: group.sessionId, token })\n      })\n      .catch(console.error)\n  }\n\n  const handleJoinTA = (group) => {\n    handleSelectGroup(group)\n    setCurrentGroup(group)\n  }\n\n  function getButtonToDisplay() {\n    return currentClass.role === 'Student' ? (\n      <CreateGroupModal onCreate={handleCreateGroup} />\n    ) : (\n      <ModifyDiscussionModal onCreate={handleCreateGroup} />\n    )\n  }\n\n  function leftDisplay() {\n    return currentClass.role === 'Student' ? (\n      <div style={{ height: '100%', marginLeft: '2.5%' }}>\n        <Button.Group\n          size=\"huge\"\n          style={{ marginBottom: 12, width: '100%' }}\n          fluid\n        >\n          <Button\n            compact\n            icon=\"angle left\"\n            content={currentClass.name}\n            style={{\n              fontSize: '1.5vw',\n              textAlign: 'left',\n              width: '75%',\n              marginBottom: '2%',\n              minWidth: '41px',\n            }}\n            onClick={handleBack}\n          />\n          <Button\n            compact\n            icon=\"setting\"\n            style={{\n              fontSize: '1.5vw',\n              textAlign: 'center',\n              width: '15%',\n              marginBottom: '2%',\n              minWidth: '14px',\n            }}\n          />\n        </Button.Group>\n        {showOffice()}\n        <Accordion\n          fluid\n          exclusive={false}\n          defaultActiveIndex={[0, 1]}\n          style={{\n            fontSize: '1vw',\n            textAlign: 'left',\n            width: '100%',\n            marginBottom: '2%',\n            minWidth: '41px',\n          }}\n          panels={[\n            {\n              key: 'discussions',\n              title: 'Discussions',\n              content: {\n                content: (\n                  <div style={{ paddingLeft: 20 }}>\n                    <List relaxed selection>\n                      {currentClass.groups\n                        .filter((group) => group.type === 'discussion')\n                        .map((group) => (\n                          <List.Item\n                            key={`discussion_${group.id}`}\n                            onClick={() => {\n                              if (currentGroup.id !== group.id) {\n                                handleSelectGroup(group)\n                                setCurrentGroup(group)\n                              }\n                            }}\n                            style={\n                              currentGroup.id == group.id &&\n                              vonageCred !== null\n                                ? clickedGroupsStyle\n                                : unClickedGroupsStyle\n                            }\n                          >\n                            <List.Icon name=\"sound\" />\n                            <List.Content>\n                              <List.Header as=\"a\">{group.name}</List.Header>\n                            </List.Content>\n                            {showInviteButton(group)}\n                          </List.Item>\n                        ))}\n                    </List>\n                  </div>\n                ),\n              },\n            },\n            {\n              key: 'private-groups',\n              title: 'Private Groups',\n              content: {\n                content: (\n                  <div style={{ paddingLeft: 20 }}>\n                    <List relaxed selection>\n                      {currentClass.groups\n                        .filter((group) => group.type === 'group')\n                        .map((group) => (\n                          <List.Item\n                            key={`private_group_${group.id}`}\n                            onClick={() => {\n                              if (currentGroup.id !== group.id) {\n                                handleSelectGroup(group)\n                                setCurrentGroup(group)\n                              }\n                            }}\n                            style={\n                              currentGroup.id == group.id &&\n                              vonageCred !== null\n                                ? clickedGroupsStyle\n                                : unClickedGroupsStyle\n                            }\n                          >\n                            <List.Icon name=\"lock\" />\n                            <List.Content>\n                              <List.Header as=\"a\">{group.name}</List.Header>\n                            </List.Content>\n                            {showInviteButton(group)}\n                          </List.Item>\n                        ))}\n                    </List>\n                  </div>\n                ),\n              },\n            },\n          ]}\n        />\n        <div\n          style={{\n            position: 'absolute',\n            width: 'calc(100% - 38px)',\n            bottom: 14,\n          }}\n        >\n          {getButtonToDisplay()}\n        </div>\n      </div>\n    ) : (\n      <ModifyDiscussionModal onCreate={handleCreateGroup} />\n    )\n  }\n\n  function showOffice() {\n    return (\n      (currentClass.role !== 'Student' || currentGroup.type === 'office') && (\n        <div style={{ paddingLeft: 20 }}>\n          <List relaxed selection>\n            {currentClass.groups\n              .filter((group) => group.type === 'office')\n              .map((group) => (\n                <List.Item\n                  key={`office`}\n                  onClick={() => {\n                    if (currentGroup.id !== group.id) {\n                      handleSelectGroup(group)\n                      setCurrentGroup(group)\n                    }\n                  }}\n                  style={\n                    currentGroup.id == group.id && vonageCred !== null\n                      ? clickedGroupsStyle\n                      : unClickedGroupsStyle\n                  }\n                >\n                  <List.Icon name=\"graduation cap\" />\n                  <List.Content>\n                    <List.Header as=\"a\">TA Office</List.Header>\n                  </List.Content>\n                  {showInviteButton(group)}\n                </List.Item>\n              ))}\n          </List>\n        </div>\n      )\n    )\n  }\n\n  const handleCreateGroup = async (group) => {\n    await api.postGroup(classId, group.name, group.type)\n\n    fetchCurrentClass()\n  }\n\n  function showInviteButton(group) {\n    return currentGroup.id == group.id && vonageCred !== null\n      ? plusIcon\n      : noPlusIcon\n  }\n\n  return (\n    <Layout\n      left={ leftDisplay()\n        /*<div style={{ height: '100%', marginLeft: '2.5%' }}>\n          <Button.Group\n            size=\"huge\"\n            style={{ marginBottom: 12, width: '100%' }}\n            fluid\n          >\n            <Button\n              compact\n              icon=\"angle left\"\n              content={currentClass.name}\n              style={{\n                fontSize: '1.5vw',\n                textAlign: 'left',\n                width: '75%',\n                marginBottom: '2%',\n                minWidth: '41px',\n              }}\n              onClick={handleBack}\n            />\n            <Button\n              compact\n              icon=\"setting\"\n              style={{\n                fontSize: '1.5vw',\n                textAlign: 'center',\n                width: '15%',\n                marginBottom: '2%',\n                minWidth: '14px',\n              }}\n            />\n          </Button.Group>\n          {showOffice()}\n          <Accordion\n            fluid\n            exclusive={false}\n            defaultActiveIndex={[0, 1]}\n            style={{\n              fontSize: '1vw',\n              textAlign: 'left',\n              width: '100%',\n              marginBottom: '2%',\n              minWidth: '41px',\n            }}\n            panels={[\n              {\n                key: 'discussions',\n                title: 'Discussions',\n                content: {\n                  content: (\n                    <div style={{ paddingLeft: 20 }}>\n                      <List relaxed selection>\n                        {currentClass.groups\n                          .filter((group) => group.type === 'discussion')\n                          .map((group) => (\n                            <List.Item\n                              key={`discussion_${group.id}`}\n                              onClick={() => {\n                                if (currentGroup.id !== group.id) {\n                                  handleSelectGroup(group)\n                                  setCurrentGroup(group)\n                                }\n                              }}\n                              style={\n                                currentGroup.id == group.id &&\n                                vonageCred !== null\n                                  ? clickedGroupsStyle\n                                  : unClickedGroupsStyle\n                              }\n                            >\n                              <List.Icon name=\"sound\" />\n                              <List.Content>\n                                <List.Header as=\"a\">{group.name}</List.Header>\n                              </List.Content>\n                              {showInviteButton(group)}\n                            </List.Item>\n                          ))}\n                      </List>\n                    </div>\n                  ),\n                },\n              },\n              {\n                key: 'private-groups',\n                title: 'Private Groups',\n                content: {\n                  content: (\n                    <div style={{ paddingLeft: 20 }}>\n                      <List relaxed selection>\n                        {currentClass.groups\n                          .filter((group) => group.type === 'group')\n                          .map((group) => (\n                            <List.Item\n                              key={`private_group_${group.id}`}\n                              onClick={() => {\n                                if (currentGroup.id !== group.id) {\n                                  handleSelectGroup(group)\n                                  setCurrentGroup(group)\n                                }\n                              }}\n                              style={\n                                currentGroup.id == group.id &&\n                                vonageCred !== null\n                                  ? clickedGroupsStyle\n                                  : unClickedGroupsStyle\n                              }\n                            >\n                              <List.Icon name=\"lock\" />\n                              <List.Content>\n                                <List.Header as=\"a\">{group.name}</List.Header>\n                              </List.Content>\n                              {showInviteButton(group)}\n                            </List.Item>\n                          ))}\n                      </List>\n                    </div>\n                  ),\n                },\n              },\n            ]}\n          />\n          <div\n            style={{\n              position: 'absolute',\n              width: 'calc(100% - 38px)',\n              bottom: 14,\n            }}\n          >\n            {getButtonToDisplay()}\n          </div>\n        </div>*/\n      }\n      right={<Queue onJoin={handleJoinTA} currentGroup={currentGroup} />}\n    >\n      {vonageCred && (\n        <Vonage\n          sessionId={vonageCred.sessionId}\n          token={vonageCred.token}\n          onLeave={() => {\n            setVonageCred(null)\n            setCurrentGroup({ id: '', name: '' })\n          }}\n        />\n      )}\n    </Layout>\n  )\n}\n\nconst unClickedGroupsStyle = {\n  fontSize: '.8vw',\n  textAlign: 'left',\n  width: '75%',\n  marginBottom: '2%',\n  minWidth: '41px',\n}\nconst clickedGroupsStyle = {\n  fontSize: '.8vw',\n  textAlign: 'left',\n  width: '75%',\n  marginBottom: '2%',\n  minWidth: '41px',\n  background: '#e0e1e2',\n  borderRadius: 10,\n  borderWidth: 1,\n  borderColor: '#fff',\n}\n\nexport default AuthRequired(ClassPage)\n"]},"metadata":{},"sourceType":"module"}