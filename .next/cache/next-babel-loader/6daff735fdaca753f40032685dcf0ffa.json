{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nvar __jsx = React.createElement;\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component } from 'react';\nimport { Modal, Button, Search, Label, Icon } from 'semantic-ui-react';\nimport _ from 'lodash';\nimport { EventEmitter } from './util/EventEmitter';\nvar initialState = {\n  isLoading: false,\n  results: [],\n  value: ''\n};\n\nvar GroupLeaderModal = /*#__PURE__*/function (_Component) {\n  _inherits(GroupLeaderModal, _Component);\n\n  var _super = _createSuper(GroupLeaderModal);\n\n  function GroupLeaderModal(props) {\n    var _this;\n\n    _classCallCheck(this, GroupLeaderModal);\n\n    _this = _super.call(this, props);\n\n    _defineProperty(_assertThisInitialized(_this), \"formatAsResults\", function (candidate) {\n      return {\n        title: candidate.fullName,\n        id: candidate.userId\n      };\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleInvite\", function () {\n      /**\n       * TODO: Please publish an event called 'sendLeaderAppointmentNotification' with the data including the groupId from\n       * this.state.currGroup and the userId of the selected user\n       * Also, it looks like this code is not relevant to leader appointment but rather invites FYI\n       */\n      if (_this.state.selectedUser === {}) return;\n      console.log(_this.state.selectedUser);\n      EventEmitter.publish('sendLeaderAppointmentNotification', {\n        groupId: _this.state.currGroup.id,\n        userId: _this.state.selectedUser.id\n      });\n\n      _this.setState({\n        value: '',\n        selectedUser: {},\n        modalState: false\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleClose\", function () {\n      _this.setState({\n        value: '',\n        selectedUser: {},\n        modalState: false\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleResultSelect\", function (e, _ref) {\n      var result = _ref.result;\n\n      _this.setState({\n        value: '',\n        selectedUser: result\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleSearchChange\", function (e, _ref2) {\n      var value = _ref2.value;\n\n      _this.setState({\n        isLoading: true,\n        value: value\n      });\n\n      setTimeout(function () {\n        if (_this.state.value.length < 1) return _this.setState(initialState);\n        var re = new RegExp(_.escapeRegExp(_this.state.value), 'i');\n\n        var isMatch = function isMatch(result) {\n          return re.test(result.title) || re.test(result.description);\n        };\n\n        _this.setState({\n          isLoading: false,\n          results: _.filter(_this.state.allUsers.map(_this.formatAsResults), isMatch)\n        });\n      }, 300);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"removeSelected\", function () {\n      _this.setState({\n        selectedUser: {}\n      });\n    });\n\n    _this.state = {\n      currGroup: _this.props.currGroup,\n      modalState: false,\n      isLoading: false,\n      results: [],\n      value: '',\n      allUsers: [],\n      selectedUser: {}\n    };\n\n    _this.defineEventEmitterCallbacks();\n\n    return _this;\n  }\n\n  _createClass(GroupLeaderModal, [{\n    key: \"defineEventEmitterCallbacks\",\n    value: function defineEventEmitterCallbacks() {\n      var _this2 = this;\n\n      EventEmitter.subscribe('activateGroupLeaderModal', function (candidates) {\n        _this2.setState({\n          modalState: true,\n          allUsers: candidates\n        });\n        /** TODO:\n         *\n        Please change state to display the modal and please use the list of candidate objects as things to search for\n        * The candidate objects are { userId, fullName, email }\n        Please also store the userID's of each candidate object for when a leader is appointed\n        */\n\n\n        console.log(candidates);\n      });\n    }\n  }, {\n    key: \"getSelectedLabels\",\n    value: function getSelectedLabels() {\n      var _this3 = this;\n\n      if (this.state.selectedUser === {}) {\n        return __jsx(React.Fragment, null);\n      }\n\n      return __jsx(\"div\", {\n        style: {\n          textAlign: 'left',\n          paddingLeft: 80,\n          paddingRight: 80\n        }\n      }, __jsx(Label, null, this.state.selectedUser.title, __jsx(Icon, {\n        name: \"delete\",\n        onClick: function onClick() {\n          return _this3.removeSelected();\n        }\n      })));\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return __jsx(\"div\", null, __jsx(Modal, {\n        style: {\n          borderless: 'true',\n          width: '40%',\n          height: '40%'\n        },\n        open: this.state.modalState,\n        onClose: this.handleClose,\n        closeOnDimmerClick: false,\n        closeOnEscape: false,\n        closeIcon: true\n      }, __jsx(Modal.Content, {\n        style: {\n          borderless: 'true'\n        }\n      }, __jsx(\"div\", {\n        style: {\n          textAlign: 'center',\n          paddingTop: 80,\n          paddingLeft: 80,\n          paddingRight: 80,\n          paddingBottom: 20\n        }\n      }, __jsx(Search, {\n        fluid: true,\n        placeholder: \"Choose a new group leader...\",\n        input: {\n          fluid: true\n        },\n        loading: this.state.isLoading,\n        onResultSelect: this.handleResultSelect,\n        onSearchChange: _.debounce(this.handleSearchChange, 500, {\n          leading: true\n        }),\n        results: this.state.results,\n        value: this.state.value\n      })), this.getSelectedLabels(), __jsx(\"div\", {\n        style: {\n          textAlign: 'center',\n          width: '70%',\n          height: '70%',\n          margin: 'auto',\n          padding: 30\n        }\n      }, __jsx(Button, {\n        color: \"teal\",\n        style: {\n          width: '50%',\n          fontSize: '1vw'\n        },\n        onClick: this.handleInvite.bind(this)\n      }, \"Change Group Leader\")))));\n    }\n  }]);\n\n  return GroupLeaderModal;\n}(Component);\n\nexport default GroupLeaderModal;","map":null,"metadata":{},"sourceType":"module"}