{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { Component } from 'react';\nimport ScreenPublisher from './screenPublisher';\nimport { OTPublisher } from 'opentok-react';\nimport { EventEmitter } from './util/EventEmitter';\nexport default class Publisher extends Component {\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"onError\", err => {\n      this.setState({\n        error: `Failed to publish: ${err.message}`\n      });\n    });\n\n    this.state = {\n      error: null,\n      audio: true,\n      video: true\n    };\n    this.defineEventEmitterCallbacks();\n  }\n\n  defineEventEmitterCallbacks() {\n    EventEmitter.subscribe('disableVideo', () => {\n      this.setState({\n        video: false\n      });\n      EventEmitter.publish('disableVideoButton');\n    });\n    EventEmitter.subscribe('enableVideo', () => {\n      this.setState({\n        video: true\n      });\n      EventEmitter.publish('enableVideoButton');\n    });\n  }\n\n  render() {\n    return __jsx(\"div\", null, this.state.error ? __jsx(\"div\", null, this.state.error) : null, __jsx(OTPublisher, {\n      properties: {\n        width: '13.57vw',\n        maxWidth: '13.57vw',\n        maxHeight: '8vh',\n        publishVideo: this.state.video,\n        marginBottom: '5px',\n        name: this.props.name\n      },\n      session: this.props.session,\n      onError: this.onError\n    }), __jsx(ScreenPublisher, {\n      style: {\n        width: '13.62vw',\n        maxWidth: '13.62vw',\n        height: '500px',\n        maxHeight: '16vh',\n        marginBottom: '5px'\n      },\n      session: this.props.session,\n      name: this.props.name + \"'s Screen\"\n    }));\n  }\n\n}","map":null,"metadata":{},"sourceType":"module"}