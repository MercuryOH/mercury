{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nvar url = 'ws://localhost:8080';\nimport { EventEmitter } from '../components/util/EventEmitter';\nvar role = 'Student';\n/**\n * QueueWebSocket controls the web socket business logic for the course queue and\n * functions as a controller for the queue state\n */\n\nvar StudentWebSocketClient = /*#__PURE__*/function () {\n  function StudentWebSocketClient() {\n    _classCallCheck(this, StudentWebSocketClient);\n  }\n\n  _createClass(StudentWebSocketClient, [{\n    key: \"start\",\n    value: function start(_ref) {\n      var me = _ref.me,\n          courseId = _ref.courseId;\n      var id = me.id;\n      this.id = id;\n      this.courseId = courseId;\n      this.connection = new WebSocket(url);\n      this.connection.onopen = this.processConnectionOpen.bind(this);\n      this.connection.onerror = this.processConnectionError.bind(this);\n      this.connection.onmessage = this.processConnectionMessage.bind(this);\n      this.defineEventEmitterCallbacks();\n    }\n  }, {\n    key: \"defineEventEmitterCallbacks\",\n    value: function defineEventEmitterCallbacks() {\n      var _this = this;\n\n      EventEmitter.subscribe('greeting', function () {\n        _this.connection.send(_this.prepareMessage({\n          msgType: 'greeting',\n          msg: _this.id\n        }));\n      });\n      EventEmitter.subscribe('signalStudentTimeout', function (TAName) {\n        return _this.signalStudentTimeout(TAName);\n      });\n      EventEmitter.subscribe('signalJoinTA', function (_ref2) {\n        var group = _ref2.group,\n            TAName = _ref2.TAName,\n            me = _ref2.me;\n\n        _this.signalJoinTA(group, TAName, me);\n      });\n      EventEmitter.subscribe('signalDeclineTA', function (TAName) {\n        _this.signalDeclineTA(TAName);\n      });\n      EventEmitter.subscribe('signalCallOver', function () {\n        _this.signalCallOver();\n      });\n      EventEmitter.subscribe('signalAddMeToQueue', function () {\n        _this.addMeToQueue();\n      });\n      EventEmitter.subscribe('signalRemoveMeFromQueue', function () {\n        _this.removeMeFromQueue();\n      });\n      EventEmitter.subscribe('sendOutInvite', function (_ref3) {\n        var sender = _ref3.sender,\n            recepientIds = _ref3.recepientIds,\n            group = _ref3.group;\n        recepientIds.forEach(function (id) {\n          _this.sendOutInvite(sender, id, group);\n        });\n      });\n      EventEmitter.subscribe('requestJoinGroup', function (data) {\n        _this.connection.send(_this.prepareMessage({\n          msgType: 'requestJoinGroup',\n          msg: JSON.stringify(data)\n        }));\n      });\n      EventEmitter.subscribe('acceptGroupJoinRequest', function (msg) {\n        _this.connection.send(_this.prepareMessage({\n          msgType: 'acceptGroupJoinRequest',\n          msg: msg\n        }));\n      });\n      EventEmitter.subscribe('declineGroupJoinRequest', function (msg) {\n        _this.connection.send(_this.prepareMessage({\n          msgType: 'declineGroupJoinRequest',\n          msg: msg\n        }));\n      });\n      EventEmitter.subscribe('classGroupSetChanged', function (classId) {\n        _this.connection.send(_this.prepareMessage({\n          msgType: 'classGroupSetChanged',\n          msg: classId\n        }));\n      });\n      EventEmitter.subscribe('userLeaveGroup', function (group) {\n        _this.connection.send(_this.prepareMessage({\n          msgType: 'userLeaveGroup',\n          msg: group\n        }));\n      });\n      EventEmitter.subscribe('userJoinGroup', function (data) {\n        _this.connection.send(_this.prepareMessage({\n          msgType: 'userJoinGroup',\n          msg: data\n        }));\n      });\n      EventEmitter.subscribe('startLeaderAppointmentProcess', function (data) {\n        _this.connection.send(_this.prepareMessage({\n          msgType: 'startLeaderAppointmentProcess',\n          msg: data\n        }));\n      });\n      EventEmitter.subscribe('sendLeaderAppointmentNotification', function (data) {\n        _this.connection.send(_this.prepareMessage({\n          msgType: 'leaderAppointmentNotification',\n          msg: data\n        }));\n      });\n      EventEmitter.subscribe('screenShareOn', function (data) {\n        _this.connection.send(_this.prepareMessage({\n          msgType: 'personWhoIsSharing',\n          msg: data\n        }));\n      });\n    }\n  }, {\n    key: \"processConnectionOpen\",\n    value: function processConnectionOpen() {\n      this.connection.send(this.prepareMessage({\n        msgType: 'greeting',\n        msg: this.id\n      })); // notify the server which courseId this websocket belongs to\n    }\n  }, {\n    key: \"processConnectionError\",\n    value: function processConnectionError(error) {\n      console.log(\"WebSocket error: \".concat(error));\n    }\n  }, {\n    key: \"activateYourTurnModal\",\n    value: function activateYourTurnModal(TAName) {\n      EventEmitter.publish('activateYourTurnModal', TAName);\n    }\n  }, {\n    key: \"updateStudentsInQueue\",\n    value: function updateStudentsInQueue(msg) {\n      EventEmitter.publish('updateStudentsInQueue', msg);\n    }\n  }, {\n    key: \"updateCurrStudent\",\n    value: function updateCurrStudent(msg) {\n      EventEmitter.publish('updateCurrStudent', msg);\n    }\n  }, {\n    key: \"initializeQueueOnGreeting\",\n    value: function initializeQueueOnGreeting(msg) {\n      EventEmitter.publish('initializeQueueOnGreeting', msg);\n    }\n  }, {\n    key: \"activateReceiveInviteModal\",\n    value: function activateReceiveInviteModal(msg) {\n      EventEmitter.publish('activateReceiveInviteModal', msg);\n    }\n  }, {\n    key: \"activateGroupJoinRequestModal\",\n    value: function activateGroupJoinRequestModal(msg) {\n      EventEmitter.publish('activateGroupJoinRequestModal', msg);\n    }\n  }, {\n    key: \"joinPrivateGroupOnApproval\",\n    value: function joinPrivateGroupOnApproval(msg) {\n      EventEmitter.publish('joinPrivateGroupOnApproval', msg);\n    }\n  }, {\n    key: \"notifyJoinRequestDeclined\",\n    value: function notifyJoinRequestDeclined(msg) {\n      EventEmitter.publish('notifyJoinRequestDeclined', msg);\n    }\n  }, {\n    key: \"notifyFetchGroups\",\n    value: function notifyFetchGroups() {\n      EventEmitter.publish('fetchGroups');\n    }\n  }, {\n    key: \"refreshScreenContainer\",\n    value: function refreshScreenContainer() {\n      EventEmitter.publish('refreshScreenContainer');\n    }\n  }, {\n    key: \"changeScreensharer\",\n    value: function changeScreensharer(msg) {\n      EventEmitter.publish('newScreensharer', msg);\n    }\n  }, {\n    key: \"processConnectionMessage\",\n    value: function processConnectionMessage(e) {\n      var _JSON$parse = JSON.parse(e.data),\n          msgType = _JSON$parse.msgType,\n          msg = _JSON$parse.msg;\n\n      switch (msgType) {\n        case 'greetingAck':\n          this.initializeQueueOnGreeting(msg);\n          break;\n\n        case 'queue':\n          // in this case, the server will send a message indicating the current students in the queue\n          // msg - the new queue\n          this.updateStudentsInQueue(msg);\n          break;\n\n        case 'yourTurn':\n          // in this case, which is only if you are a student, the server notifies that it is your turn\n          // msg - the TA that notifies you\n          this.activateYourTurnModal(msg);\n          break;\n\n        case 'currStudentUpdate':\n          this.updateCurrStudent(msg);\n          break;\n\n        case 'receiveInvite':\n          // in this case, another student invites you to their group\n          // msg - sender, group\n          this.activateReceiveInviteModal(msg);\n          break;\n\n        case 'groupJoinRequest':\n          this.activateGroupJoinRequestModal(msg); // msg - the name of the student wanting to join\n\n          break;\n\n        case 'groupJoinRequestApproved':\n          this.joinPrivateGroupOnApproval(msg);\n          break;\n\n        case 'groupJoinRequestDeclined':\n          this.notifyJoinRequestDeclined(msg);\n          break;\n\n        case 'fetchGroups':\n          this.notifyFetchGroups();\n          break;\n\n        case 'newLeaderAppointed':\n          this.refreshScreenContainer();\n          break;\n\n        case 'fetchScreensharer':\n          this.changeScreensharer(msg);\n          break;\n\n        default:\n          throw new Error(\"Message \".concat(msgType, \" is incorrectly formatted\"));\n      }\n    }\n  }, {\n    key: \"addMeToQueue\",\n    value: function addMeToQueue() {\n      this.connection.send(this.prepareMessage({\n        msgType: 'addToQueue',\n        msg: this.id\n      }));\n      EventEmitter.publish('addMeToQueue');\n    }\n  }, {\n    key: \"removeMeFromQueue\",\n    value: function removeMeFromQueue() {\n      this.connection.send(this.prepareMessage({\n        msgType: 'removeFromQueue',\n        msg: this.id\n      }));\n      EventEmitter.publish('removeMeFromQueue');\n    }\n  }, {\n    key: \"signalStudentTimeout\",\n    value: function signalStudentTimeout(TAName) {\n      this.connection.send(this.prepareMessage({\n        msgType: 'studentTimeout',\n        msg: TAName\n      }));\n    }\n  }, {\n    key: \"signalJoinTA\",\n    value: function signalJoinTA(group, TAName, me) {\n      this.connection.send(this.prepareMessage({\n        msgType: 'joinTA',\n        msg: JSON.stringify({\n          group: group,\n          TAName: TAName,\n          me: me\n        })\n      }));\n      EventEmitter.publish('clearLeftSide');\n    }\n  }, {\n    key: \"signalDeclineTA\",\n    value: function signalDeclineTA(TAName) {\n      this.connection.send(this.prepareMessage({\n        msgType: 'declineTA',\n        msg: TAName\n      }));\n    }\n  }, {\n    key: \"signalCallOver\",\n    value: function signalCallOver() {\n      this.connection.send(this.prepareMessage({\n        msgType: 'callOver',\n        msg: 'callOver'\n      }));\n    }\n  }, {\n    key: \"sendOutInvite\",\n    value: function sendOutInvite(sender, recepientId, group) {\n      this.connection.send(this.prepareMessage({\n        msgType: 'sendOutInvite',\n        msg: JSON.stringify({\n          sender: sender,\n          recepientId: recepientId,\n          group: group\n        })\n      }));\n    }\n  }, {\n    key: \"prepareMessage\",\n    value: function prepareMessage(msg) {\n      var courseId = this.courseId;\n\n      var enrichedPayload = _objectSpread(_objectSpread({}, msg), {}, {\n        courseId: courseId,\n        role: role\n      });\n\n      return JSON.stringify(enrichedPayload);\n    }\n  }]);\n\n  return StudentWebSocketClient;\n}();\n\nexport { StudentWebSocketClient as default };","map":{"version":3,"sources":["C:/Users/ryanj/Documents/mercury/util/studentWebSocket.js"],"names":["url","EventEmitter","role","StudentWebSocketClient","me","courseId","id","connection","WebSocket","onopen","processConnectionOpen","bind","onerror","processConnectionError","onmessage","processConnectionMessage","defineEventEmitterCallbacks","subscribe","send","prepareMessage","msgType","msg","TAName","signalStudentTimeout","group","signalJoinTA","signalDeclineTA","signalCallOver","addMeToQueue","removeMeFromQueue","sender","recepientIds","forEach","sendOutInvite","data","JSON","stringify","classId","error","console","log","publish","e","parse","initializeQueueOnGreeting","updateStudentsInQueue","activateYourTurnModal","updateCurrStudent","activateReceiveInviteModal","activateGroupJoinRequestModal","joinPrivateGroupOnApproval","notifyJoinRequestDeclined","notifyFetchGroups","refreshScreenContainer","changeScreensharer","Error","recepientId","enrichedPayload"],"mappings":";;;;;;;;AAAA,IAAMA,GAAG,GAAG,qBAAZ;AACA,SAASC,YAAT,QAA6B,iCAA7B;AACA,IAAMC,IAAI,GAAG,SAAb;AACA;;;;;IAKqBC,sB;;;;;;;gCACK;AAAA,UAAhBC,EAAgB,QAAhBA,EAAgB;AAAA,UAAZC,QAAY,QAAZA,QAAY;AAAA,UACdC,EADc,GACPF,EADO,CACdE,EADc;AAEtB,WAAKA,EAAL,GAAUA,EAAV;AACA,WAAKD,QAAL,GAAgBA,QAAhB;AAEA,WAAKE,UAAL,GAAkB,IAAIC,SAAJ,CAAcR,GAAd,CAAlB;AACA,WAAKO,UAAL,CAAgBE,MAAhB,GAAyB,KAAKC,qBAAL,CAA2BC,IAA3B,CAAgC,IAAhC,CAAzB;AACA,WAAKJ,UAAL,CAAgBK,OAAhB,GAA0B,KAAKC,sBAAL,CAA4BF,IAA5B,CAAiC,IAAjC,CAA1B;AACA,WAAKJ,UAAL,CAAgBO,SAAhB,GAA4B,KAAKC,wBAAL,CAA8BJ,IAA9B,CAAmC,IAAnC,CAA5B;AAEA,WAAKK,2BAAL;AACD;;;kDAE6B;AAAA;;AAC5Bf,MAAAA,YAAY,CAACgB,SAAb,CAAuB,UAAvB,EAAmC,YAAM;AACvC,QAAA,KAAI,CAACV,UAAL,CAAgBW,IAAhB,CACE,KAAI,CAACC,cAAL,CAAoB;AAClBC,UAAAA,OAAO,EAAE,UADS;AAElBC,UAAAA,GAAG,EAAE,KAAI,CAACf;AAFQ,SAApB,CADF;AAMD,OAPD;AASAL,MAAAA,YAAY,CAACgB,SAAb,CAAuB,sBAAvB,EAA+C,UAACK,MAAD;AAAA,eAC7C,KAAI,CAACC,oBAAL,CAA0BD,MAA1B,CAD6C;AAAA,OAA/C;AAIArB,MAAAA,YAAY,CAACgB,SAAb,CAAuB,cAAvB,EAAuC,iBAA2B;AAAA,YAAxBO,KAAwB,SAAxBA,KAAwB;AAAA,YAAjBF,MAAiB,SAAjBA,MAAiB;AAAA,YAATlB,EAAS,SAATA,EAAS;;AAChE,QAAA,KAAI,CAACqB,YAAL,CAAkBD,KAAlB,EAAyBF,MAAzB,EAAiClB,EAAjC;AACD,OAFD;AAIAH,MAAAA,YAAY,CAACgB,SAAb,CAAuB,iBAAvB,EAA0C,UAACK,MAAD,EAAY;AACpD,QAAA,KAAI,CAACI,eAAL,CAAqBJ,MAArB;AACD,OAFD;AAIArB,MAAAA,YAAY,CAACgB,SAAb,CAAuB,gBAAvB,EAAyC,YAAM;AAC7C,QAAA,KAAI,CAACU,cAAL;AACD,OAFD;AAIA1B,MAAAA,YAAY,CAACgB,SAAb,CAAuB,oBAAvB,EAA6C,YAAM;AACjD,QAAA,KAAI,CAACW,YAAL;AACD,OAFD;AAIA3B,MAAAA,YAAY,CAACgB,SAAb,CAAuB,yBAAvB,EAAkD,YAAM;AACtD,QAAA,KAAI,CAACY,iBAAL;AACD,OAFD;AAIA5B,MAAAA,YAAY,CAACgB,SAAb,CACE,eADF,EAEE,iBAAqC;AAAA,YAAlCa,MAAkC,SAAlCA,MAAkC;AAAA,YAA1BC,YAA0B,SAA1BA,YAA0B;AAAA,YAAZP,KAAY,SAAZA,KAAY;AACnCO,QAAAA,YAAY,CAACC,OAAb,CAAqB,UAAC1B,EAAD,EAAQ;AAC3B,UAAA,KAAI,CAAC2B,aAAL,CAAmBH,MAAnB,EAA2BxB,EAA3B,EAA+BkB,KAA/B;AACD,SAFD;AAGD,OANH;AASAvB,MAAAA,YAAY,CAACgB,SAAb,CAAuB,kBAAvB,EAA2C,UAACiB,IAAD,EAAU;AACnD,QAAA,KAAI,CAAC3B,UAAL,CAAgBW,IAAhB,CACE,KAAI,CAACC,cAAL,CAAoB;AAClBC,UAAAA,OAAO,EAAE,kBADS;AAElBC,UAAAA,GAAG,EAAEc,IAAI,CAACC,SAAL,CAAeF,IAAf;AAFa,SAApB,CADF;AAMD,OAPD;AASAjC,MAAAA,YAAY,CAACgB,SAAb,CAAuB,wBAAvB,EAAiD,UAACI,GAAD,EAAS;AACxD,QAAA,KAAI,CAACd,UAAL,CAAgBW,IAAhB,CACE,KAAI,CAACC,cAAL,CAAoB;AAClBC,UAAAA,OAAO,EAAE,wBADS;AAElBC,UAAAA,GAAG,EAAHA;AAFkB,SAApB,CADF;AAMD,OAPD;AASApB,MAAAA,YAAY,CAACgB,SAAb,CAAuB,yBAAvB,EAAkD,UAACI,GAAD,EAAS;AACzD,QAAA,KAAI,CAACd,UAAL,CAAgBW,IAAhB,CACE,KAAI,CAACC,cAAL,CAAoB;AAClBC,UAAAA,OAAO,EAAE,yBADS;AAElBC,UAAAA,GAAG,EAAHA;AAFkB,SAApB,CADF;AAMD,OAPD;AASApB,MAAAA,YAAY,CAACgB,SAAb,CAAuB,sBAAvB,EAA+C,UAACoB,OAAD,EAAa;AAC1D,QAAA,KAAI,CAAC9B,UAAL,CAAgBW,IAAhB,CACE,KAAI,CAACC,cAAL,CAAoB;AAClBC,UAAAA,OAAO,EAAE,sBADS;AAElBC,UAAAA,GAAG,EAAEgB;AAFa,SAApB,CADF;AAMD,OAPD;AASApC,MAAAA,YAAY,CAACgB,SAAb,CAAuB,gBAAvB,EAAyC,UAACO,KAAD,EAAW;AAClD,QAAA,KAAI,CAACjB,UAAL,CAAgBW,IAAhB,CACE,KAAI,CAACC,cAAL,CAAoB;AAClBC,UAAAA,OAAO,EAAE,gBADS;AAElBC,UAAAA,GAAG,EAAEG;AAFa,SAApB,CADF;AAMD,OAPD;AASAvB,MAAAA,YAAY,CAACgB,SAAb,CAAuB,eAAvB,EAAwC,UAACiB,IAAD,EAAU;AAChD,QAAA,KAAI,CAAC3B,UAAL,CAAgBW,IAAhB,CACE,KAAI,CAACC,cAAL,CAAoB;AAClBC,UAAAA,OAAO,EAAE,eADS;AAElBC,UAAAA,GAAG,EAAEa;AAFa,SAApB,CADF;AAMD,OAPD;AASAjC,MAAAA,YAAY,CAACgB,SAAb,CAAuB,+BAAvB,EAAwD,UAACiB,IAAD,EAAU;AAChE,QAAA,KAAI,CAAC3B,UAAL,CAAgBW,IAAhB,CACE,KAAI,CAACC,cAAL,CAAoB;AAClBC,UAAAA,OAAO,EAAE,+BADS;AAElBC,UAAAA,GAAG,EAAEa;AAFa,SAApB,CADF;AAMD,OAPD;AASAjC,MAAAA,YAAY,CAACgB,SAAb,CAAuB,mCAAvB,EAA4D,UAACiB,IAAD,EAAU;AACpE,QAAA,KAAI,CAAC3B,UAAL,CAAgBW,IAAhB,CACE,KAAI,CAACC,cAAL,CAAoB;AAClBC,UAAAA,OAAO,EAAE,+BADS;AAElBC,UAAAA,GAAG,EAAEa;AAFa,SAApB,CADF;AAMD,OAPD;AASAjC,MAAAA,YAAY,CAACgB,SAAb,CAAuB,eAAvB,EAAwC,UAACiB,IAAD,EAAU;AAChD,QAAA,KAAI,CAAC3B,UAAL,CAAgBW,IAAhB,CACE,KAAI,CAACC,cAAL,CAAoB;AAClBC,UAAAA,OAAO,EAAE,oBADS;AAElBC,UAAAA,GAAG,EAAEa;AAFa,SAApB,CADF;AAMD,OAPD;AAQD;;;4CAEuB;AACtB,WAAK3B,UAAL,CAAgBW,IAAhB,CACE,KAAKC,cAAL,CAAoB;AAClBC,QAAAA,OAAO,EAAE,UADS;AAElBC,QAAAA,GAAG,EAAE,KAAKf;AAFQ,OAApB,CADF,EADsB,CAMpB;AACH;;;2CAEsBgC,K,EAAO;AAC5BC,MAAAA,OAAO,CAACC,GAAR,4BAAgCF,KAAhC;AACD;;;0CAEqBhB,M,EAAQ;AAC5BrB,MAAAA,YAAY,CAACwC,OAAb,CAAqB,uBAArB,EAA8CnB,MAA9C;AACD;;;0CAEqBD,G,EAAK;AACzBpB,MAAAA,YAAY,CAACwC,OAAb,CAAqB,uBAArB,EAA8CpB,GAA9C;AACD;;;sCAEiBA,G,EAAK;AACrBpB,MAAAA,YAAY,CAACwC,OAAb,CAAqB,mBAArB,EAA0CpB,GAA1C;AACD;;;8CAEyBA,G,EAAK;AAC7BpB,MAAAA,YAAY,CAACwC,OAAb,CAAqB,2BAArB,EAAkDpB,GAAlD;AACD;;;+CAE0BA,G,EAAK;AAC9BpB,MAAAA,YAAY,CAACwC,OAAb,CAAqB,4BAArB,EAAmDpB,GAAnD;AACD;;;kDAE6BA,G,EAAK;AACjCpB,MAAAA,YAAY,CAACwC,OAAb,CAAqB,+BAArB,EAAsDpB,GAAtD;AACD;;;+CAE0BA,G,EAAK;AAC9BpB,MAAAA,YAAY,CAACwC,OAAb,CAAqB,4BAArB,EAAmDpB,GAAnD;AACD;;;8CAEyBA,G,EAAK;AAC7BpB,MAAAA,YAAY,CAACwC,OAAb,CAAqB,2BAArB,EAAkDpB,GAAlD;AACD;;;wCAEmB;AAClBpB,MAAAA,YAAY,CAACwC,OAAb,CAAqB,aAArB;AACD;;;6CAEwB;AACvBxC,MAAAA,YAAY,CAACwC,OAAb,CAAqB,wBAArB;AACD;;;uCAEkBpB,G,EAAK;AACtBpB,MAAAA,YAAY,CAACwC,OAAb,CAAqB,iBAArB,EAAwCpB,GAAxC;AACD;;;6CAEwBqB,C,EAAG;AAAA,wBACDP,IAAI,CAACQ,KAAL,CAAWD,CAAC,CAACR,IAAb,CADC;AAAA,UAClBd,OADkB,eAClBA,OADkB;AAAA,UACTC,GADS,eACTA,GADS;;AAG1B,cAAQD,OAAR;AACE,aAAK,aAAL;AACE,eAAKwB,yBAAL,CAA+BvB,GAA/B;AACA;;AAEF,aAAK,OAAL;AAAc;AACZ;AACA,eAAKwB,qBAAL,CAA2BxB,GAA3B;AACA;;AAEF,aAAK,UAAL;AAAiB;AACf;AACA,eAAKyB,qBAAL,CAA2BzB,GAA3B;AACA;;AAEF,aAAK,mBAAL;AACE,eAAK0B,iBAAL,CAAuB1B,GAAvB;AACA;;AAEF,aAAK,eAAL;AAAsB;AACpB;AACA,eAAK2B,0BAAL,CAAgC3B,GAAhC;AACA;;AAEF,aAAK,kBAAL;AACE,eAAK4B,6BAAL,CAAmC5B,GAAnC,EADF,CAC0C;;AACxC;;AAEF,aAAK,0BAAL;AACE,eAAK6B,0BAAL,CAAgC7B,GAAhC;AACA;;AAEF,aAAK,0BAAL;AACE,eAAK8B,yBAAL,CAA+B9B,GAA/B;AACA;;AAEF,aAAK,aAAL;AACE,eAAK+B,iBAAL;AACA;;AAEF,aAAK,oBAAL;AACE,eAAKC,sBAAL;AACA;;AAEF,aAAK,mBAAL;AACE,eAAKC,kBAAL,CAAwBjC,GAAxB;AACA;;AAEF;AACE,gBAAM,IAAIkC,KAAJ,mBAAqBnC,OAArB,+BAAN;AAjDJ;AAmDD;;;mCAEc;AACb,WAAKb,UAAL,CAAgBW,IAAhB,CACE,KAAKC,cAAL,CAAoB;AAClBC,QAAAA,OAAO,EAAE,YADS;AAElBC,QAAAA,GAAG,EAAE,KAAKf;AAFQ,OAApB,CADF;AAOAL,MAAAA,YAAY,CAACwC,OAAb,CAAqB,cAArB;AACD;;;wCAEmB;AAClB,WAAKlC,UAAL,CAAgBW,IAAhB,CACE,KAAKC,cAAL,CAAoB;AAClBC,QAAAA,OAAO,EAAE,iBADS;AAElBC,QAAAA,GAAG,EAAE,KAAKf;AAFQ,OAApB,CADF;AAOAL,MAAAA,YAAY,CAACwC,OAAb,CAAqB,mBAArB;AACD;;;yCAEoBnB,M,EAAQ;AAC3B,WAAKf,UAAL,CAAgBW,IAAhB,CACE,KAAKC,cAAL,CAAoB;AAClBC,QAAAA,OAAO,EAAE,gBADS;AAElBC,QAAAA,GAAG,EAAEC;AAFa,OAApB,CADF;AAMD;;;iCAEYE,K,EAAOF,M,EAAQlB,E,EAAI;AAC9B,WAAKG,UAAL,CAAgBW,IAAhB,CACE,KAAKC,cAAL,CAAoB;AAClBC,QAAAA,OAAO,EAAE,QADS;AAElBC,QAAAA,GAAG,EAAEc,IAAI,CAACC,SAAL,CAAe;AAAEZ,UAAAA,KAAK,EAALA,KAAF;AAASF,UAAAA,MAAM,EAANA,MAAT;AAAiBlB,UAAAA,EAAE,EAAFA;AAAjB,SAAf;AAFa,OAApB,CADF;AAOAH,MAAAA,YAAY,CAACwC,OAAb,CAAqB,eAArB;AACD;;;oCAEenB,M,EAAQ;AACtB,WAAKf,UAAL,CAAgBW,IAAhB,CACE,KAAKC,cAAL,CAAoB;AAClBC,QAAAA,OAAO,EAAE,WADS;AAElBC,QAAAA,GAAG,EAAEC;AAFa,OAApB,CADF;AAMD;;;qCAEgB;AACf,WAAKf,UAAL,CAAgBW,IAAhB,CACE,KAAKC,cAAL,CAAoB;AAClBC,QAAAA,OAAO,EAAE,UADS;AAElBC,QAAAA,GAAG,EAAE;AAFa,OAApB,CADF;AAMD;;;kCAEaS,M,EAAQ0B,W,EAAahC,K,EAAO;AACxC,WAAKjB,UAAL,CAAgBW,IAAhB,CACE,KAAKC,cAAL,CAAoB;AAClBC,QAAAA,OAAO,EAAE,eADS;AAElBC,QAAAA,GAAG,EAAEc,IAAI,CAACC,SAAL,CAAe;AAAEN,UAAAA,MAAM,EAANA,MAAF;AAAU0B,UAAAA,WAAW,EAAXA,WAAV;AAAuBhC,UAAAA,KAAK,EAALA;AAAvB,SAAf;AAFa,OAApB,CADF;AAMD;;;mCAEcH,G,EAAK;AAAA,UACVhB,QADU,GACG,IADH,CACVA,QADU;;AAElB,UAAMoD,eAAe,mCAAQpC,GAAR;AAAahB,QAAAA,QAAQ,EAARA,QAAb;AAAuBH,QAAAA,IAAI,EAAJA;AAAvB,QAArB;;AACA,aAAOiC,IAAI,CAACC,SAAL,CAAeqB,eAAf,CAAP;AACD;;;;;;SArUkBtD,sB","sourcesContent":["const url = 'ws://localhost:8080'\nimport { EventEmitter } from '../components/util/EventEmitter'\nconst role = 'Student'\n/**\n * QueueWebSocket controls the web socket business logic for the course queue and\n * functions as a controller for the queue state\n */\n\nexport default class StudentWebSocketClient {\n  start({ me, courseId }) {\n    const { id } = me\n    this.id = id\n    this.courseId = courseId\n\n    this.connection = new WebSocket(url)\n    this.connection.onopen = this.processConnectionOpen.bind(this)\n    this.connection.onerror = this.processConnectionError.bind(this)\n    this.connection.onmessage = this.processConnectionMessage.bind(this)\n\n    this.defineEventEmitterCallbacks()\n  }\n\n  defineEventEmitterCallbacks() {\n    EventEmitter.subscribe('greeting', () => {\n      this.connection.send(\n        this.prepareMessage({\n          msgType: 'greeting',\n          msg: this.id,\n        })\n      )\n    })\n\n    EventEmitter.subscribe('signalStudentTimeout', (TAName) =>\n      this.signalStudentTimeout(TAName)\n    )\n\n    EventEmitter.subscribe('signalJoinTA', ({ group, TAName, me }) => {\n      this.signalJoinTA(group, TAName, me)\n    })\n\n    EventEmitter.subscribe('signalDeclineTA', (TAName) => {\n      this.signalDeclineTA(TAName)\n    })\n\n    EventEmitter.subscribe('signalCallOver', () => {\n      this.signalCallOver()\n    })\n\n    EventEmitter.subscribe('signalAddMeToQueue', () => {\n      this.addMeToQueue()\n    })\n\n    EventEmitter.subscribe('signalRemoveMeFromQueue', () => {\n      this.removeMeFromQueue()\n    })\n\n    EventEmitter.subscribe(\n      'sendOutInvite',\n      ({ sender, recepientIds, group }) => {\n        recepientIds.forEach((id) => {\n          this.sendOutInvite(sender, id, group)\n        })\n      }\n    )\n\n    EventEmitter.subscribe('requestJoinGroup', (data) => {\n      this.connection.send(\n        this.prepareMessage({\n          msgType: 'requestJoinGroup',\n          msg: JSON.stringify(data),\n        })\n      )\n    })\n\n    EventEmitter.subscribe('acceptGroupJoinRequest', (msg) => {\n      this.connection.send(\n        this.prepareMessage({\n          msgType: 'acceptGroupJoinRequest',\n          msg,\n        })\n      )\n    })\n\n    EventEmitter.subscribe('declineGroupJoinRequest', (msg) => {\n      this.connection.send(\n        this.prepareMessage({\n          msgType: 'declineGroupJoinRequest',\n          msg,\n        })\n      )\n    })\n\n    EventEmitter.subscribe('classGroupSetChanged', (classId) => {\n      this.connection.send(\n        this.prepareMessage({\n          msgType: 'classGroupSetChanged',\n          msg: classId,\n        })\n      )\n    })\n\n    EventEmitter.subscribe('userLeaveGroup', (group) => {\n      this.connection.send(\n        this.prepareMessage({\n          msgType: 'userLeaveGroup',\n          msg: group,\n        })\n      )\n    })\n\n    EventEmitter.subscribe('userJoinGroup', (data) => {\n      this.connection.send(\n        this.prepareMessage({\n          msgType: 'userJoinGroup',\n          msg: data,\n        })\n      )\n    })\n\n    EventEmitter.subscribe('startLeaderAppointmentProcess', (data) => {\n      this.connection.send(\n        this.prepareMessage({\n          msgType: 'startLeaderAppointmentProcess',\n          msg: data,\n        })\n      )\n    })\n\n    EventEmitter.subscribe('sendLeaderAppointmentNotification', (data) => {\n      this.connection.send(\n        this.prepareMessage({\n          msgType: 'leaderAppointmentNotification',\n          msg: data,\n        })\n      )\n    })\n\n    EventEmitter.subscribe('screenShareOn', (data) => {\n      this.connection.send(\n        this.prepareMessage({\n          msgType: 'personWhoIsSharing',\n          msg: data,\n        })\n      )\n    })\n  }\n\n  processConnectionOpen() {\n    this.connection.send(\n      this.prepareMessage({\n        msgType: 'greeting',\n        msg: this.id,\n      })\n    ) // notify the server which courseId this websocket belongs to\n  }\n\n  processConnectionError(error) {\n    console.log(`WebSocket error: ${error}`)\n  }\n\n  activateYourTurnModal(TAName) {\n    EventEmitter.publish('activateYourTurnModal', TAName)\n  }\n\n  updateStudentsInQueue(msg) {\n    EventEmitter.publish('updateStudentsInQueue', msg)\n  }\n\n  updateCurrStudent(msg) {\n    EventEmitter.publish('updateCurrStudent', msg)\n  }\n\n  initializeQueueOnGreeting(msg) {\n    EventEmitter.publish('initializeQueueOnGreeting', msg)\n  }\n\n  activateReceiveInviteModal(msg) {\n    EventEmitter.publish('activateReceiveInviteModal', msg)\n  }\n\n  activateGroupJoinRequestModal(msg) {\n    EventEmitter.publish('activateGroupJoinRequestModal', msg)\n  }\n\n  joinPrivateGroupOnApproval(msg) {\n    EventEmitter.publish('joinPrivateGroupOnApproval', msg)\n  }\n\n  notifyJoinRequestDeclined(msg) {\n    EventEmitter.publish('notifyJoinRequestDeclined', msg)\n  }\n\n  notifyFetchGroups() {\n    EventEmitter.publish('fetchGroups')\n  }\n\n  refreshScreenContainer() {\n    EventEmitter.publish('refreshScreenContainer')\n  }\n\n  changeScreensharer(msg) {\n    EventEmitter.publish('newScreensharer', msg)\n  }\n\n  processConnectionMessage(e) {\n    const { msgType, msg } = JSON.parse(e.data)\n\n    switch (msgType) {\n      case 'greetingAck':\n        this.initializeQueueOnGreeting(msg)\n        break\n\n      case 'queue': // in this case, the server will send a message indicating the current students in the queue\n        // msg - the new queue\n        this.updateStudentsInQueue(msg)\n        break\n\n      case 'yourTurn': // in this case, which is only if you are a student, the server notifies that it is your turn\n        // msg - the TA that notifies you\n        this.activateYourTurnModal(msg)\n        break\n\n      case 'currStudentUpdate':\n        this.updateCurrStudent(msg)\n        break\n\n      case 'receiveInvite': // in this case, another student invites you to their group\n        // msg - sender, group\n        this.activateReceiveInviteModal(msg)\n        break\n\n      case 'groupJoinRequest':\n        this.activateGroupJoinRequestModal(msg) // msg - the name of the student wanting to join\n        break\n\n      case 'groupJoinRequestApproved':\n        this.joinPrivateGroupOnApproval(msg)\n        break\n\n      case 'groupJoinRequestDeclined':\n        this.notifyJoinRequestDeclined(msg)\n        break\n\n      case 'fetchGroups':\n        this.notifyFetchGroups()\n        break\n\n      case 'newLeaderAppointed':\n        this.refreshScreenContainer()\n        break\n\n      case 'fetchScreensharer':\n        this.changeScreensharer(msg)\n        break\n\n      default:\n        throw new Error(`Message ${msgType} is incorrectly formatted`)\n    }\n  }\n\n  addMeToQueue() {\n    this.connection.send(\n      this.prepareMessage({\n        msgType: 'addToQueue',\n        msg: this.id,\n      })\n    )\n\n    EventEmitter.publish('addMeToQueue')\n  }\n\n  removeMeFromQueue() {\n    this.connection.send(\n      this.prepareMessage({\n        msgType: 'removeFromQueue',\n        msg: this.id,\n      })\n    )\n\n    EventEmitter.publish('removeMeFromQueue')\n  }\n\n  signalStudentTimeout(TAName) {\n    this.connection.send(\n      this.prepareMessage({\n        msgType: 'studentTimeout',\n        msg: TAName,\n      })\n    )\n  }\n\n  signalJoinTA(group, TAName, me) {\n    this.connection.send(\n      this.prepareMessage({\n        msgType: 'joinTA',\n        msg: JSON.stringify({ group, TAName, me }),\n      })\n    )\n\n    EventEmitter.publish('clearLeftSide')\n  }\n\n  signalDeclineTA(TAName) {\n    this.connection.send(\n      this.prepareMessage({\n        msgType: 'declineTA',\n        msg: TAName,\n      })\n    )\n  }\n\n  signalCallOver() {\n    this.connection.send(\n      this.prepareMessage({\n        msgType: 'callOver',\n        msg: 'callOver',\n      })\n    )\n  }\n\n  sendOutInvite(sender, recepientId, group) {\n    this.connection.send(\n      this.prepareMessage({\n        msgType: 'sendOutInvite',\n        msg: JSON.stringify({ sender, recepientId, group }),\n      })\n    )\n  }\n\n  prepareMessage(msg) {\n    const { courseId } = this\n    const enrichedPayload = { ...msg, courseId, role }\n    return JSON.stringify(enrichedPayload)\n  }\n}\n"]},"metadata":{},"sourceType":"module"}