{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport Publisher from './publisher';\nimport { EventEmitter } from './util/EventEmitter';\nimport { OTSession, OTPublisher, OTStreams, OTSubscriber, createSession } from 'opentok-react';\nimport { Button, List } from 'semantic-ui-react';\n\nclass ScreenContainer extends React.Component {\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"handlePublish\", () => {\n      console.log('Successfully published!');\n    });\n\n    _defineProperty(this, \"handleSubscribe\", () => {\n      console.log('Subscribed!');\n    });\n\n    _defineProperty(this, \"handleSessionError\", error => {\n      console.error(error);\n    });\n\n    _defineProperty(this, \"handlePublishError\", error => {\n      console.error(error);\n    });\n\n    _defineProperty(this, \"handleSubscribeError\", error => {\n      console.error(error);\n    });\n\n    this.state = {\n      ssButton: true,\n      streams: [],\n      focusStream: {},\n      videoButton: true\n    };\n    this.defineEventEmitterCallbacks();\n    this.sessionEventHandlers = {\n      sessionConnected: () => {},\n      sessionDisconnected: () => {},\n      sessionReconnected: () => {},\n      sessionReconnecting: () => {}\n    };\n    this.publishEventHandlers = {\n      accessDenied: () => {},\n      streamCreated: () => {},\n      streamDestroyed: () => {}\n    };\n    this.subscribeEventHandlers = {\n      videoEnabled: () => {},\n      videoDisabled: () => {}\n    };\n    const {\n      sessionId,\n      token,\n      onLeave\n    } = this.props;\n  }\n\n  defineEventEmitterCallbacks() {\n    EventEmitter.subscribe('disableVideoButton', () => {\n      this.setState({\n        videoButton: false\n      });\n    });\n    EventEmitter.subscribe('enableVideoButton', () => {\n      this.setState({\n        videoButton: true\n      });\n    });\n  }\n\n  expandButton(stream) {\n    return __jsx(Button, {\n      content: \"Expand\",\n      onClick: () => {\n        this.setState({\n          focusStream: stream\n        });\n      },\n      style: {\n        fontSize: '.5vw'\n      }\n    });\n  }\n\n  getStreamToDisplay() {\n    return this.state.focusStream != undefined ? __jsx(OTSubscriber, {\n      key: this.state.focusStream.id,\n      session: this.sessionHelper.session,\n      stream: this.state.focusStream,\n      properties: {\n        maxWidth: '75vw',\n        maxHeight: '75vh',\n        height: '85vh',\n        width: '48vw'\n      },\n      onSubscribe: this.handleSubscribe,\n      onError: this.handleSubscribeError\n    }) : null;\n  }\n\n  screenShareButton() {\n    return this.state.ssButton === true ? __jsx(Button, {\n      onClick: () => {\n        EventEmitter.publish('startScreenShare');\n        this.setState({\n          ssButton: false\n        });\n      },\n      style: {\n        fontSize: '.8vw',\n        display: 'inline-flex'\n      },\n      icon: \"tv\",\n      content: \"Share Screen\"\n    }) : __jsx(Button, {\n      onClick: () => {\n        EventEmitter.publish('stopScreenShare');\n        this.setState({\n          ssButton: true\n        });\n      },\n      icon: \"tv\",\n      style: {\n        fontSize: '.8vw',\n        display: 'inline-flex'\n      },\n      content: \"Stop Screen Share\"\n    });\n  }\n\n  videoStateButton() {\n    return this.state.videoButton === true ? __jsx(Button, {\n      onClick: () => {\n        EventEmitter.publish('disableVideo');\n      },\n      icon: \"hide\",\n      style: {\n        fontSize: '.8vw',\n        display: 'inline-flex'\n      },\n      content: \"Disable video\"\n    }) : __jsx(Button, {\n      onClick: () => {\n        EventEmitter.publish('enableVideo');\n      },\n      icon: \"eye\",\n      style: {\n        fontSize: '.8vw',\n        display: 'inline-flex'\n      },\n      content: \"Enable video\"\n    });\n  }\n\n  componentWillMount() {\n    const {\n      sessionId,\n      token,\n      onLeave\n    } = this.props;\n    this.sessionHelper = createSession({\n      apiKey: `${process.env.NEXT_PUBLIC_VV_API_KEY}`,\n      sessionId: `${sessionId}`,\n      token: `${token}`,\n      onStreamsUpdated: streams => {\n        this.setState({\n          streams\n        });\n      }\n    });\n  }\n\n  componentWillUnmount() {\n    this.sessionHelper.disconnect();\n  }\n\n  render() {\n    const {\n      sessionId,\n      token,\n      onLeave\n    } = this.props;\n    return __jsx(React.Fragment, null, __jsx(\"div\", {\n      style: {\n        display: 'inline-flex',\n        width: '100%',\n        maxHeight: '86vh'\n      }\n    }, __jsx(\"div\", {\n      style: {\n        width: '78%',\n        maxHeight: '85vh',\n        overflow: 'auto'\n      }\n    }, this.getStreamToDisplay()), __jsx(\"div\", {\n      style: {\n        width: '22%',\n        maxHeight: '85vh',\n        overflow: 'auto',\n        height: '1000px'\n      }\n    }, __jsx(Publisher, {\n      style: {\n        width: '13.57vw',\n        maxWidth: '13.57vw',\n        marginBottom: '5px'\n      },\n      session: this.sessionHelper.session\n    }), this.state.streams.map(stream => __jsx(React.Fragment, null, __jsx(Button, {\n      onClick: () => {\n        this.setState({\n          focusStream: stream\n        });\n      },\n      style: {\n        padding: '0px',\n        width: '100%',\n        maxHeight: '18vh',\n        margin: '0px'\n      }\n    }, __jsx(OTSubscriber, {\n      key: stream.id,\n      session: this.sessionHelper.session,\n      stream: stream,\n      properties: {\n        width: '100%',\n        height: '18vh',\n        maxHeight: '18vh',\n        margin: '0px'\n      },\n      onSubscribe: this.handleSubscribe,\n      onError: this.handleSubscribeError\n    })))))), this.videoStateButton(), this.screenShareButton(), __jsx(Button, {\n      onClick: onLeave,\n      color: \"red\",\n      icon: \"close\",\n      style: {\n        fontSize: '.8vw',\n        display: 'inline-flex'\n      },\n      content: \"Leave call\"\n    }));\n  }\n\n}\n\nScreenContainer.propTypes = {\n  sessionId: PropTypes.string.isRequired,\n  token: PropTypes.string.isRequired,\n  onLeave: PropTypes.func.isRequired\n};\nexport default ScreenContainer;","map":{"version":3,"sources":["C:/Users/ryanj/Documents/mercury/components/screenContainer.js"],"names":["React","PropTypes","Publisher","EventEmitter","OTSession","OTPublisher","OTStreams","OTSubscriber","createSession","Button","List","ScreenContainer","Component","constructor","props","console","log","error","state","ssButton","streams","focusStream","videoButton","defineEventEmitterCallbacks","sessionEventHandlers","sessionConnected","sessionDisconnected","sessionReconnected","sessionReconnecting","publishEventHandlers","accessDenied","streamCreated","streamDestroyed","subscribeEventHandlers","videoEnabled","videoDisabled","sessionId","token","onLeave","subscribe","setState","expandButton","stream","fontSize","getStreamToDisplay","undefined","id","sessionHelper","session","maxWidth","maxHeight","height","width","handleSubscribe","handleSubscribeError","screenShareButton","publish","display","videoStateButton","componentWillMount","apiKey","process","env","NEXT_PUBLIC_VV_API_KEY","onStreamsUpdated","componentWillUnmount","disconnect","render","overflow","marginBottom","map","padding","margin","propTypes","string","isRequired","func"],"mappings":"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","sourcesContent":["import React from 'react'\nimport PropTypes from 'prop-types'\nimport Publisher from './publisher'\nimport { EventEmitter } from './util/EventEmitter'\nimport { OTSession, OTPublisher, OTStreams, OTSubscriber, createSession } from 'opentok-react'\nimport { Button, List } from 'semantic-ui-react'\n\nclass ScreenContainer extends React.Component {\n  constructor(props) {\n    super(props)\n\n    this.state = {\n      ssButton: true,\n      streams: [],\n      focusStream: {},\n      videoButton: true\n    }\n\n    this.defineEventEmitterCallbacks()\n\n    this.sessionEventHandlers = {\n      sessionConnected: () => {},\n      sessionDisconnected: () => {},\n      sessionReconnected: () => {},\n      sessionReconnecting: () => {},\n    }\n\n    this.publishEventHandlers = {\n      accessDenied: () => {},\n      streamCreated: () => {},\n      streamDestroyed: () => {},\n    }\n\n    this.subscribeEventHandlers = {\n      videoEnabled: () => {},\n      videoDisabled: () => {},\n    }\n\n    const { sessionId, token, onLeave } = this.props\n  }\n\n  handlePublish = () => {\n    console.log('Successfully published!')\n  }\n\n  handleSubscribe = () => {\n    console.log('Subscribed!')\n  }\n\n  handleSessionError = (error) => {\n    console.error(error)\n  }\n\n  handlePublishError = (error) => {\n    console.error(error)\n  }\n\n  handleSubscribeError = (error) => {\n    console.error(error)\n  }\n\n  defineEventEmitterCallbacks() {\n    EventEmitter.subscribe('disableVideoButton', () => {\n      this.setState({ videoButton: false })\n    })\n    EventEmitter.subscribe('enableVideoButton', () => {\n      this.setState({ videoButton: true })\n    })\n  }\n\n  expandButton(stream) {\n    return (\n      <Button\n        content ='Expand'\n        onClick = {() => {this.setState({focusStream: stream})}}\n        style = {{fontSize: '.5vw'}}\n      />\n    )\n  }\n\n  getStreamToDisplay(){\n    return this.state.focusStream != undefined ?(\n      <OTSubscriber\n        key={this.state.focusStream.id}\n        session={this.sessionHelper.session}\n        stream={this.state.focusStream}\n        properties={{ maxWidth: '75vw', maxHeight: '75vh', height: '85vh', width: '48vw' }}\n        onSubscribe={this.handleSubscribe}\n        onError={this.handleSubscribeError}\n      />\n    ) : null\n  }\n\n  screenShareButton() {\n    return this.state.ssButton === true ? (\n      <Button\n        onClick = {() => {\n          EventEmitter.publish('startScreenShare')\n          this.setState({ssButton: false})\n          }\n        }\n        style = {{fontSize: '.8vw', display: 'inline-flex'}}\n        icon = 'tv'\n        content = \"Share Screen\"\n      />\n    ) : (\n      <Button\n          onClick = {() => {\n              EventEmitter.publish('stopScreenShare')\n              this.setState({ssButton: true})\n            }\n          }\n          icon = 'tv'\n          style = {{fontSize: '.8vw', display: 'inline-flex'}}\n          content = \"Stop Screen Share\"\n        />\n    )\n  }\n\n  videoStateButton() {\n    return this.state.videoButton === true ? (\n      <Button\n        onClick={() => {\n          EventEmitter.publish('disableVideo')\n        }}\n        icon='hide'\n        style = {{fontSize: '.8vw', display: 'inline-flex'}}\n        content=\"Disable video\"\n      />\n    ) : (\n      <Button\n        onClick={() => {\n          EventEmitter.publish('enableVideo')\n        }}\n        icon='eye'\n        style = {{fontSize: '.8vw', display: 'inline-flex'}}\n        content=\"Enable video\"\n      />\n    )\n  }\n\n  componentWillMount() {\n    const { sessionId, token, onLeave } = this.props\n    this.sessionHelper = createSession({\n      apiKey: `${process.env.NEXT_PUBLIC_VV_API_KEY}`,\n      sessionId: `${sessionId}`,\n      token: `${token}`,\n      onStreamsUpdated: streams => { this.setState({ streams }); }\n    });\n  }\n\n  componentWillUnmount() {\n    this.sessionHelper.disconnect();\n  }\n\n  render() {\n    const { sessionId, token, onLeave } = this.props\n    return (\n      <>\n      <div style = {{display: 'inline-flex', width: '100%', maxHeight: '86vh'}}>\n        <div style = {{ width: '78%', maxHeight: '85vh', overflow: 'auto'}}>\n          {this.getStreamToDisplay()}\n        </div>\n        <div style = {{width: '22%', maxHeight: '85vh', overflow: 'auto', height: '1000px'}}>\n          <Publisher style = {{width: '13.57vw', maxWidth: '13.57vw', marginBottom: '5px'}} session={this.sessionHelper.session}/>\n          {this.state.streams.map((stream) => (\n            <>\n            <Button\n            onClick = {() => {this.setState({focusStream: stream})}}\n            style = {{padding: '0px', width: '100%', maxHeight: '18vh', margin: '0px'}}\n            >\n            <OTSubscriber\n              key={stream.id}\n              session={this.sessionHelper.session}\n              stream={stream}\n              properties={{ width: '100%', height: '18vh', maxHeight: '18vh', margin: '0px' }}\n              onSubscribe={this.handleSubscribe}\n              onError={this.handleSubscribeError}\n            />\n            </Button>\n            </>\n          ))}\n        </div>\n      </div>\n      {this.videoStateButton()}\n      {this.screenShareButton()}\n      <Button\n        onClick={onLeave}\n        color=\"red\"\n        icon=\"close\"\n        style = {{fontSize: '.8vw', display: 'inline-flex'}}\n        content=\"Leave call\"\n      />\n      </>\n    )\n  }\n}\n\n\nScreenContainer.propTypes = {\n  sessionId: PropTypes.string.isRequired,\n  token: PropTypes.string.isRequired,\n  onLeave: PropTypes.func.isRequired,\n}\n\nexport default ScreenContainer\n"]},"metadata":{},"sourceType":"module"}