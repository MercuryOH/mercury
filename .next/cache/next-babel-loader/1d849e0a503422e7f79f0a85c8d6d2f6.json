{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport * as api from '../../util/mercuryService';\nimport StudentQueueView from './student/studentQueueView';\nimport TAQueueView from './ta/taQueueView';\n\nclass Queue extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      isDataLoaded: false,\n      me: {},\n      classData: [],\n      office: {}\n    };\n  }\n\n  componentDidMount() {\n    this.courseId = Number(window.location.href.split('/')[4]);\n    let me = {};\n    let classData = {};\n    let office = {};\n    api.getMe().then(meData => {\n      me = meData;\n    }).then(() => api.getClasses()).then(classPayload => {\n      classData = classPayload;\n    }).then(() => api.getClass(this.courseId)).then(cclass => {\n      office = cclass.groups.find(group => group.type === 'office');\n    }).then(() => this.setState({\n      me,\n      classData,\n      office,\n      isDataLoaded: true\n    }));\n  }\n\n  getRoleForClass() {\n    const {\n      classData\n    } = this.state;\n    let userRole = null;\n    classData.forEach(row => {\n      let {\n        id,\n        role\n      } = row;\n\n      if (this.courseId === Number(id)) {\n        userRole = role;\n      }\n    });\n    return userRole;\n  }\n\n  render() {\n    const {\n      isDataLoaded,\n      me,\n      office\n    } = this.state;\n\n    if (!isDataLoaded) {\n      return null;\n    }\n\n    if (this.getRoleForClass() === 'Student') {\n      return __jsx(StudentQueueView, {\n        me: me,\n        onJoin: this.props.onJoin,\n        office: office,\n        classId: this.courseId\n      });\n    }\n\n    return __jsx(TAQueueView, {\n      me: me,\n      onJoin: this.props.onJoin\n    });\n  }\n\n}\n\nQueue.propTypes = {\n  onJoin: PropTypes.func.isRequired\n};\nexport default Queue;","map":{"version":3,"sources":["C:/Users/ryanj/Documents/mercury/components/queue/queue.js"],"names":["React","Component","PropTypes","api","StudentQueueView","TAQueueView","Queue","constructor","props","state","isDataLoaded","me","classData","office","componentDidMount","courseId","Number","window","location","href","split","getMe","then","meData","getClasses","classPayload","getClass","cclass","groups","find","group","type","setState","getRoleForClass","userRole","forEach","row","id","role","render","onJoin","propTypes","func","isRequired"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport PropTypes from 'prop-types'\nimport * as api from '../../util/mercuryService'\nimport StudentQueueView from './student/studentQueueView'\nimport TAQueueView from './ta/taQueueView'\n\nclass Queue extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      isDataLoaded: false,\n      me: {},\n      classData: [],\n      office: {},\n    }\n  }\n\n  componentDidMount() {\n    this.courseId = Number(window.location.href.split('/')[4])\n\n    let me = {}\n    let classData = {}\n    let office = {}\n\n    api\n      .getMe()\n      .then((meData) => {\n        me = meData\n      })\n      .then(() => api.getClasses())\n      .then((classPayload) => {\n        classData = classPayload\n      })\n\n      .then(() => api.getClass(this.courseId))\n      .then((cclass) => {\n        office = cclass.groups.find((group) => group.type === 'office')\n      })\n\n      .then(() => this.setState({ me, classData, office, isDataLoaded: true }))\n  }\n\n  getRoleForClass() {\n    const { classData } = this.state\n    let userRole = null\n\n    classData.forEach((row) => {\n      let { id, role } = row\n      if (this.courseId === Number(id)) {\n        userRole = role\n      }\n    })\n\n    return userRole\n  }\n\n  render() {\n    const { isDataLoaded, me, office } = this.state\n    if (!isDataLoaded) {\n      return null\n    }\n\n    if (this.getRoleForClass() === 'Student') {\n      return (\n        <StudentQueueView me={me} onJoin={this.props.onJoin} office={office} classId = {this.courseId}/>\n      )\n    }\n\n    return <TAQueueView me={me} onJoin={this.props.onJoin} />\n  }\n}\n\nQueue.propTypes = {\n  onJoin: PropTypes.func.isRequired,\n}\n\nexport default Queue\n"]},"metadata":{},"sourceType":"module"}