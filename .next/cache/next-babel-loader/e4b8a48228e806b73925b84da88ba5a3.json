{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport Publisher from './publisher';\nimport { EventEmitter } from './util/EventEmitter';\nimport { OTSession, OTPublisher, OTStreams, OTSubscriber, createSession } from 'opentok-react';\nimport { Button, List } from 'semantic-ui-react';\n\nclass ScreenContainer extends React.Component {\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"handlePublish\", () => {\n      console.log('Successfully published!');\n    });\n\n    _defineProperty(this, \"handleSubscribe\", () => {\n      console.log('Subscribed!');\n    });\n\n    _defineProperty(this, \"handleSessionError\", error => {\n      console.error(error);\n    });\n\n    _defineProperty(this, \"handlePublishError\", error => {\n      console.error(error);\n    });\n\n    _defineProperty(this, \"handleSubscribeError\", error => {\n      console.error(error);\n    });\n\n    this.state = {\n      ssButton: true,\n      streams: [],\n      focusStream: {\n        id: ''\n      },\n      focusKey: ''\n    };\n    this.sessionEventHandlers = {\n      sessionConnected: () => {},\n      sessionDisconnected: () => {},\n      sessionReconnected: () => {},\n      sessionReconnecting: () => {}\n    };\n    this.publishEventHandlers = {\n      accessDenied: () => {},\n      streamCreated: () => {},\n      streamDestroyed: () => {}\n    };\n    this.subscribeEventHandlers = {\n      videoEnabled: () => {},\n      videoDisabled: () => {}\n    };\n    const {\n      sessionId,\n      token,\n      onLeave\n    } = this.props;\n  }\n\n  focus(stream) {\n    this.setState({\n      focusStream: stream\n    });\n    this.setState({\n      focusKey: `${stream.id}`\n    });\n    console.log(stream);\n  }\n\n  screenShareButton() {\n    return this.state.ssButton === true ? __jsx(Button, {\n      onClick: () => {\n        EventEmitter.publish('startScreenShare');\n        EventEmitter.publish('disableVideo');\n        this.setState({\n          ssButton: false\n        });\n      },\n      style: {\n        fontSize: '.8vw',\n        display: 'inline-flex'\n      },\n      content: \"Share Screen\"\n    }) : __jsx(Button, {\n      onClick: () => {\n        EventEmitter.publish('stopScreenShare');\n        EventEmitter.publish('enableVideo');\n        this.setState({\n          ssButton: true\n        });\n      },\n      style: {\n        fontSize: '.8vw',\n        display: 'inline-flex'\n      },\n      content: \"Stop Screen Share\"\n    });\n  }\n\n  componentWillMount() {\n    const {\n      sessionId,\n      token,\n      onLeave\n    } = this.props;\n    this.sessionHelper = createSession({\n      apiKey: `${process.env.NEXT_PUBLIC_VV_API_KEY}`,\n      sessionId: `${sessionId}`,\n      token: `${token}`,\n      onStreamsUpdated: streams => {\n        this.setState({\n          streams\n        });\n      }\n    });\n  }\n\n  componentWillUnmount() {\n    this.sessionHelper.disconnect();\n  }\n\n  render() {\n    const {\n      sessionId,\n      token,\n      onLeave\n    } = this.props;\n    return __jsx(React.Fragment, null, __jsx(\"div\", {\n      style: {\n        display: 'inline-flex',\n        width: '100%',\n        height: '1000px',\n        maxHeight: '75vh'\n      }\n    }, __jsx(\"div\", {\n      style: {\n        display: 'inline-flex',\n        width: '75%',\n        height: '1000px',\n        maxHeight: '75vh'\n      }\n    }), __jsx(\"div\", {\n      style: {\n        width: '25%',\n        maxHeight: '75vh',\n        overflow: 'auto',\n        height: '1000px'\n      }\n    }, __jsx(Publisher, {\n      style: {\n        width: '15vw'\n      },\n      session: this.sessionHelper.session\n    }), this.state.streams.map(stream => __jsx(React.Fragment, null, __jsx(OTSubscriber, {\n      key: stream.id,\n      session: this.sessionHelper.session,\n      stream: stream,\n      properties: {\n        width: '100%',\n        maxHeight: '10vh'\n      },\n      onSubscribe: this.handleSubscribe,\n      onError: this.handleSubscribeError\n    }), __jsx(Button, {\n      content: \"Expand\",\n      onClick: this.focus(stream),\n      style: {\n        fontSize: '.5vw'\n      }\n    }))))), this.screenShareButton(), __jsx(Button, {\n      onClick: onLeave,\n      color: \"red\",\n      icon: \"close\",\n      style: {\n        fontSize: '.8vw',\n        display: 'inline-flex'\n      },\n      content: \"Leave call\"\n    }));\n  }\n\n}\n\nScreenContainer.propTypes = {\n  sessionId: PropTypes.string.isRequired,\n  token: PropTypes.string.isRequired,\n  onLeave: PropTypes.func.isRequired\n};\nexport default ScreenContainer;","map":{"version":3,"sources":["C:/Users/ryanj/Documents/mercury/components/screenContainer.js"],"names":["React","PropTypes","Publisher","EventEmitter","OTSession","OTPublisher","OTStreams","OTSubscriber","createSession","Button","List","ScreenContainer","Component","constructor","props","console","log","error","state","ssButton","streams","focusStream","id","focusKey","sessionEventHandlers","sessionConnected","sessionDisconnected","sessionReconnected","sessionReconnecting","publishEventHandlers","accessDenied","streamCreated","streamDestroyed","subscribeEventHandlers","videoEnabled","videoDisabled","sessionId","token","onLeave","focus","stream","setState","screenShareButton","publish","fontSize","display","componentWillMount","sessionHelper","apiKey","process","env","NEXT_PUBLIC_VV_API_KEY","onStreamsUpdated","componentWillUnmount","disconnect","render","width","height","maxHeight","overflow","session","map","handleSubscribe","handleSubscribeError","propTypes","string","isRequired","func"],"mappings":"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","sourcesContent":["import React from 'react'\nimport PropTypes from 'prop-types'\nimport Publisher from './publisher'\nimport { EventEmitter } from './util/EventEmitter'\nimport { OTSession, OTPublisher, OTStreams, OTSubscriber, createSession } from 'opentok-react'\nimport { Button, List } from 'semantic-ui-react'\n\nclass ScreenContainer extends React.Component {\n  constructor(props) {\n    super(props)\n\n    this.state = {\n      ssButton: true,\n      streams: [],\n      focusStream: {\n        id: '',\n\n      },\n      focusKey: ''\n    }\n\n    this.sessionEventHandlers = {\n      sessionConnected: () => {},\n      sessionDisconnected: () => {},\n      sessionReconnected: () => {},\n      sessionReconnecting: () => {},\n    }\n\n    this.publishEventHandlers = {\n      accessDenied: () => {},\n      streamCreated: () => {},\n      streamDestroyed: () => {},\n    }\n\n    this.subscribeEventHandlers = {\n      videoEnabled: () => {},\n      videoDisabled: () => {},\n    }\n\n    const { sessionId, token, onLeave } = this.props\n  }\n\n  handlePublish = () => {\n    console.log('Successfully published!')\n  }\n\n  handleSubscribe = () => {\n    console.log('Subscribed!')\n  }\n\n  handleSessionError = (error) => {\n    console.error(error)\n  }\n\n  handlePublishError = (error) => {\n    console.error(error)\n  }\n\n  handleSubscribeError = (error) => {\n    console.error(error)\n  }\n\n  focus(stream) {\n    this.setState({focusStream: stream})\n    this.setState({focusKey: `${stream.id}`})\n    console.log(stream)\n  }\n\n  screenShareButton() {\n    return this.state.ssButton === true ? (\n      <Button\n        onClick = {() => {\n          EventEmitter.publish('startScreenShare')\n          EventEmitter.publish('disableVideo')\n          this.setState({ssButton: false})\n          }\n        }\n        style = {{fontSize: '.8vw', display: 'inline-flex'}}\n        content = \"Share Screen\"\n      />\n    ) : (\n      <Button\n          onClick = {() => {\n              EventEmitter.publish('stopScreenShare')\n              EventEmitter.publish('enableVideo')\n              this.setState({ssButton: true})\n            }\n          }\n          style = {{fontSize: '.8vw', display: 'inline-flex'}}\n          content = \"Stop Screen Share\"\n        />\n    )\n  }\n\n  componentWillMount() {\n    const { sessionId, token, onLeave } = this.props\n    this.sessionHelper = createSession({\n      apiKey: `${process.env.NEXT_PUBLIC_VV_API_KEY}`,\n      sessionId: `${sessionId}`,\n      token: `${token}`,\n      onStreamsUpdated: streams => { this.setState({ streams }); }\n    });\n  }\n\n  componentWillUnmount() {\n    this.sessionHelper.disconnect();\n  }\n\n  render() {\n    const { sessionId, token, onLeave } = this.props\n    return (\n      <>\n      <div style = {{display: 'inline-flex', width: '100%', height: '1000px', maxHeight: '75vh'}}>\n        <div style = {{display: 'inline-flex', width: '75%', height: '1000px', maxHeight: '75vh'}}>\n\n        </div>\n        <div style = {{width: '25%', maxHeight: '75vh', overflow: 'auto', height: '1000px'}}>\n          <Publisher style = {{width: '15vw'}} session={this.sessionHelper.session}/>\n          {this.state.streams.map(stream => (\n            <>\n            <OTSubscriber\n              key={stream.id}\n              session={this.sessionHelper.session}\n              stream={stream}\n              properties={{ width: '100%', maxHeight: '10vh' }}\n              onSubscribe={this.handleSubscribe}\n              onError={this.handleSubscribeError}\n            />\n            <Button\n              content ='Expand'\n              onClick = {this.focus(stream)}\n              style = {{fontSize: '.5vw'}}\n            />\n            </>\n          ))}\n        </div>\n      </div>\n      {this.screenShareButton()}\n      <Button\n        onClick={onLeave}\n        color=\"red\"\n        icon=\"close\"\n        style = {{fontSize: '.8vw', display: 'inline-flex'}}\n        content=\"Leave call\"\n      />\n      </>\n    )\n  }\n}\n\n\nScreenContainer.propTypes = {\n  sessionId: PropTypes.string.isRequired,\n  token: PropTypes.string.isRequired,\n  onLeave: PropTypes.func.isRequired,\n}\n\nexport default ScreenContainer\n"]},"metadata":{},"sourceType":"module"}