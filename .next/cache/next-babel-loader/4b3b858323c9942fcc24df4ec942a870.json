{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport Publisher from './publisher';\nimport { EventEmitter } from './util/EventEmitter';\nimport { OTSession, OTPublisher, OTStreams, OTSubscriber, createSession } from 'opentok-react';\nimport { Button, List } from 'semantic-ui-react';\n\nclass ScreenContainer extends React.Component {\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"handlePublish\", () => {\n      console.log('Successfully published!');\n    });\n\n    _defineProperty(this, \"handleSubscribe\", () => {\n      console.log('Subscribed!');\n    });\n\n    _defineProperty(this, \"handleSessionError\", error => {\n      console.error(error);\n    });\n\n    _defineProperty(this, \"handlePublishError\", error => {\n      console.error(error);\n    });\n\n    _defineProperty(this, \"handleSubscribeError\", error => {\n      console.error(error);\n    });\n\n    this.state = {\n      ssButton: true,\n      streams: [],\n      focusStream: {},\n      videoButton: true\n    };\n    this.defineEventEmitterCallbacks();\n    this.sessionEventHandlers = {\n      sessionConnected: () => {},\n      sessionDisconnected: () => {},\n      sessionReconnected: () => {},\n      sessionReconnecting: () => {}\n    };\n    this.publishEventHandlers = {\n      accessDenied: () => {},\n      streamCreated: () => {},\n      streamDestroyed: () => {}\n    };\n    this.subscribeEventHandlers = {\n      videoEnabled: () => {},\n      videoDisabled: () => {}\n    };\n    const {\n      sessionId,\n      token,\n      onLeave\n    } = this.props;\n  }\n\n  defineEventEmitterCallbacks() {\n    EventEmitter.subscribe('disableVideoButton', () => {\n      this.setState({\n        videoButton: false\n      });\n    });\n    EventEmitter.subscribe('enableVideoButton', () => {\n      this.setState({\n        videoButton: true\n      });\n    });\n  }\n\n  expandButton(stream) {\n    return __jsx(Button, {\n      content: \"Expand\",\n      onClick: () => {\n        this.setState({\n          focusStream: stream\n        });\n      },\n      style: {\n        fontSize: '.5vw'\n      }\n    });\n  }\n\n  getStreamToDisplay() {\n    /*return this.state.focusStream != undefined ?(\n      <OTSubscriber\n        key={this.state.focusStream.id}\n        session={this.sessionHelper.session}\n        stream={this.state.focusStream}\n        properties={{ maxWidth: '75vw', maxHeight: '75vh', height: '85vh', width: '48vw' }}\n        onSubscribe={this.handleSubscribe}\n        onError={this.handleSubscribeError}\n      />\n    ) : null*/\n  }\n\n  screenShareButton() {\n    return this.state.ssButton === true ? __jsx(Button, {\n      onClick: () => {\n        EventEmitter.publish('startScreenShare');\n        EventEmitter.publish('disableVideo');\n        this.setState({\n          ssButton: false\n        });\n      },\n      style: {\n        fontSize: '.8vw',\n        display: 'inline-flex'\n      },\n      icon: \"tv\",\n      content: \"Share Screen\"\n    }) : __jsx(Button, {\n      onClick: () => {\n        EventEmitter.publish('stopScreenShare');\n        EventEmitter.publish('enableVideo');\n        this.setState({\n          ssButton: true\n        });\n      },\n      icon: \"tv\",\n      style: {\n        fontSize: '.8vw',\n        display: 'inline-flex'\n      },\n      content: \"Stop Screen Share\"\n    });\n  }\n\n  videoStateButton() {\n    return this.state.videoButton === true ? __jsx(Button, {\n      onClick: () => {\n        EventEmitter.publish('disableVideo');\n      },\n      icon: \"hide\",\n      style: {\n        fontSize: '.8vw',\n        display: 'inline-flex'\n      },\n      content: \"Disable video\"\n    }) : __jsx(Button, {\n      onClick: () => {\n        EventEmitter.publish('enableVideo');\n      },\n      icon: \"eye\",\n      style: {\n        fontSize: '.8vw',\n        display: 'inline-flex'\n      },\n      content: \"Enable video\"\n    });\n  }\n\n  componentWillMount() {\n    const {\n      sessionId,\n      token,\n      onLeave\n    } = this.props;\n    this.sessionHelper = createSession({\n      apiKey: `${process.env.NEXT_PUBLIC_VV_API_KEY}`,\n      sessionId: `${sessionId}`,\n      token: `${token}`,\n      onStreamsUpdated: streams => {\n        this.setState({\n          streams\n        });\n      }\n    });\n  }\n\n  componentWillUnmount() {\n    this.sessionHelper.disconnect();\n  }\n\n  render() {\n    const {\n      sessionId,\n      token,\n      onLeave\n    } = this.props;\n    return __jsx(React.Fragment, null, __jsx(\"div\", {\n      style: {\n        display: 'inline-flex',\n        width: '100%',\n        maxHeight: '86vh'\n      }\n    }, __jsx(\"div\", {\n      style: {\n        width: '78%',\n        maxHeight: '85vh',\n        overflow: 'auto'\n      }\n    }, this.getStreamToDisplay()), __jsx(\"div\", {\n      style: {\n        width: '22%',\n        maxHeight: '85vh',\n        overflow: 'auto',\n        height: '1000px'\n      }\n    }, __jsx(Publisher, {\n      style: {\n        width: '13.57vw',\n        maxWidth: '13.57vw',\n        marginBottom: '5px'\n      },\n      session: this.sessionHelper.session\n    }))), this.videoStateButton(), this.screenShareButton(), __jsx(Button, {\n      onClick: onLeave,\n      color: \"red\",\n      icon: \"close\",\n      style: {\n        fontSize: '.8vw',\n        display: 'inline-flex'\n      },\n      content: \"Leave call\"\n    }));\n  }\n\n}\n\nScreenContainer.propTypes = {\n  sessionId: PropTypes.string.isRequired,\n  token: PropTypes.string.isRequired,\n  onLeave: PropTypes.func.isRequired\n};\nexport default ScreenContainer;","map":{"version":3,"sources":["C:/Users/ryanj/Documents/mercury/components/screenContainer.js"],"names":["React","PropTypes","Publisher","EventEmitter","OTSession","OTPublisher","OTStreams","OTSubscriber","createSession","Button","List","ScreenContainer","Component","constructor","props","console","log","error","state","ssButton","streams","focusStream","videoButton","defineEventEmitterCallbacks","sessionEventHandlers","sessionConnected","sessionDisconnected","sessionReconnected","sessionReconnecting","publishEventHandlers","accessDenied","streamCreated","streamDestroyed","subscribeEventHandlers","videoEnabled","videoDisabled","sessionId","token","onLeave","subscribe","setState","expandButton","stream","fontSize","getStreamToDisplay","screenShareButton","publish","display","videoStateButton","componentWillMount","sessionHelper","apiKey","process","env","NEXT_PUBLIC_VV_API_KEY","onStreamsUpdated","componentWillUnmount","disconnect","render","width","maxHeight","overflow","height","maxWidth","marginBottom","session","propTypes","string","isRequired","func"],"mappings":"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","sourcesContent":["import React from 'react'\nimport PropTypes from 'prop-types'\nimport Publisher from './publisher'\nimport { EventEmitter } from './util/EventEmitter'\nimport { OTSession, OTPublisher, OTStreams, OTSubscriber, createSession } from 'opentok-react'\nimport { Button, List } from 'semantic-ui-react'\n\nclass ScreenContainer extends React.Component {\n  constructor(props) {\n    super(props)\n\n    this.state = {\n      ssButton: true,\n      streams: [],\n      focusStream: {},\n      videoButton: true\n    }\n\n    this.defineEventEmitterCallbacks()\n\n    this.sessionEventHandlers = {\n      sessionConnected: () => {},\n      sessionDisconnected: () => {},\n      sessionReconnected: () => {},\n      sessionReconnecting: () => {},\n    }\n\n    this.publishEventHandlers = {\n      accessDenied: () => {},\n      streamCreated: () => {},\n      streamDestroyed: () => {},\n    }\n\n    this.subscribeEventHandlers = {\n      videoEnabled: () => {},\n      videoDisabled: () => {},\n    }\n\n    const { sessionId, token, onLeave } = this.props\n  }\n\n  handlePublish = () => {\n    console.log('Successfully published!')\n  }\n\n  handleSubscribe = () => {\n    console.log('Subscribed!')\n  }\n\n  handleSessionError = (error) => {\n    console.error(error)\n  }\n\n  handlePublishError = (error) => {\n    console.error(error)\n  }\n\n  handleSubscribeError = (error) => {\n    console.error(error)\n  }\n\n  defineEventEmitterCallbacks() {\n    EventEmitter.subscribe('disableVideoButton', () => {\n      this.setState({ videoButton: false })\n    })\n    EventEmitter.subscribe('enableVideoButton', () => {\n      this.setState({ videoButton: true })\n    })\n  }\n\n  expandButton(stream) {\n    return (\n      <Button\n        content ='Expand'\n        onClick = {() => {this.setState({focusStream: stream})}}\n        style = {{fontSize: '.5vw'}}\n      />\n    )\n  }\n\n  getStreamToDisplay(){\n    /*return this.state.focusStream != undefined ?(\n      <OTSubscriber\n        key={this.state.focusStream.id}\n        session={this.sessionHelper.session}\n        stream={this.state.focusStream}\n        properties={{ maxWidth: '75vw', maxHeight: '75vh', height: '85vh', width: '48vw' }}\n        onSubscribe={this.handleSubscribe}\n        onError={this.handleSubscribeError}\n      />\n    ) : null*/\n  }\n\n  screenShareButton() {\n    return this.state.ssButton === true ? (\n      <Button\n        onClick = {() => {\n          EventEmitter.publish('startScreenShare')\n          EventEmitter.publish('disableVideo')\n          this.setState({ssButton: false})\n          }\n        }\n        style = {{fontSize: '.8vw', display: 'inline-flex'}}\n        icon = 'tv'\n        content = \"Share Screen\"\n      />\n    ) : (\n      <Button\n          onClick = {() => {\n              EventEmitter.publish('stopScreenShare')\n              EventEmitter.publish('enableVideo')\n              this.setState({ssButton: true})\n            }\n          }\n          icon = 'tv'\n          style = {{fontSize: '.8vw', display: 'inline-flex'}}\n          content = \"Stop Screen Share\"\n        />\n    )\n  }\n\n  videoStateButton() {\n    return this.state.videoButton === true ? (\n      <Button\n        onClick={() => {\n          EventEmitter.publish('disableVideo')\n        }}\n        icon='hide'\n        style = {{fontSize: '.8vw', display: 'inline-flex'}}\n        content=\"Disable video\"\n      />\n    ) : (\n      <Button\n        onClick={() => {\n          EventEmitter.publish('enableVideo')\n        }}\n        icon='eye'\n        style = {{fontSize: '.8vw', display: 'inline-flex'}}\n        content=\"Enable video\"\n      />\n    )\n  }\n\n  componentWillMount() {\n    const { sessionId, token, onLeave } = this.props\n    this.sessionHelper = createSession({\n      apiKey: `${process.env.NEXT_PUBLIC_VV_API_KEY}`,\n      sessionId: `${sessionId}`,\n      token: `${token}`,\n      onStreamsUpdated: streams => { this.setState({ streams }); }\n    });\n  }\n\n  componentWillUnmount() {\n    this.sessionHelper.disconnect();\n  }\n\n  render() {\n    const { sessionId, token, onLeave } = this.props\n    return (\n      <>\n      <div style = {{display: 'inline-flex', width: '100%', maxHeight: '86vh'}}>\n        <div style = {{ width: '78%', maxHeight: '85vh', overflow: 'auto'}}>\n          {this.getStreamToDisplay()}\n        </div>\n        <div style = {{width: '22%', maxHeight: '85vh', overflow: 'auto', height: '1000px'}}>\n          <Publisher style = {{width: '13.57vw', maxWidth: '13.57vw', marginBottom: '5px'}} session={this.sessionHelper.session}/>\n          {/*this.state.streams.map((stream) => (\n            <>\n            <Button\n            onClick = {() => {this.setState({focusStream: stream})}}\n            style = {{padding: '0px', width: '100%', maxHeight: '18vh', margin: '0px'}}\n            >\n            <OTSubscriber\n              key={stream.id}\n              session={this.sessionHelper.session}\n              stream={stream}\n              properties={{ width: '100%', height: '18vh', maxHeight: '18vh', margin: '0px' }}\n              onSubscribe={this.handleSubscribe}\n              onError={this.handleSubscribeError}\n            />\n            </Button>\n            </>\n          ))*/}\n        </div>\n      </div>\n      {this.videoStateButton()}\n      {this.screenShareButton()}\n      <Button\n        onClick={onLeave}\n        color=\"red\"\n        icon=\"close\"\n        style = {{fontSize: '.8vw', display: 'inline-flex'}}\n        content=\"Leave call\"\n      />\n      </>\n    )\n  }\n}\n\n\nScreenContainer.propTypes = {\n  sessionId: PropTypes.string.isRequired,\n  token: PropTypes.string.isRequired,\n  onLeave: PropTypes.func.isRequired,\n}\n\nexport default ScreenContainer\n"]},"metadata":{},"sourceType":"module"}