{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { Component } from 'react';\nimport { Modal, Button, Search, Label, Icon } from 'semantic-ui-react';\nimport _ from 'lodash';\nimport { EventEmitter } from './util/EventEmitter';\nconst initialState = {\n  isLoading: false,\n  results: [],\n  value: ''\n};\n\nclass GroupLeaderModal extends Component {\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"formatAsResults\", candidate => {\n      return {\n        title: candidate.fullName,\n        id: candidate.userId\n      };\n    });\n\n    _defineProperty(this, \"handleInvite\", () => {\n      if (this.state.selectedUser === {}) return;\n      EventEmitter.publish('sendLeaderAppointmentNotification', {\n        groupId: this.state.currGroup.id,\n        userId: this.state.selectedUser.id\n      });\n      this.setState({\n        value: '',\n        selectedUser: {},\n        modalState: false\n      });\n    });\n\n    _defineProperty(this, \"handleClose\", () => {\n      this.setState({\n        value: '',\n        selectedUser: {},\n        modalState: false\n      });\n    });\n\n    _defineProperty(this, \"handleResultSelect\", (e, {\n      result\n    }) => {\n      this.setState({\n        value: '',\n        selectedUser: result\n      });\n    });\n\n    _defineProperty(this, \"handleSearchChange\", (e, {\n      value\n    }) => {\n      this.setState({\n        isLoading: true,\n        value\n      });\n      setTimeout(() => {\n        if (this.state.value.length < 1) return this.setState(initialState);\n        const re = new RegExp(_.escapeRegExp(this.state.value), 'i');\n\n        const isMatch = result => re.test(result.title) || re.test(result.description);\n\n        this.setState({\n          isLoading: false,\n          results: _.filter(this.state.allUsers.map(this.formatAsResults), isMatch)\n        });\n      }, 300);\n    });\n\n    _defineProperty(this, \"removeSelected\", () => {\n      this.setState({\n        selectedUser: {}\n      });\n    });\n\n    this.state = {\n      currGroup: this.props.currGroup,\n      modalState: false,\n      isLoading: false,\n      results: [],\n      value: '',\n      allUsers: [],\n      selectedUser: {}\n    };\n    this.defineEventEmitterCallbacks();\n  }\n\n  defineEventEmitterCallbacks() {\n    EventEmitter.subscribe('activateGroupLeaderModal', candidates => {\n      this.setState({\n        modalState: true,\n        allUsers: candidates\n      });\n    });\n  }\n\n  getSelectedLabels() {\n    if (this.state.selectedUser === {}) {\n      return __jsx(React.Fragment, null);\n    }\n\n    return __jsx(\"div\", {\n      style: {\n        textAlign: 'left',\n        paddingLeft: 80,\n        paddingRight: 80\n      }\n    }, __jsx(Label, null, this.state.selectedUser.title, __jsx(Icon, {\n      name: \"delete\",\n      onClick: () => this.removeSelected()\n    })));\n  }\n\n  render() {\n    return __jsx(\"div\", null, __jsx(Modal, {\n      style: {\n        borderless: 'true',\n        width: '40%',\n        height: '40%'\n      },\n      open: this.state.modalState,\n      onClose: this.handleClose,\n      closeOnDimmerClick: false,\n      closeOnEscape: false,\n      closeIcon: true\n    }, __jsx(Modal.Content, {\n      style: {\n        borderless: 'true'\n      }\n    }, __jsx(\"div\", {\n      style: {\n        textAlign: 'center',\n        paddingTop: 80,\n        paddingLeft: 80,\n        paddingRight: 80,\n        paddingBottom: 20\n      }\n    }, __jsx(Search, {\n      fluid: true,\n      placeholder: \"Choose a new group leader...\",\n      input: {\n        fluid: true\n      },\n      loading: this.state.isLoading,\n      onResultSelect: this.handleResultSelect,\n      onSearchChange: _.debounce(this.handleSearchChange, 500, {\n        leading: true\n      }),\n      results: this.state.results,\n      value: this.state.value\n    })), this.getSelectedLabels(), __jsx(\"div\", {\n      style: {\n        textAlign: 'center',\n        width: '70%',\n        height: '70%',\n        margin: 'auto',\n        padding: 30\n      }\n    }, __jsx(Button, {\n      color: \"teal\",\n      style: {\n        width: '50%',\n        fontSize: '1vw'\n      },\n      onClick: this.handleInvite.bind(this)\n    }, \"Change Group Leader\")))));\n  }\n\n}\n\nexport default GroupLeaderModal;","map":null,"metadata":{},"sourceType":"module"}