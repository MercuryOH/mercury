{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { Component } from 'react';\nimport { OTPublisher } from 'opentok-react';\nimport { Button } from 'semantic-ui-react';\nimport { EventEmitter } from './util/EventEmitter';\nexport default class ScreenPublisher extends Component {\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"onError\", err => {\n      this.setState({\n        error: `Failed to publish: ${err.message}`\n      });\n      EventEmitter.publish('leaveCallOnError');\n    });\n\n    this.state = {\n      error: null,\n      audio: true,\n      video: true,\n      videoSource: 'screen',\n      appear: false\n    };\n    this.defineEventEmitterCallbacks();\n  }\n\n  defineEventEmitterCallbacks() {\n    EventEmitter.subscribe('startScreenShare', () => {\n      this.setState({\n        appear: true\n      });\n    });\n    EventEmitter.subscribe('stopScreenShare', () => {\n      this.setState({\n        appear: false\n      });\n    });\n  }\n\n  render() {\n    return this.state.appear === false ? null : __jsx(React.Fragment, null, this.state.error ? __jsx(\"div\", null, \"We noticed you denied access to your screen. Please click the screen blocked icon in your browser's address bar, allow access, and then refresh the page and rejoin the call.\") : null, __jsx(OTPublisher, {\n      properties: {\n        width: '13.62vw',\n        maxWidth: '13.62vw',\n        height: '20vh',\n        publishAudio: this.state.audio,\n        publishVideo: this.state.video,\n        videoSource: 'screen',\n        name: this.props.name,\n        style: {\n          buttonDisplayMode: 'on',\n          nameDisplayMode: 'on'\n        }\n      },\n      onPublish: () => {\n        EventEmitter.publish('screenShareOn', {\n          name: this.props.name,\n          sessionId: this.props.session.sessionId\n        });\n      },\n      session: this.props.session,\n      onError: this.onError\n    }));\n  }\n\n}","map":{"version":3,"sources":["C:/Users/ryanj/Documents/mercury/components/screenPublisher.js"],"names":["React","Component","OTPublisher","Button","EventEmitter","ScreenPublisher","constructor","props","err","setState","error","message","publish","state","audio","video","videoSource","appear","defineEventEmitterCallbacks","subscribe","render","width","maxWidth","height","publishAudio","publishVideo","name","style","buttonDisplayMode","nameDisplayMode","sessionId","session","onError"],"mappings":";;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,WAAT,QAA4B,eAA5B;AACA,SAASC,MAAT,QAAuB,mBAAvB;AACA,SAASC,YAAT,QAA6B,qBAA7B;AAEA,eAAe,MAAMC,eAAN,SAA8BJ,SAA9B,CAAwC;AACrDK,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;;AADiB,qCAsBRC,GAAD,IAAS;AACjB,WAAKC,QAAL,CAAc;AAAEC,QAAAA,KAAK,EAAG,sBAAqBF,GAAG,CAACG,OAAQ;AAA3C,OAAd;AACAP,MAAAA,YAAY,CAACQ,OAAb,CAAqB,kBAArB;AACD,KAzBkB;;AAGjB,SAAKC,KAAL,GAAa;AACXH,MAAAA,KAAK,EAAE,IADI;AAEXI,MAAAA,KAAK,EAAE,IAFI;AAGXC,MAAAA,KAAK,EAAE,IAHI;AAIXC,MAAAA,WAAW,EAAE,QAJF;AAKXC,MAAAA,MAAM,EAAE;AALG,KAAb;AAOA,SAAKC,2BAAL;AACD;;AAEDA,EAAAA,2BAA2B,GAAG;AAC5Bd,IAAAA,YAAY,CAACe,SAAb,CAAuB,kBAAvB,EAA2C,MAAM;AAC/C,WAAKV,QAAL,CAAc;AAAEQ,QAAAA,MAAM,EAAE;AAAV,OAAd;AACD,KAFD;AAGAb,IAAAA,YAAY,CAACe,SAAb,CAAuB,iBAAvB,EAA0C,MAAM;AAC9C,WAAKV,QAAL,CAAc;AAAEQ,QAAAA,MAAM,EAAE;AAAV,OAAd;AACD,KAFD;AAGD;;AAODG,EAAAA,MAAM,GAAG;AACP,WAAO,KAAKP,KAAL,CAAWI,MAAX,KAAsB,KAAtB,GAA8B,IAA9B,GACL,4BACG,KAAKJ,KAAL,CAAWH,KAAX,GAAmB,mBAAM,+KAAN,CAAnB,GAAkN,IADrN,EAEE,MAAC,WAAD;AACE,MAAA,UAAU,EAAE;AACVW,QAAAA,KAAK,EAAE,SADG;AAEVC,QAAAA,QAAQ,EAAE,SAFA;AAGVC,QAAAA,MAAM,EAAE,MAHE;AAIVC,QAAAA,YAAY,EAAE,KAAKX,KAAL,CAAWC,KAJf;AAKVW,QAAAA,YAAY,EAAE,KAAKZ,KAAL,CAAWE,KALf;AAMVC,QAAAA,WAAW,EAAE,QANH;AAOVU,QAAAA,IAAI,EAAE,KAAKnB,KAAL,CAAWmB,IAPP;AAQVC,QAAAA,KAAK,EAAE;AACLC,UAAAA,iBAAiB,EAAE,IADd;AAELC,UAAAA,eAAe,EAAE;AAFZ;AARG,OADd;AAcE,MAAA,SAAS,EAAE,MAAM;AACfzB,QAAAA,YAAY,CAACQ,OAAb,CAAqB,eAArB,EAAsC;AACpCc,UAAAA,IAAI,EAAE,KAAKnB,KAAL,CAAWmB,IADmB;AAEpCI,UAAAA,SAAS,EAAE,KAAKvB,KAAL,CAAWwB,OAAX,CAAmBD;AAFM,SAAtC;AAID,OAnBH;AAoBE,MAAA,OAAO,EAAE,KAAKvB,KAAL,CAAWwB,OApBtB;AAqBE,MAAA,OAAO,EAAE,KAAKC;AArBhB,MAFF,CADF;AA4BD;;AAzDoD","sourcesContent":["import React, { Component } from 'react'\nimport { OTPublisher } from 'opentok-react'\nimport { Button } from 'semantic-ui-react'\nimport { EventEmitter } from './util/EventEmitter'\n\nexport default class ScreenPublisher extends Component {\n  constructor(props) {\n    super(props)\n\n    this.state = {\n      error: null,\n      audio: true,\n      video: true,\n      videoSource: 'screen',\n      appear: false,\n    }\n    this.defineEventEmitterCallbacks()\n  }\n\n  defineEventEmitterCallbacks() {\n    EventEmitter.subscribe('startScreenShare', () => {\n      this.setState({ appear: true })\n    })\n    EventEmitter.subscribe('stopScreenShare', () => {\n      this.setState({ appear: false })\n    })\n  }\n\n  onError = (err) => {\n    this.setState({ error: `Failed to publish: ${err.message}` })\n    EventEmitter.publish('leaveCallOnError')\n  }\n\n  render() {\n    return this.state.appear === false ? null : (\n      <>\n        {this.state.error ? <div>{\"We noticed you denied access to your screen. Please click the screen blocked icon in your browser's address bar, allow access, and then refresh the page and rejoin the call.\"}</div> : null}\n        <OTPublisher\n          properties={{\n            width: '13.62vw',\n            maxWidth: '13.62vw',\n            height: '20vh',\n            publishAudio: this.state.audio,\n            publishVideo: this.state.video,\n            videoSource: 'screen',\n            name: this.props.name,\n            style: {\n              buttonDisplayMode: 'on',\n              nameDisplayMode: 'on',\n            },\n          }}\n          onPublish={() => {\n            EventEmitter.publish('screenShareOn', {\n              name: this.props.name,\n              sessionId: this.props.session.sessionId,\n            })\n          }}\n          session={this.props.session}\n          onError={this.onError}\n        />\n      </>\n    )\n  }\n}\n"]},"metadata":{},"sourceType":"module"}