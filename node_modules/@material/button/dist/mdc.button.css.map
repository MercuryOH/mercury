{"version":3,"sources":["webpack:///./packages/mdc-button/mdc-button.scss","webpack:///./packages/material-components-web/node_modules/@material/elevation/_mixins.scss","webpack:///./packages/material-components-web/node_modules/@material/theme/_mixins.scss","webpack:///./packages/mdc-button/_mixins.scss","webpack:///./packages/material-components-web/node_modules/@material/typography/_mixins.scss","webpack:///./packages/material-components-web/node_modules/@material/theme/_custom-properties.scss","webpack:///./packages/material-components-web/node_modules/@material/theme/_gss.scss","webpack:///./packages/material-components-web/node_modules/@material/rtl/_mixins.scss","webpack:///./packages/material-components-web/node_modules/@material/touch-target/_variables.scss","webpack:///./packages/mdc-button/_variables.scss","webpack:///./packages/material-components-web/node_modules/@material/ripple/_keyframes.scss","webpack:///./packages/material-components-web/node_modules/@material/animation/_variables.scss","webpack:///./packages/material-components-web/node_modules/@material/ripple/_mixins.scss","webpack:///./packages/material-components-web/node_modules/@material/ripple/_variables.scss"],"names":[],"mappings":";;;;;;;AA+BE;EAOM;CApCP;;AC6NC;EA/JM;EACA;EACA;EACA;EAMA;EC4CJ;CF1GH;;AG4CC;ECuDE;EACA;ECgCA;EC9GA;ED0HF;EAZE;EC9GA;ED0HF;EAZE;EC9GA;ED0HF;EAZE;EC9GA;ED0HF;EAZE;EC9GA;ED0HF;EAZE;EC9GA;ED0HF;UAAA;EAZE;EC9GA;ED0HF;EFyOE;EF5RA;EACA;EEiVA;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;KAAA;MAAA;UAAA;EACA;EAGA;EACA;EE1TA;EC9GA;ED0HF;EF+LE,aA1CO;CHvPV;ACsKC;EAjGI,YEyTyC;EFxTzC,aEwTyC;EFrTvC;EACA;EACA;CDpEP;AG4YC;EAEI;EACA;CH3YL;AGgZC;EAEI;CH/YL;AGmZC;EAEI;CHlZL;AGsZC;EAEI;EACA;CHrZL;AGmSC;EElOE;EC9GA;ED0HF;CLxED;AGiIC;ED/FE;CF/BH;AG2IC;ED5GE;CF5BH;AGxBG;EG3BA;EJiEA;EIjEA;EJiEA;ECoYF;EACA;EACA;EACA;EACA;CH3YD;AOlBK;ED5CF;EJiEA;EIjEA;EJiEA;CFGH;AGnCG;EHlBA;EACA;EACA;EACA,aQlCK;ER8CH;EACA;UAAA;CA6CL;AGsKC;ED5JE;EACA;EACA;CFPH;AG6KC;ED/KE;CFKH;;AG3CC;EGzCE;EJiEA;EIjEA;EJiEA;CF0BH;AO/CK;ED5CF;EJiEA;EIjEA;EJiEA;CFgCH;;AGjDC;EAiaA;CH5WD;;AG5CG;;;EGzDA;EJiEA;EIjEA;EJiEA;CF6CH;AOlEK;;;;;ED5CF;EJiEA;EIjEA;EJiEA;CFuDH;AGxDG;;;EGhEA;EJiEA;EIjEA;EJiEA;CF+DH;AOpFK;;;;;ED5CF;EJiEA;EIjEA;EJiEA;CFyEH;;AGnEC;;EAuRE;CH/MH;AG+BC;;EDxFE;EACA;EACA;CF6DH;AG6FC;;ED5JE;EACA;EACA;CFmEH;AGgCC;;ED5GE;CFgFH;AG+FC;;ED/KE;CFoFH;;AGvFC;EFtBE;EACA,0HA8GW;EEkWX;CH9VH;AGgVC;EFncE;EACA,2HA8GW;CDQd;AGiVC;EFxcE;EACA,4HA8GW;CDYd;AGiVC;EF5cE;EACA,yHA8GW;CDgBd;;AGrGC;EA8QE;EAgBA,kBM5WoB;ENkepB;CHzSH;AGsLC;EAEI;EACA;EACA;CHrLL;AGyLC;EAEI;EACA;CHxLL;AGCC;EDtHE;CFwHH;AGWC;EDnIE;CF2HH;;AGtHC;EHpCE,gBAHsB;EAItB,mBAJsB;CAkKzB;;AUzNC;EACE;IACE,gECP2B;YDO3B,wDCP2B;IDY3B;YAAA;GVwNH;EUrNC;IACE;YAAA;GVuNH;CACF;;AUnOC;EACE;IACE,gECP2B;YDO3B,wDCP2B;IDY3B;YAAA;GVwNH;EUrNC;IACE;YAAA;GVuNH;CACF;AUnNC;EACE;IACE;YAAA;IACA;GVqNH;EUlNC;IACE;GVoNH;CACF;AU5NC;EACE;IACE;YAAA;IACA;GVqNH;EUlNC;IACE;GVoNH;CACF;AUjNC;EACE;IACE;YAAA;IACA;GVmNH;EUhNC;IACE;GVkNH;CACF;AU1NC;EACE;IACE;YAAA;IACA;GVmNH;EUhNC;IACE;GVkNH;CACF;AGvIC;ESjDE;EACA;EACA;EACA;EACA;EACA;EAEA;CZ0LH;AYtLC;;EAGI;EACA;EACA;EACA;EACA;CZuLL;AYnLC;EAGI;EAKA;CZ+KL;AYxKG;EAEI;UAAA;CZyKP;AYrKG;EAEI;EACA;EACA;EACA;UAAA;EACA;UAAA;CZsKP;AYhKG;EAEI;EACA;EACA;CZiKP;AY3JG;EAEI;UAAA;CZ4JP;AYpJG;EAEI;UAAA;EAKA;UAAA;CZiJP;AYsHC;;EAGI;EACA;EACA;EACA;EACA;CZrHL;AY0HG;EAEI;EACA;CZzHP;AY/IC;EV7DE;EACA;EACA;CF+MH;AYtFG;EAGI,cApCF;CZ0HL;AYlDK;EAiBF;EAIA,cArFE;CZsHL;AYjBG;EAEI;CZkBP;AYbK;EAEI,0BCtTS;ED2TT,cA1GJ;CZoHL;AYJC;EAEI;CZKL;AGzMG;EAEI;EAGA;EACA;EACA;EACA;CHwMP;AGlMG;EAEI;EACA;CHmMP;;AYhLC;;;EV7DE;EACA;EACA;CFmPH;AY1HG;;EAGI,cApCF;CZ+JL;AYvFK;;;EAiBF;EAIA,cArFE;CZ6JL;AYxDG;;EAEI;CZ0DP;AYrDK;;EAEI,0BCtTS;ED2TT,cA1GJ;CZ6JL;AY7CC;;EAEI","file":"mdc.button.css","sourcesContent":["//\n// Copyright 2019 Google Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n//\n\n@use \"@material/base/mixins\" as base-mixins;\n@use \"@material/feature-targeting/functions\";\n@use \"@material/feature-targeting/mixins\" as feature-targeting-mixins;\n@use \"./variables\";\n\n/// Styles applied to the component's touch target wrapper element.\n@mixin wrapper($query: functions.all()) {\n  $feat-structure: functions.create-target($query, structure);\n\n  .mdc-touch-target-wrapper {\n    @include feature-targeting-mixins.targets($feat-structure) {\n      // Ensure that styles are only emitted once across all components that\n      // have increased touch targets.\n      @include base-mixins.emit-once('mdc-touch-target/wrapper') {\n        // NOTE: Will change to `inline-block` in the future, but keeping as is\n        // temporarily for backwards-compatibility.\n        display: inline;\n      }\n    }\n  }\n}\n\n/// Styles applied to the component's inner touch target element.\n/// By default, only sets the inner element height to the minimum touch target\n/// height ($mdc-touch-target-height).\n/// @param {Boolean} $set-width [false] - Sets the inner element width to the\n///     minimum touch target width ($mdc-touch-target-width).\n@mixin touch-target($set-width: false, $query: functions.all()) {\n  $feat-structure: functions.create-target($query, structure);\n\n  @include feature-targeting-mixins.targets($feat-structure) {\n    position: absolute;\n    top: 50%;\n    right: 0;\n    height: variables.$height;\n  }\n\n  @if $set-width {\n    @include feature-targeting-mixins.targets($feat-structure) {\n      /* @noflip */\n      left: 50%;\n      width: variables.$width;\n      transform: translate(-50%, -50%);\n    }\n  } @else {\n    @include feature-targeting-mixins.targets($feat-structure) {\n      left: 0;\n      transform: translateY(-50%);\n    }\n  }\n}\n\n/// Applies margin to the component with the increased touch target,\n/// to compensate for the touch target.\n@mixin margin(\n  $component-height,\n  $component-width: null,\n  $query: functions.all()\n) {\n  $feat-structure: functions.create-target($query, structure);\n\n  $vertical-margin-value: (variables.$height - $component-height) / 2;\n\n  @include feature-targeting-mixins.targets($feat-structure) {\n    margin-top: $vertical-margin-value;\n    margin-bottom: $vertical-margin-value;\n  }\n\n  @if $component-width {\n    $horizontal-margin-value: (variables.$width - $component-width) / 2;\n\n    @include feature-targeting-mixins.targets($feat-structure) {\n      margin-right: $horizontal-margin-value;\n      margin-left: $horizontal-margin-value;\n    }\n  }\n}\n","//\n// Copyright 2017 Google Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n//\n\n@use \"sass:map\";\n@use \"sass:math\";\n@use \"sass:meta\";\n@use \"@material/base/mixins\" as base-mixins;\n@use \"@material/feature-targeting/functions\" as feature-targeting-functions;\n@use \"@material/feature-targeting/mixins\" as feature-targeting-mixins;\n@use \"@material/theme/mixins\" as theme-mixins;\n@use \"@material/theme/variables\" as theme-variables;\n@use \"./functions\";\n@use \"./variables\";\n\n@mixin core-styles($query: feature-targeting-functions.all()) {\n  $feat-animation: feature-targeting-functions.create-target($query, animation);\n  $feat-structure: feature-targeting-functions.create-target($query, structure);\n\n  @for $z-value from 0 through 24 {\n    .mdc-elevation--z#{$z-value} {\n      @include elevation($z-value, $query: $query);\n    }\n  }\n\n  .mdc-elevation-transition {\n    @include feature-targeting-mixins.targets($feat-animation) {\n      transition: functions.transition-value();\n    }\n\n    @include feature-targeting-mixins.targets($feat-structure) {\n      will-change: variables.$property;\n    }\n  }\n}\n\n///\n/// Called once per application to set up the global default elevation styles.\n///\n@mixin overlay-common($query: feature-targeting-functions.all()) {\n  $feat-animation: feature-targeting-functions.create-target($query, animation);\n  $feat-structure: feature-targeting-functions.create-target($query, structure);\n\n  @include overlay-selector_ {\n    @include feature-targeting-mixins.targets($feat-structure) {\n      @include base-mixins.emit-once('mdc-elevation/common/structure') {\n        position: absolute;\n        border-radius: inherit;\n        opacity: 0;\n        pointer-events: none;\n      }\n    }\n\n    @include feature-targeting-mixins.targets($feat-animation) {\n      @include base-mixins.emit-once('mdc-elevation/common/animation') {\n        transition: functions.overlay-transition-value();\n      }\n    }\n\n    @include base-mixins.emit-once('mdc-elevation/common/color') {\n      @include overlay-fill-color(variables.$overlay-color, $query: $query);\n    }\n  }\n}\n\n///\n/// Sets the shadow of the element.\n///\n/// @param {String} $box-shadow - The shadow to apply to the element.\n///\n@mixin shadow($box-shadow, $query: feature-targeting-functions.all()) {\n  $feat-color: feature-targeting-functions.create-target($query, color);\n\n  @include feature-targeting-mixins.targets($feat-color) {\n    /* @alternate */\n    box-shadow: $box-shadow;\n  }\n}\n\n///\n/// Sets the elevation overlay surface required positioning.\n///\n@mixin overlay-surface-position($query: feature-targeting-functions.all()) {\n  $feat-structure: feature-targeting-functions.create-target($query, structure);\n\n  @include feature-targeting-mixins.targets($feat-structure) {\n    /* @alternate */\n    position: relative;\n  }\n}\n\n///\n/// Sets the dimensions of the elevation overlay, including positioning and sizing.\n///\n/// @param {Number} $width - The width of the elevation overlay\n/// @param {Number} [$height] - The height of the elevation overlay\n/// @param {Boolean} [$has-content-sizing] - Set to false if the container has no content sizing\n///\n@mixin overlay-dimensions(\n  $width,\n  $height: $width,\n  $has-content-sizing: true,\n  $query: feature-targeting-functions.all()\n) {\n  $feat-structure: feature-targeting-functions.create-target($query, structure);\n\n  @include overlay-selector_ {\n    @include feature-targeting-mixins.targets($feat-structure) {\n      width: $width;\n      height: $height;\n\n      @if $has-content-sizing {\n        top: 0;\n        /* @noflip */\n        left: 0;\n      } @else {\n        top: 50%;\n        /* @noflip */\n        left: 50%;\n        transform: translate(-50%, -50%);\n      }\n    }\n  }\n}\n\n///\n/// Sets the elevation overlay fill color.\n/// Expected to be called directly on the elevation overlay element.\n///\n/// @param {Color} $color - The color of the elevation overlay.\n///\n@mixin overlay-fill-color($color, $query: feature-targeting-functions.all()) {\n  $feat-color: feature-targeting-functions.create-target($query, color);\n\n  @include feature-targeting-mixins.targets($feat-color) {\n    @include theme-mixins.prop(background-color, $color);\n  }\n}\n\n///\n/// Sets the elevation overlay opacity.\n/// Expected to be called from a parent element.\n///\n/// @param {Number} $opacity - The opacity of the elevation overlay.\n///\n@mixin overlay-opacity($opacity, $query: feature-targeting-functions.all()) {\n  $feat-color: feature-targeting-functions.create-target($query, color);\n\n  @include overlay-selector_ {\n    @include feature-targeting-mixins.targets($feat-color) {\n      opacity: $opacity;\n    }\n  }\n}\n\n// Applies the correct CSS rules to an element to give it the elevation specified by $z-value.\n// The $z-value must be between 0 and 24.\n// If $color has an alpha channel, it will be ignored and overridden. To increase the opacity of the shadow, use\n// $opacity-boost.\n@mixin elevation(\n  $z-value,\n  $color: variables.$baseline-color,\n  $opacity-boost: 0,\n  $query: feature-targeting-functions.all()\n) {\n  @if meta.type-of($z-value) != number or not math.is-unitless($z-value) {\n    @error \"$z-value must be a unitless number, but received '#{$z-value}'\";\n  }\n\n  @if $z-value < 0 or $z-value > 24 {\n    @error \"$z-value must be between 0 and 24, but received '#{$z-value}'\";\n  }\n\n  $feat-color: feature-targeting-functions.create-target($query, color);\n\n  $color: theme-variables.prop-value($color);\n\n  $umbra-z-value: map.get(variables.$umbra-map, $z-value);\n  $penumbra-z-value: map.get(variables.$penumbra-map, $z-value);\n  $ambient-z-value: map.get(variables.$ambient-map, $z-value);\n\n  $umbra-color: rgba($color, variables.$umbra-opacity + $opacity-boost);\n  $penumbra-color: rgba($color, variables.$penumbra-opacity + $opacity-boost);\n  $ambient-color: rgba($color, variables.$ambient-opacity + $opacity-boost);\n\n  $box-shadow: (\n    #{'#{$umbra-z-value} #{$umbra-color}'},\n    #{'#{$penumbra-z-value} #{$penumbra-color}'},\n    #{$ambient-z-value} $ambient-color\n  );\n\n  @include shadow($box-shadow, $query: $query);\n}\n\n// Private\n\n///\n/// Sets the elevation overlay transition value.\n///\n/// @param {String} $duration - The duration of the transition.\n/// @param {String} $easing - The easing function for the transition.\n/// @return {String}\n/// @access private\n///\n@mixin overlay-selector_ {\n  .mdc-elevation-overlay {\n    @content;\n  }\n}\n","//\n// Copyright 2017 Google Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n//\n\n@use \"sass:map\";\n@use \"@material/feature-targeting/functions\" as feature-targeting-functions;\n@use \"@material/feature-targeting/mixins\";\n@use \"./custom-properties\";\n@use \"./gss\";\n@use \"./variables\";\n\n@mixin core-styles($query: feature-targeting-functions.all()) {\n  $feat-color: feature-targeting-functions.create-target($query, color);\n\n  :root {\n    @include mixins.targets($feat-color) {\n      @each $style in map.keys(variables.$property-values) {\n        --mdc-theme-#{$style}: #{map.get(variables.$property-values, $style)};\n      }\n    }\n  }\n\n  @each $style in map.keys(variables.$property-values) {\n    @if $style != 'background' and $style != 'surface' {\n      .mdc-theme--#{$style} {\n        @include mixins.targets($feat-color) {\n          @include prop(color, $style, true);\n        }\n      }\n    } @else {\n      .mdc-theme--#{$style} {\n        @include mixins.targets($feat-color) {\n          @include prop(background-color, $style);\n        }\n      }\n    }\n  }\n\n  // CSS rules for using primary and secondary (plus light/dark variants) as background colors.\n  @each $style in ('primary', 'secondary') {\n    .mdc-theme--#{$style}-bg {\n      @include mixins.targets($feat-color) {\n        @include prop(background-color, $style, true);\n      }\n    }\n  }\n}\n\n/// Applies a dynamic value to the specified property. This mixin should be used\n/// in theme style mixins when setting properties.\n///\n/// The value may be any of the following:\n/// - a standard CSS value\n/// - a custom property Map, e.g. (varname: --mdc-foo, fallback: blue)\n/// - a Material theme key String, e.g. \"primary\", \"on-primary\"\n///\n/// @param {String} $property - the name of the CSS property.\n/// @param {String | Number | Color | List | Map} $value - the property's value.\n/// @param {Map} $gss - optional Map of GSS annotations to set.\n/// @param {Bool} $important - set to true to add an `!important` rule. Defaults\n///     to false.\n@mixin property($property, $value, $gss: (), $important: false) {\n  $important-rule: if($important, '!important', '');\n\n  @if custom-properties.is-custom-prop($value) {\n    // $value is a custom property Map\n    @include custom-properties.apply(\n      $property,\n      $value,\n      $gss: $gss,\n      $important: $important\n    );\n  } @else if map.has-key(variables.$property-values, $value) {\n    // $value is a theme property String\n    $fallback: map.get(variables.$property-values, $value);\n    $custom-prop: custom-properties.create(--mdc-theme-#{$style}, $fallback);\n    @include custom-properties.apply(\n      $property,\n      $custom-prop,\n      $gss: $gss,\n      $important: $important\n    );\n  } @else {\n    // $value is a standard CSS value\n    @include gss.annotate($gss);\n    #{$property}: $value #{$important-rule};\n  }\n}\n\n// Applies the correct theme color style to the specified property.\n// $property is typically color or background-color, but can be any CSS property that accepts color values.\n// $style should be one of the map keys in $mdc-theme-property-values (_variables.scss), or a color value.\n// @deprecated use the `property()` mixin instead\n@mixin prop($property, $style, $important: false) {\n  $important-rule: if($important, '!important', '');\n\n  @if custom-properties.is-custom-prop($style) {\n    @include custom-properties.apply($property, $style, $important: $important);\n  } @else if variables.is-valid-theme-prop-value_($style) {\n    #{$property}: $style #{$important-rule};\n  } @else {\n    @if not map.has-key(variables.$property-values, $style) {\n      @error \"Invalid style: '#{$style}'. Choose one of: #{map.keys(variables.$property-values)}\";\n    }\n    $value: map.get(variables.$property-values, $style);\n\n    #{$property}: $value #{$important-rule};\n    /* @alternate */\n    #{$property}: var(--mdc-theme-#{$style}, $value) #{$important-rule};\n  }\n}\n","//\n// Copyright 2016 Google Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n//\n\n@use \"sass:math\";\n@use \"@material/elevation/mixins\" as elevation-mixins;\n@use \"@material/feature-targeting/functions\" as feature-targeting-functions;\n@use \"@material/feature-targeting/mixins\" as feature-targeting-mixins;\n@use \"@material/ripple/mixins\" as ripple-mixins;\n@use \"@material/rtl/mixins\" as rtl-mixins;\n@use \"@material/theme/functions\" as theme-functions;\n@use \"@material/theme/mixins\" as theme-mixins;\n@use \"@material/touch-target/mixins\" as touch-target-mixins;\n@use \"@material/typography/mixins\" as typography-mixins;\n@use \"@material/shape/mixins\" as shape-mixins;\n@use \"@material/shape/functions\" as shape-functions;\n@use \"@material/density/functions\" as density-functions;\n@use \"./variables\";\n@use \"@material/elevation/functions\" as elevation-functions;\n\n$ripple-target: '.mdc-button__ripple';\n\n@mixin core-styles($query: feature-targeting-functions.all()) {\n  @include without-ripple($query);\n  @include ripple($query);\n}\n\n// This API is intended for use by frameworks that may want to separate the ripple-related styles from the other\n// button styles. It is recommended that most users use `mdc-button-core-styles` instead.\n@mixin without-ripple($query: feature-targeting-functions.all()) {\n  $feat-color: feature-targeting-functions.create-target($query, color);\n  $feat-structure: feature-targeting-functions.create-target($query, structure);\n\n  @include touch-target-mixins.wrapper($query); // COPYBARA_COMMENT_THIS_LINE\n  @include elevation-mixins.overlay-common($query); // COPYBARA_COMMENT_THIS_LINE\n\n  // postcss-bem-linter: define button\n  .mdc-button {\n    @include base_($query);\n    @include shape-radius(variables.$shape-radius, $query: $query);\n    @include density(variables.$density-scale, $query: $query);\n    @include container-fill-color(transparent, $query);\n    @include disabled-container-fill-color(transparent, $query);\n    // The icon CSS class overrides styles defined in the .material-icons CSS\n    // class, which is loaded separately so the order of CSS definitions is not\n    // guaranteed. Therefore, increase specifity by nesting this class to ensure\n    // overrides apply.\n    .mdc-button__icon {\n      @include feature-targeting-mixins.targets($feat-structure) {\n        @include icon_;\n      }\n    }\n\n    .mdc-button__touch {\n      @include touch-target-mixins.touch-target($query: $query);\n    }\n\n    @include ink-color(primary, $query);\n    @include disabled-ink-color(variables.$disabled-ink-color, $query);\n  }\n\n  .mdc-button__label + .mdc-button__icon {\n    @include feature-targeting-mixins.targets($feat-structure) {\n      @include icon-trailing_;\n    }\n  }\n\n  // stylelint-disable-next-line selector-no-qualifying-type\n  svg.mdc-button__icon {\n    @include feature-targeting-mixins.targets($feat-structure) {\n      @include icon-svg_;\n    }\n  }\n\n  .mdc-button--raised,\n  .mdc-button--unelevated,\n  .mdc-button--outlined {\n    .mdc-button__icon {\n      @include feature-targeting-mixins.targets($feat-structure) {\n        // Icons inside contained buttons have different styles due to increased button padding\n        @include icon-contained_;\n      }\n    }\n\n    .mdc-button__label + .mdc-button__icon {\n      @include feature-targeting-mixins.targets($feat-structure) {\n        @include icon-contained-trailing_;\n      }\n    }\n  }\n\n  .mdc-button--raised,\n  .mdc-button--unelevated {\n    @include filled_($query);\n  }\n\n  .mdc-button--raised {\n    @include raised_($query);\n  }\n\n  .mdc-button--outlined {\n    @include outlined_($query);\n  }\n\n  .mdc-button--touch {\n    @include touch-target-mixins.margin(\n      $component-height: variables.$height,\n      $query: $query\n    );\n  }\n  // postcss-bem-linter: end\n}\n\n// This API is intended for use by frameworks that may want to separate the ripple-related styles from the other\n// button styles. It is recommended that most users use `mdc-button-core-styles` instead.\n@mixin ripple($query: feature-targeting-functions.all()) {\n  $feat-structure: feature-targeting-functions.create-target($query, structure);\n\n  @include ripple-mixins.common($query); // COPYBARA_COMMENT_THIS_LINE\n\n  .mdc-button {\n    @include ripple-mixins.surface(\n      $query: $query,\n      $ripple-target: $ripple-target\n    );\n    @include ripple-mixins.radius-bounded(\n      $query: $query,\n      $ripple-target: $ripple-target\n    );\n    @include ripple-states($color: primary, $query: $query);\n\n    #{$ripple-target} {\n      @include feature-targeting-mixins.targets($feat-structure) {\n        position: absolute;\n        // Ripple needs content-box as the box sizing and box-sizing: border-box\n        // is often set as a default, so we override that here.\n        box-sizing: content-box;\n        width: 100%;\n        height: 100%;\n        overflow: hidden;\n      }\n    }\n\n    // Ripple targets inside outlined buttons set their own `top`/`left`,\n    // depending on the border width.\n    &:not(.mdc-button--outlined) #{$ripple-target} {\n      @include feature-targeting-mixins.targets($feat-structure) {\n        top: 0;\n        left: 0;\n      }\n    }\n  }\n\n  .mdc-button--raised,\n  .mdc-button--unelevated {\n    @include ripple-states($color: on-primary, $query: $query);\n  }\n}\n\n///\n/// Sets ripple color for button.\n///\n@mixin ripple-states($color, $query: feature-targeting-functions.all()) {\n  @include ripple-mixins.states(\n    $color: $color,\n    $query: $query,\n    $ripple-target: $ripple-target\n  );\n}\n\n@mixin filled-accessible(\n  $container-fill-color,\n  $query: feature-targeting-functions.all()\n) {\n  $fill-tone: theme-functions.tone($container-fill-color);\n\n  @include container-fill-color($container-fill-color, $query);\n\n  @if ($fill-tone == 'dark') {\n    @include ink-color(text-primary-on-dark, $query);\n    @include ripple-states($color: text-primary-on-dark, $query: $query);\n  } @else {\n    @include ink-color(text-primary-on-light, $query);\n    @include ripple-states($color: text-primary-on-light, $query: $query);\n  }\n}\n\n///\n/// Sets the container fill color to the given color for an enabled button.\n/// @param {Color} $color - The desired container fill color.\n///\n@mixin container-fill-color($color, $query: feature-targeting-functions.all()) {\n  // :not(:disabled) is used to support link styled as button\n  // as link does not support :enabled style\n  &:not(:disabled) {\n    @include container-fill-color_($color, $query: $query);\n  }\n}\n\n///\n/// Sets the container fill color to the given color for a disabled button.\n/// @param {Color} $color - The desired container fill color.\n///\n@mixin disabled-container-fill-color(\n  $color,\n  $query: feature-targeting-functions.all()\n) {\n  &:disabled {\n    @include container-fill-color_($color, $query: $query);\n  }\n}\n\n///\n/// Sets the outline color to the given color for an enabled button.\n/// @param {Color} $color - The desired outline color.\n///\n@mixin outline-color($color, $query: feature-targeting-functions.all()) {\n  &:not(:disabled) {\n    @include outline-color_($color, $query: $query);\n  }\n}\n\n///\n/// Sets the outline color to the given color for a disabled button.\n/// @param {Color} $color - The desired outline color.\n///\n@mixin disabled-outline-color(\n  $color,\n  $query: feature-targeting-functions.all()\n) {\n  &:disabled {\n    @include outline-color_($color, $query: $query);\n  }\n}\n\n///\n/// Sets the icon color to the given color for an enabled button.\n/// @param {Color} $color - The desired icon color.\n///\n@mixin icon-color($color, $query: feature-targeting-functions.all()) {\n  &:not(:disabled) {\n    @include icon-color_($color, $query: $query);\n  }\n}\n\n///\n/// Sets the icon color to the given color for a disabled button.\n/// @param {Color} $color - The desired icon color.\n///\n@mixin disabled-icon-color($color, $query: feature-targeting-functions.all()) {\n  &:disabled {\n    @include icon-color_($color, $query: $query);\n  }\n}\n\n///\n/// Sets the ink color to the given color for an enabled button,\n/// and sets the icon color to the given color unless `mdc-button-icon-color`\n/// is also used.\n/// @param {Color} $color - The desired ink color.\n///\n@mixin ink-color($color, $query: feature-targeting-functions.all()) {\n  &:not(:disabled) {\n    @include ink-color_($color, $query: $query);\n  }\n}\n\n///\n/// Sets the ink color to the given color for a disabled button,\n/// and sets the icon color to the given color unless `mdc-button-icon-color`\n/// is also used.\n/// @param {Color} $color - The desired ink color.\n///\n@mixin disabled-ink-color($color, $query: feature-targeting-functions.all()) {\n  &:disabled {\n    @include ink-color_($color, $query: $query);\n  }\n}\n\n///\n/// Sets density scale for button.\n///\n/// @param {Number | String} $density-scale - Density scale value for component. Supported density scale values `-3`,\n///     `-2`, `-1`, `0`.\n///\n@mixin density($density-scale, $query: feature-targeting-functions.all()) {\n  $height: density-functions.prop-value(\n    $density-config: variables.$density-config,\n    $density-scale: $density-scale,\n    $property-name: height,\n  );\n\n  @include height($height, $query: $query);\n\n  @if $density-scale != 0 {\n    @include touch-target-reset_($query: $query);\n  }\n}\n\n///\n/// Resets touch target-related styles. This is called from the density mixin to\n/// automatically remove the increased touch target, since dense components\n/// don't have the same default a11y requirements.\n/// @access private\n///\n@mixin touch-target-reset_($query: feature-targeting-functions.all()) {\n  $feat-structure: feature-targeting-functions.create-target($query, structure);\n\n  @include feature-targeting-mixins.targets($feat-structure) {\n    margin-top: 0;\n    margin-bottom: 0;\n  }\n\n  .mdc-button__touch {\n    @include feature-targeting-mixins.targets($feat-structure) {\n      display: none;\n    }\n  }\n}\n\n///\n/// Sets custom height for button.\n/// @param {Number} $height - Height of button in `px`.\n///\n@mixin height($height, $query: feature-targeting-functions.all()) {\n  $feat-structure: feature-targeting-functions.create-target($query, structure);\n\n  @include feature-targeting-mixins.targets($feat-structure) {\n    height: $height;\n  }\n}\n\n@mixin shape-radius(\n  $radius,\n  $rtl-reflexive: false,\n  $density-scale: variables.$density-scale,\n  $query: feature-targeting-functions.all()\n) {\n  $height: density-functions.prop-value(\n    $density-config: variables.$density-config,\n    $density-scale: $density-scale,\n    $property-name: height,\n  );\n\n  @include shape-mixins.radius(\n    $radius,\n    $rtl-reflexive,\n    $component-height: $height,\n    $query: $query\n  );\n\n  #{$ripple-target} {\n    @include shape-mixins.radius(\n      $radius,\n      $rtl-reflexive,\n      $component-height: $height,\n      $query: $query\n    );\n  }\n}\n\n///\n/// Sets horizontal padding to the given number.\n/// @param {Number} $padding\n///\n@mixin horizontal-padding($padding, $query: feature-targeting-functions.all()) {\n  $feat-structure: feature-targeting-functions.create-target($query, structure);\n\n  @include feature-targeting-mixins.targets($feat-structure) {\n    // $padding should be a single value; enforce it by specifying all 4 sides in the output\n    padding: 0 $padding 0 $padding;\n  }\n}\n\n@mixin outline-width(\n  $outline-width,\n  $padding: variables.$contained-horizontal-padding,\n  $query: feature-targeting-functions.all()\n) {\n  $feat-structure: feature-targeting-functions.create-target($query, structure);\n  // Note: Adjust padding to maintain consistent width with non-outlined buttons\n  $padding-value: math.max($padding - $outline-width, 0);\n\n  @include horizontal-padding($padding-value, $query);\n\n  @include feature-targeting-mixins.targets($feat-structure) {\n    border-width: $outline-width;\n  }\n\n  #{$ripple-target} {\n    @include feature-targeting-mixins.targets($feat-structure) {\n      top: -$outline-width;\n      left: -$outline-width;\n      border: $outline-width solid transparent;\n    }\n  }\n\n  .mdc-button__touch {\n    @include feature-targeting-mixins.targets($feat-structure) {\n      left: -$outline-width;\n      width: calc(100% + 2 * #{$outline-width});\n    }\n  }\n}\n\n///\n/// Sets the button label to overflow as ellipsis\n///\n@mixin label-overflow-ellipsis($query: feature-targeting-functions.all()) {\n  .mdc-button__label {\n    @include typography-mixins.overflow-ellipsis($query: $query);\n  }\n}\n\n@mixin base_($query) {\n  $feat-color: feature-targeting-functions.create-target($query, color);\n  $feat-structure: feature-targeting-functions.create-target($query, structure);\n\n  @include typography-mixins.typography(button, $query);\n  @include horizontal-padding(variables.$horizontal-padding, $query);\n  @include elevation-mixins.overlay-surface-position($query: $query);\n  @include elevation-mixins.overlay-dimensions(100%, $query: $query);\n\n  @include feature-targeting-mixins.targets($feat-structure) {\n    display: inline-flex;\n    // position: relative; already set in mdc-elevation-overlay-surface-position\n    align-items: center;\n    justify-content: center;\n    box-sizing: border-box;\n    min-width: 64px;\n    border: none;\n    outline: none;\n    /* @alternate */\n    line-height: inherit;\n    user-select: none;\n    -webkit-appearance: none;\n    // Even though `visible` is the default, IE 11 computes the property as\n    // `hidden` in some cases, unless it's explicitly defined here.\n    overflow: visible;\n    vertical-align: middle;\n  }\n\n  &::-moz-focus-inner {\n    @include feature-targeting-mixins.targets($feat-structure) {\n      padding: 0;\n      border: 0;\n    }\n  }\n\n  // postcss-bem-linter: ignore\n  &:active {\n    @include feature-targeting-mixins.targets($feat-structure) {\n      outline: none;\n    }\n  }\n\n  &:hover {\n    @include feature-targeting-mixins.targets($feat-structure) {\n      cursor: pointer;\n    }\n  }\n\n  &:disabled {\n    @include feature-targeting-mixins.targets($feat-structure) {\n      cursor: default;\n      pointer-events: none;\n    }\n  }\n}\n\n@mixin icon_ {\n  @include rtl-mixins.reflexive-box(margin, right, 8px);\n\n  display: inline-block;\n  width: 18px;\n  height: 18px;\n  font-size: 18px;\n  vertical-align: top;\n}\n\n@mixin icon-trailing_ {\n  @include rtl-mixins.reflexive-box(margin, left, 8px);\n}\n\n@mixin icon-svg_ {\n  fill: currentColor;\n}\n\n@mixin icon-contained_ {\n  @include rtl-mixins.reflexive-property(margin, -4px, 8px);\n}\n\n@mixin icon-contained-trailing_ {\n  @include rtl-mixins.reflexive-property(margin, 8px, -4px);\n}\n\n@mixin outlined_($query) {\n  $feat-structure: feature-targeting-functions.create-target($query, structure);\n\n  @include outline-width(variables.$outlined-border-width, $query: $query);\n  @include outline-color(variables.$outline-color, $query);\n  @include disabled-outline-color(variables.$disabled-container-color, $query);\n\n  @include feature-targeting-mixins.targets($feat-structure) {\n    border-style: solid;\n  }\n}\n\n@mixin filled_($query) {\n  @include horizontal-padding(variables.$contained-horizontal-padding, $query);\n  @include container-fill-color(primary, $query);\n  @include ink-color(on-primary, $query);\n  @include disabled-container-fill-color(\n    variables.$disabled-container-color,\n    $query\n  );\n  @include disabled-ink-color(variables.$disabled-ink-color, $query);\n}\n\n@mixin raised_($query) {\n  $feat-animation: feature-targeting-functions.create-target($query, animation);\n  $feat-color: feature-targeting-functions.create-target($query, color);\n\n  @include elevation-mixins.elevation(2, $query: $query);\n\n  &:hover,\n  &:focus {\n    @include elevation-mixins.elevation(4, $query: $query);\n  }\n\n  &:active {\n    @include elevation-mixins.elevation(8, $query: $query);\n  }\n\n  &:disabled {\n    @include elevation-mixins.elevation(0, $query: $query);\n  }\n\n  @include feature-targeting-mixins.targets($feat-animation) {\n    transition: elevation-functions.transition-value();\n  }\n}\n\n///\n/// Sets the container fill color to the given color. This mixin should be\n/// wrapped in a selector that qualifies button state.\n/// @access private\n///\n@mixin container-fill-color_(\n  $color,\n  $query: feature-targeting-functions.all()\n) {\n  $feat-color: feature-targeting-functions.create-target($query, color);\n\n  @include feature-targeting-mixins.targets($feat-color) {\n    @include theme-mixins.prop(background-color, $color);\n  }\n}\n\n///\n/// Sets the outline color to the given color. This mixin should be\n/// wrapped in a selector that qualifies button state.\n/// @access private\n///\n@mixin outline-color_($color, $query: feature-targeting-functions.all()) {\n  $feat-color: feature-targeting-functions.create-target($query, color);\n\n  @include feature-targeting-mixins.targets($feat-color) {\n    @include theme-mixins.prop(border-color, $color);\n  }\n}\n\n///\n/// Sets the icon color to the given color. This mixin should be\n/// wrapped in a selector that qualifies button state.\n/// @access private\n///\n@mixin icon-color_($color, $query: feature-targeting-functions.all()) {\n  $feat-color: feature-targeting-functions.create-target($query, color);\n\n  .mdc-button__icon {\n    @include feature-targeting-mixins.targets($feat-color) {\n      @include theme-mixins.prop(color, $color);\n    }\n  }\n}\n\n///\n/// Sets the ink color to the given color. This mixin should be\n/// wrapped in a selector that qualifies button state.\n/// @access private\n///\n@mixin ink-color_($color, $query: feature-targeting-functions.all()) {\n  $feat-color: feature-targeting-functions.create-target($query, color);\n\n  @include feature-targeting-mixins.targets($feat-color) {\n    @include theme-mixins.prop(color, $color);\n  }\n}\n","//\n// Copyright 2017 Google Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n//\n\n@use \"sass:list\";\n@use \"sass:map\";\n@use \"sass:string\";\n@use \"@material/feature-targeting/functions\" as feature-targeting-functions;\n@use \"@material/feature-targeting/mixins\" as feature-targeting-mixins;\n@use \"@material/theme/mixins\" as theme-mixins;\n@use \"./variables\";\n\n@mixin core-styles($query: feature-targeting-functions.all()) {\n  .mdc-typography {\n    @include base($query: $query);\n  }\n\n  @each $style in map.keys(variables.$styles) {\n    .mdc-typography--#{$style} {\n      @include typography($style, $query: $query);\n    }\n  }\n}\n\n@mixin base($query: feature-targeting-functions.all()) {\n  $feat-typography: feature-targeting-functions.create-target(\n    $query,\n    typography\n  );\n\n  @include smooth-font($query: $query);\n  @include feature-targeting-mixins.targets($feat-typography) {\n    @include theme-mixins.prop(\n      font-family,\n      (\n        varname: --mdc-typography-font-family,\n        fallback: map.get(variables.$base, 'font-family'),\n      )\n    );\n  }\n}\n\n@mixin typography(\n  $style,\n  $query: feature-targeting-functions.all(),\n  $exclude-props: ()\n) {\n  $feat-typography: feature-targeting-functions.create-target(\n    $query,\n    typography\n  );\n  $style-props: map.get(variables.$styles, $style);\n\n  @if not map.has-key(variables.$styles, $style) {\n    @error \"Invalid style specified! #{$style} doesn't exist. Choose one of #{map.keys(variables.$styles)}\";\n  }\n\n  @include smooth-font($query: $query);\n  @include feature-targeting-mixins.targets($feat-typography) {\n    @each $key, $value in $style-props {\n      @if list.index($exclude-props, $key) == null {\n        $fallback: $value;\n        @if $key == 'font-family' {\n          // Each style has its own font-family custom property, but should\n          // fallback to a generic font-family property. This allows\n          // customizing the font-family for all styles or only specific ones.\n          $fallback: (\n            varname: --mdc-typography-font-family,\n            fallback: $fallback,\n          );\n        }\n\n        @include theme-mixins.prop(\n          $key,\n          (\n            varname: --mdc-typography-#{$style}-#{$key},\n            fallback: $fallback,\n          )\n        );\n      }\n    }\n  }\n}\n\n/// Applies antialiasing via font-smoothing to text.\n@mixin smooth-font($query: feature-targeting-functions.all()) {\n  $feat-typography: feature-targeting-functions.create-target(\n    $query,\n    typography\n  );\n\n  @include feature-targeting-mixins.targets($feat-typography) {\n    -moz-osx-font-smoothing: grayscale;\n    -webkit-font-smoothing: antialiased;\n  }\n}\n\n// Element must be `display: block` or `display: inline-block` for this to work.\n@mixin overflow-ellipsis($query: feature-targeting-functions.all()) {\n  $feat-structure: feature-targeting-functions.create-target($query, structure);\n\n  @include feature-targeting-mixins.targets($feat-structure) {\n    text-overflow: ellipsis;\n    white-space: nowrap;\n    overflow: hidden;\n  }\n}\n\n/// Sets a container's baseline that text content will align to.\n///\n/// If the `$display` is set to a flexbox display, only `$top` baseline may be\n/// set. A separate element must be added as a child of the container with a\n/// `$bottom` baseline.\n///\n/// @param {Number} $top - the distance from the top of the container to the\n///     text's baseline.\n/// @param {Number} $bottom - the distance from the text's baseline to the\n///     bottom of the container.\n/// @param {String} $display - the display type of the container. May be `flex`,\n///     `inline-flex`, `block`, or `inline-block`.\n@mixin baseline(\n  $top: 0,\n  $bottom: 0,\n  $display: block,\n  $query: feature-targeting-functions.all()\n) {\n  $validDisplayTypes: (flex, inline-flex, block, inline-block);\n\n  @if list.index($validDisplayTypes, $display) == null {\n    @error \"mdc-typography: invalid display specified! #{$display} must be one of #{$validDisplayTypes}\";\n  }\n\n  $isFlexbox: $display == 'flex' or $display == 'inline-flex';\n  $feat-structure: feature-targeting-functions.create-target($query, structure);\n\n  @include feature-targeting-mixins.targets($feat-structure) {\n    display: $display;\n\n    @if $isFlexbox {\n      align-items: baseline;\n    }\n  }\n\n  @if $top > 0 {\n    @include baseline-top($top, $query: $query);\n  }\n\n  @if $bottom > 0 {\n    @if $isFlexbox {\n      @error \"mdc-typography: invalid baseline with display type. #{$display} cannot specifiy $bottom. Add a separate child element with its own $bottom.\";\n    }\n\n    @include baseline-bottom($bottom, $query: $query);\n  }\n}\n\n/// Sets the baseline of flow text content.\n///\n/// Separate `$top` and `$bottom` baselines may be specified. You should ensure\n/// that the `$top` baseline matches the previous text content's $bottom\n/// baseline to ensure text is positioned appropriately.\n///\n/// See go/css-baseline for reference on how this mixin works.\n///\n/// This is intended for text flow content only (e.g. `<h1>`, `<p>`, `<span>`,\n/// or `<div>` with only text content). Use `baseline()` to set the baseline of\n/// containers that are flexbox or have non-flow content children.\n///\n/// @param {Number} $top - the distance from the top of the container to the\n///     text's baseline.\n/// @param {Number} $bottom - the distance from the text's baseline to the\n///     bottom of the container.\n/// @param {Boolean} $lineHeight - the line-height to use for the text. This\n///     is the distance between baselines of multiple lines of text.\n/// @param {String} $display - the display type of the container. May be `block`\n///     or `inline-block`.\n@mixin text-baseline(\n  $top: 0,\n  $bottom: 0,\n  $display: block,\n  $lineHeight: normal,\n  $query: feature-targeting-functions.all()\n) {\n  $validDisplayTypes: (block, inline-block);\n\n  @if list.index($validDisplayTypes, $display) == null {\n    @error \"mdc-typography: invalid display specified! #{$display} must be one of #{$validDisplayTypes}\";\n  }\n\n  $feat-structure: feature-targeting-functions.create-target($query, structure);\n\n  @include baseline(\n    $display: $display,\n    $top: $top,\n    $bottom: $bottom,\n    $query: $query\n  );\n  @include feature-targeting-mixins.targets($feat-structure) {\n    @if $top > 0 {\n      margin-top: 0;\n      /* @alternate */\n      line-height: #{$lineHeight};\n    }\n\n    @if $bottom > 0 {\n      margin-bottom: -1 * $bottom;\n    }\n  }\n}\n\n/// Creates a baseline strut from the top of a container. This mixin is for\n/// advanced users, prefer `baseline()`.\n///\n/// @param {Number} $distance - The distance from the top of the container to\n///     the text's baseline.\n@mixin baseline-top($distance, $query: feature-targeting-functions.all()) {\n  $feat-structure: feature-targeting-functions.create-target($query, structure);\n\n  &::before {\n    @include feature-targeting-mixins.targets($feat-structure) {\n      @include baseline-strut_($distance);\n\n      vertical-align: 0;\n    }\n  }\n}\n\n/// Creates a baseline strut from the baseline to the bottom of a container.\n/// This mixin is for advanced users, prefer `baseline()`.\n///\n/// @param {Number} $distance - The distance from the text's baseline to the\n///     bottom of the container.\n@mixin baseline-bottom($distance, $query: feature-targeting-functions.all()) {\n  $feat-structure: feature-targeting-functions.create-target($query, structure);\n\n  &::after {\n    @include feature-targeting-mixins.targets($feat-structure) {\n      @include baseline-strut_($distance);\n\n      vertical-align: -1 * $distance;\n    }\n  }\n}\n\n/// Adds an invisible, zero-width prefix to a container's text.\n/// This ensures that the baseline is always where the text would be, instead\n/// of defaulting to the container bottom when text is empty. Do not use this\n/// mixin if the `baseline` mixin is already applied.\n@mixin zero-width-prefix($query: feature-targeting-functions.all()) {\n  $feat-structure: feature-targeting-functions.create-target($query, structure);\n\n  &::before {\n    @include feature-targeting-mixins.targets($feat-structure) {\n      content: '\\200b';\n    }\n  }\n}\n\n@mixin baseline-strut_($distance) {\n  display: inline-block;\n  width: 0;\n  height: $distance;\n  content: '';\n}\n","//\n// Copyright 2020 Google Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n//\n@use \"sass:map\";\n@use \"sass:meta\";\n@use \"./gss\";\n\n/// When true, add an additional property/value declaration before a custom\n/// property's `var()` to support IE. Configure\n/// `@material/theme/custom-properties` with this variable set to false to\n/// disable IE fallback values for custom properties.\n$ie-fallback: true !default;\n\n/// Returns true if the parameter is a custom property Map.\n///\n/// @param {*} $value - the value to test.\n/// @return true if the value is a custom property Map, or false if not.\n@function is-custom-prop($value) {\n  @return meta.type-of($value) == 'map' and map.has-key($value, 'varname');\n}\n\n/// Returns true if $prop1's varname and fallback values are deeply equal to\n/// $prop2's varname and fallback values.\n///\n/// @param {Map} $prop1 - the first value to test.\n/// @param {Map} $prop2 - the second value to test.\n/// @return true if both properties are deeply equal\n@function are-equal($prop1, $prop2) {\n  @return create-var($prop1) == create-var($prop2);\n}\n\n/// Creates a custom property Map.\n///\n/// @param {String} $varname - the custom property name.\n/// @param {String | Number | Map} - the fallback value (may be another custom\n///     property Map). May be null.\n/// @return a custom property Map.\n@function create($varname, $fallback: null) {\n  @return (varname: $varname, fallback: $fallback);\n}\n\n/// Returns the custom property variable name of a custom property Map.\n///\n/// @param {Map} $custom-prop - a custom property Map.\n/// @return the custom property variable name defined by the Map.\n@function get-varname($custom-prop) {\n  @return map.get($custom-prop, 'varname');\n}\n\n/// Returns the fallback value of a custom property Map. May be null if the\n/// custom property does not have a fallback.\n///\n/// @param {Map} $custom-prop - a custom property Map.\n/// @param {Bool} $shallow - if true, return the first fallback value, which\n///     may be another custom property Map. Defaults to false, which will return\n///     the deep final fallback value.\n/// @return the fallback value of a custom property Map. May be null.\n@function get-fallback($custom-prop, $shallow: false) {\n  $fallback: map.get($custom-prop, 'fallback');\n  @if is-custom-prop($fallback) and not $shallow {\n    @return get-fallback($fallback);\n  }\n\n  @return $fallback;\n}\n\n/// Creates a new custom property Map and returns it with the specified new\n/// fallback value.\n///\n/// @param {Map} $custom-prop - the custom property Map to copy.\n/// @param {String | Number | Map} $new-fallback - the new fallback value of the\n///     custom property Map. May be null.\n/// @param {Bool} $shallow - if true, set the first fallback value. Defaults to\n///     false, which will set the deep final fallback value.\n/// @return a new custom property Map with the new fallback value.\n@function set-fallback($custom-prop, $new-fallback, $shallow: false) {\n  $varname: get-varname($custom-prop);\n  $first-fallback: get-fallback($custom-prop, $shallow: true);\n\n  @if is-custom-prop($first-fallback) and not $shallow {\n    // The first fallback is a custom property and $shallow is false. Deeply\n    // set the fallback value of the custom property and get the new custom\n    // property Map returned.\n    $new-fallback: set-fallback($first-fallback, $new-fallback);\n  }\n\n  @return create($varname, $new-fallback);\n}\n\n/// Creates and returns a `var()` function declaration represented by the\n/// provided custom property Map.\n///\n/// @param {Map} $custom-prop - a custom property Map.\n/// @return a `var()` function declaration using the custom property Map's\n///     varname and fallback value.\n@function create-var($custom-prop) {\n  $varname: get-varname($custom-prop);\n  $fallback: get-fallback($custom-prop, $shallow: true);\n\n  @if is-custom-prop($fallback) {\n    @return var($varname, create-var($fallback));\n  } @else if $fallback != null {\n    @return var($varname, $fallback);\n  } @else {\n    @return var($varname);\n  }\n}\n\n/// Applies a custom property value to the specified property.\n///\n/// @param {String} $property - the name of the CSS property.\n/// @param {Map} $custom-prop - a custom property Map for the property's value.\n/// @param {Map} $gss - optional Map of GSS annotations to set.\n/// @param {Bool} $important - set to true to add an `!important` rule. Defaults\n///     to false.\n@mixin apply($property, $custom-prop, $gss: (), $important: false) {\n  @if not is-custom-prop($custom-prop) {\n    @error \"mdc-theme: Invalid custom property: #{$custom-prop}. Must be a Map with 'varname' and 'fallback'.\";\n  }\n\n  $important-rule: if($important, '!important', '');\n\n  $fallback: get-fallback($custom-prop);\n  @if $ie-fallback and $fallback != null {\n    @include gss.annotate($gss);\n    #{$property}: #{$fallback} #{$important-rule};\n\n    // add @alternate to annotations\n    $gss: map.merge(\n      $gss,\n      (\n        alternate: true,\n      )\n    );\n  }\n\n  @include gss.annotate($gss);\n  #{$property}: create-var($custom-prop) #{$important-rule};\n}\n","//\n// Copyright 2020 Google Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n//\n@use \"sass:map\";\n\n/// Adds optional GSS annotation comments. Useful for theme mixins where one or\n/// more properties are set indirectly.\n///\n/// @example\n///   `annotate((noflip: true)) => /* @noflip */`\n///\n/// @param {Map} $annotations - Map of annotations. Values must be set to `true`\n///     for an annotation to be added.\n@mixin annotate($annotations) {\n  @if (map.get($annotations, alternate) == true) {\n    /* @alternate */\n  }\n\n  // noflip must be the last tag right before the property\n  @if (map.get($annotations, noflip) == true) {\n    /* @noflip */\n  }\n}\n","//\n// Copyright 2017 Google Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n//\n\n@use \"sass:list\";\n@use \"@material/theme/mixins\" as theme;\n@use \"./variables\";\n\n// Creates a rule that will be applied when an MDC Web component is within the context of an RTL layout.\n//\n// Usage Example:\n//\n// ```scss\n// .mdc-foo {\n//   position: absolute;\n//   left: 0;\n//\n//   @include rtl {\n//     left: auto;\n//     right: 0;\n//   }\n//\n//   &__bar {\n//     margin-left: 4px;\n//     @include rtl(\".mdc-foo\") {\n//       margin-left: auto;\n//       margin-right: 4px;\n//     }\n//   }\n// }\n//\n// .mdc-foo--mod {\n//   padding-left: 4px;\n//\n//   @include rtl {\n//     padding-left: auto;\n//     padding-right: 4px;\n//   }\n// }\n// ```\n//\n// Note that this mixin works by checking for an ancestor element with `[dir=\"rtl\"]`.\n// As a result, nested `dir` values are not supported:\n//\n// ```html\n// <html dir=\"rtl\">\n//   <!-- ... -->\n//   <div dir=\"ltr\">\n//     <div class=\"mdc-foo\">Styled incorrectly as RTL!</div>\n//   </div>\n// </html>\n// ```\n//\n// In the future, selectors such as the `:dir` pseudo-class (http://mdn.io/css/:dir) will help us mitigate this.\n@mixin rtl($root-selector: null) {\n  @if (variables.$include) {\n    @if ($root-selector) {\n      @at-root {\n        #{$root-selector}[dir='rtl'] &,\n        [dir='rtl'] #{$root-selector} & {\n          @content;\n        }\n      }\n    } @else {\n      [dir='rtl'] &,\n      &[dir='rtl'] {\n        @content;\n      }\n    }\n  }\n}\n\n// Takes a base box-model property name (`margin`, `border`, `padding`, etc.) along with a\n// default direction (`left` or `right`) and value, and emits rules which apply the given value to the\n// specified direction by default and the opposite direction in RTL.\n//\n// For example:\n//\n// ```scss\n// .mdc-foo {\n//   @include rtl-reflexive-box(margin, left, 8px);\n// }\n// ```\n//\n// is equivalent to:\n//\n// ```scss\n// .mdc-foo {\n//   margin-left: 8px;\n//   margin-right: 0;\n//\n//   @include rtl {\n//     margin-left: 0;\n//     margin-right: 8px;\n//   }\n// }\n// ```\n//\n// whereas:\n//\n// ```scss\n// .mdc-foo {\n//   @include rtl-reflexive-box(margin, right, 8px);\n// }\n// ```\n//\n// is equivalent to:\n//\n// ```scss\n// .mdc-foo {\n//   margin-left: 0;\n//   margin-right: 8px;\n//\n//   @include rtl {\n//     margin-left: 8px;\n//     margin-right: 0;\n//   }\n// }\n// ```\n//\n// You can also pass an optional 4th `$root-selector` argument which will be forwarded to `mdc-rtl`,\n// e.g. `@include rtl-reflexive-box(margin, left, 8px, \".mdc-component\")`.\n//\n// Note that this function will always zero out the original value in an RTL context.\n// If you're trying to flip the values, use `mdc-rtl-reflexive-property()` instead.\n@mixin reflexive-box(\n  $base-property,\n  $default-direction,\n  $value,\n  $root-selector: null\n) {\n  @if (list.index((right, left), $default-direction) == null) {\n    @error \"Invalid default direction: '#{$default-direction}'. Please specifiy either 'right' or 'left'.\";\n  }\n\n  $left-value: $value;\n  $right-value: 0;\n\n  @if ($default-direction == right) {\n    $left-value: 0;\n    $right-value: $value;\n  }\n\n  @include reflexive-property(\n    $base-property,\n    $left-value,\n    $right-value,\n    $root-selector\n  );\n}\n\n// Takes a base property and emits rules that assign <base-property>-left to <left-value> and\n// <base-property>-right to <right-value> in a LTR context, and vice versa in a RTL context.\n// For example:\n//\n// ```scss\n// .mdc-foo {\n//   @include rtl-reflexive-property(margin, auto, 12px);\n// }\n// ```\n//\n// is equivalent to:\n//\n// ```scss\n// .mdc-foo {\n//   margin-left: auto;\n//   margin-right: 12px;\n//\n//   @include rtl {\n//     margin-left: 12px;\n//     margin-right: auto;\n//   }\n// }\n// ```\n//\n// An optional 4th `$root-selector` argument can be given, which will be passed to `mdc-rtl`.\n@mixin reflexive-property(\n  $base-property,\n  $left-value,\n  $right-value,\n  $root-selector: null\n) {\n  $prop-left: #{$base-property}-left;\n  $prop-right: #{$base-property}-right;\n\n  @include reflexive(\n    $prop-left,\n    $left-value,\n    $prop-right,\n    $right-value,\n    $root-selector\n  );\n}\n\n// Takes an argument specifying a horizontal position property (either \"left\" or \"right\") as well\n// as a value, and applies that value to the specified position in a LTR context, and flips it in a\n// RTL context. For example:\n//\n// ```scss\n// .mdc-foo {\n//   @include rtl-reflexive-position(left, 0);\n// }\n// ```\n//\n// is equivalent to:\n//\n// ```scss\n// .mdc-foo {\n//   left: 0;\n//   right: initial;\n//\n//   @include rtl {\n//     left: initial;\n//     right: 0;\n//   }\n// }\n// ```\n//\n// An optional third $root-selector argument may also be given, which is passed to `mdc-rtl`.\n@mixin reflexive-position($position-property, $value, $root-selector: null) {\n  @if (list.index((right, left), $position-property) == null) {\n    @error \"Invalid position #{position-property}. Please specifiy either right or left\";\n  }\n\n  // TODO: \"initial\" is not supported in IE 11. https://caniuse.com/#feat=css-initial-value\n  $left-value: $value;\n  $right-value: initial;\n\n  @if ($position-property == right) {\n    $right-value: $value;\n    $left-value: initial;\n  }\n\n  @include reflexive(left, $left-value, right, $right-value, $root-selector);\n}\n\n// Takes pair of properties with values as arguments and flips it in RTL context.\n// For example:\n//\n// ```scss\n// .mdc-foo {\n//   @include rtl-reflexive(left, 2px, right, 5px);\n// }\n// ```\n//\n// is equivalent to:\n//\n// ```scss\n// .mdc-foo {\n//   left: 2px;\n//   right: 5px;\n//\n//   @include rtl {\n//     right: 2px;\n//     left: 5px;\n//   }\n// }\n// ```\n//\n// An optional fifth `$root-selector` argument may also be given, which is passed to `mdc-rtl`.\n@mixin reflexive(\n  $left-property,\n  $left-value,\n  $right-property,\n  $right-value,\n  $root-selector: null\n) {\n  @include property_($left-property, $left-value);\n  @include property_($right-property, $right-value);\n\n  @include rtl($root-selector) {\n    @include property_($left-property, $right-value);\n    @include property_($right-property, $left-value);\n  }\n}\n\n///\n/// Adds `@noflip` annotation when `$mdc-rtl-include` is true.\n///\n/// @param {String} $property\n/// @param {String} $value\n/// @access private\n///\n@mixin property_($property, $value) {\n  @include theme.property(\n    $property,\n    $value,\n    $gss: (noflip: variables.$include)\n  );\n}\n","//\n// Copyright 2019 Google Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n//\n\n$height: 48px !default;\n$width: $height !default;\n","//\n// Copyright 2017 Google Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n//\n\n@use \"@material/density/variables\" as density-variables;\n@use \"@material/theme/variables\" as theme-variables; // for mdc-theme-prop-value\n\n$height: 36px !default;\n$horizontal-padding: 8px !default;\n$contained-horizontal-padding: 16px !default;\n\n$minimum-height: 24px !default;\n$maximum-height: $height !default;\n$density-scale: density-variables.$default-scale !default;\n$density-config: (\n  height: (\n    default: $height,\n    maximum: $maximum-height,\n    minimum: $minimum-height,\n  ),\n) !default;\n\n$outlined-border-width: 1px !default;\n$outline-color: rgba(theme-variables.prop-value(on-surface), 0.12) !default;\n$shape-radius: small !default;\n\n$disabled-container-color: rgba(\n  theme-variables.prop-value(on-surface),\n  0.12\n) !default;\n$disabled-ink-color: rgba(\n  theme-variables.prop-value(on-surface),\n  0.38\n) !default;\n","//\n// Copyright 2017 Google Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n//\n\n// MDC Ripple keyframes are split into their own file so that _mixins.scss can rely on them.\n\n@use \"@material/animation/variables\";\n@use \"./variables\" as variables2;\n\n@mixin keyframes_ {\n  @keyframes mdc-ripple-fg-radius-in {\n    from {\n      animation-timing-function: variables.$standard-curve-timing-function;\n      // NOTE: For these keyframes, we do not need custom property fallbacks because they are only\n      // used in conjunction with `.mdc-ripple-upgraded`. Since MDCRippleFoundation checks to ensure\n      // that custom properties are supported within the browser before adding this class, we can\n      // safely use them without a fallback.\n      transform: translate(var(--mdc-ripple-fg-translate-start, 0)) scale(1);\n    }\n\n    to {\n      transform: translate(var(--mdc-ripple-fg-translate-end, 0))\n        scale(var(--mdc-ripple-fg-scale, 1));\n    }\n  }\n\n  @keyframes mdc-ripple-fg-opacity-in {\n    from {\n      animation-timing-function: linear;\n      opacity: 0;\n    }\n\n    to {\n      opacity: var(--mdc-ripple-fg-opacity, 0);\n    }\n  }\n\n  @keyframes mdc-ripple-fg-opacity-out {\n    from {\n      animation-timing-function: linear;\n      opacity: var(--mdc-ripple-fg-opacity, 0);\n    }\n\n    to {\n      opacity: 0;\n    }\n  }\n}\n","//\n// Copyright 2017 Google Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n//\n\n$deceleration-curve-timing-function: cubic-bezier(0, 0, 0.2, 1) !default;\n$standard-curve-timing-function: cubic-bezier(0.4, 0, 0.2, 1) !default;\n$acceleration-curve-timing-function: cubic-bezier(0.4, 0, 1, 1) !default;\n$sharp-curve-timing-function: cubic-bezier(0.4, 0, 0.6, 1) !default;\n","//\n// Copyright 2016 Google Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n//\n\n@use \"sass:color\";\n@use \"sass:map\";\n@use \"@material/animation/functions\" as functions2;\n@use \"@material/animation/variables\" as variables2;\n@use \"@material/base/mixins\" as base-mixins;\n@use \"@material/feature-targeting/functions\" as feature-targeting-functions;\n@use \"@material/feature-targeting/mixins\" as feature-targeting-mixins;\n@use \"@material/theme/mixins\" as theme-mixins;\n@use \"./functions\";\n@use \"./keyframes\";\n@use \"./variables\";\n@use \"@material/theme/variables\" as theme-variables;\n\n@mixin core-styles($query: feature-targeting-functions.all()) {\n  // postcss-bem-linter: define ripple-surface\n\n  $feat-structure: feature-targeting-functions.create-target($query, structure);\n\n  .mdc-ripple-surface {\n    @include surface($query: $query);\n    @include states($query: $query);\n    @include radius-bounded($query: $query);\n\n    @include feature-targeting-mixins.targets($feat-structure) {\n      position: relative;\n      outline: none;\n      overflow: hidden;\n    }\n\n    &[data-mdc-ripple-is-unbounded] {\n      @include radius-unbounded($query: $query);\n\n      @include feature-targeting-mixins.targets($feat-structure) {\n        overflow: visible;\n      }\n    }\n\n    &--primary {\n      @include states(primary, $query: $query);\n    }\n\n    &--accent {\n      @include states(secondary, $query: $query);\n    }\n  }\n\n  // postcss-bem-linter: end\n}\n\n@mixin common($query: feature-targeting-functions.all()) {\n  $feat-animation: feature-targeting-functions.create-target($query, animation);\n\n  // Ensure that styles needed by any component using MDC Ripple are emitted, but only once.\n  // (Every component using MDC Ripple imports these mixins, but doesn't necessarily import\n  // mdc-ripple.scss.)\n  @include feature-targeting-mixins.targets($feat-animation) {\n    @include base-mixins.emit-once('mdc-ripple/common/animation') {\n      @include keyframes.keyframes_;\n    }\n  }\n}\n\n@mixin surface($query: feature-targeting-functions.all(), $ripple-target: '&') {\n  $feat-animation: feature-targeting-functions.create-target($query, animation);\n  $feat-structure: feature-targeting-functions.create-target($query, structure);\n\n  @include feature-targeting-mixins.targets($feat-structure) {\n    --mdc-ripple-fg-size: 0;\n    --mdc-ripple-left: 0;\n    --mdc-ripple-top: 0;\n    --mdc-ripple-fg-scale: 1;\n    --mdc-ripple-fg-translate-end: 0;\n    --mdc-ripple-fg-translate-start: 0;\n\n    -webkit-tap-highlight-color: rgba(0, 0, 0, 0);\n    // !!DO NOT REMOVE!! mdc-ripple-will-change-replacer\n  }\n\n  #{$ripple-target}::before,\n  #{$ripple-target}::after {\n    @include feature-targeting-mixins.targets($feat-structure) {\n      position: absolute;\n      border-radius: 50%;\n      opacity: 0;\n      pointer-events: none;\n      content: '';\n    }\n  }\n\n  #{$ripple-target}::before {\n    @include feature-targeting-mixins.targets($feat-animation) {\n      // Also transition background-color to avoid unnatural color flashes when toggling activated/selected state\n      transition: opacity variables.$states-wash-duration linear,\n        background-color variables.$states-wash-duration linear;\n    }\n\n    @include feature-targeting-mixins.targets($feat-structure) {\n      z-index: 1; // Ensure that the ripple wash for hover/focus states is displayed on top of positioned child elements\n    }\n  }\n\n  // Common styles for upgraded surfaces (some of these depend on custom properties set via JS or other mixins)\n\n  &.mdc-ripple-upgraded {\n    #{$ripple-target}::before {\n      @include feature-targeting-mixins.targets($feat-structure) {\n        transform: scale(var(--mdc-ripple-fg-scale, 1));\n      }\n    }\n\n    #{$ripple-target}::after {\n      @include feature-targeting-mixins.targets($feat-structure) {\n        top: 0;\n        /* @noflip */\n        left: 0;\n        transform: scale(0);\n        transform-origin: center center;\n      }\n    }\n  }\n\n  &.mdc-ripple-upgraded--unbounded {\n    #{$ripple-target}::after {\n      @include feature-targeting-mixins.targets($feat-structure) {\n        top: var(--mdc-ripple-top, 0);\n        /* @noflip */\n        left: var(--mdc-ripple-left, 0);\n      }\n    }\n  }\n\n  &.mdc-ripple-upgraded--foreground-activation {\n    #{$ripple-target}::after {\n      @include feature-targeting-mixins.targets($feat-animation) {\n        animation: mdc-ripple-fg-radius-in variables.$translate-duration\n            forwards,\n          mdc-ripple-fg-opacity-in variables.$fade-in-duration forwards;\n      }\n    }\n  }\n\n  &.mdc-ripple-upgraded--foreground-deactivation {\n    #{$ripple-target}::after {\n      @include feature-targeting-mixins.targets($feat-animation) {\n        animation: mdc-ripple-fg-opacity-out variables.$fade-out-duration;\n      }\n\n      @include feature-targeting-mixins.targets($feat-structure) {\n        // Retain transform from mdc-ripple-fg-radius-in activation\n        transform: translate(var(--mdc-ripple-fg-translate-end, 0))\n          scale(var(--mdc-ripple-fg-scale, 1));\n      }\n    }\n  }\n}\n\n@mixin states-base-color(\n  $color,\n  $query: feature-targeting-functions.all(),\n  $ripple-target: '&'\n) {\n  $feat-color: feature-targeting-functions.create-target($query, color);\n\n  #{$ripple-target}::before,\n  #{$ripple-target}::after {\n    @include feature-targeting-mixins.targets($feat-color) {\n      @if color.alpha(theme-variables.prop-value($color)) > 0 {\n        @include theme-mixins.prop(background-color, $color);\n      } @else {\n        // If a color with 0 alpha is specified, don't render the ripple pseudo-elements at all.\n        // This avoids unnecessary transitions and overflow.\n        content: none;\n      }\n    }\n  }\n}\n\n///\n/// Customizes ripple opacities in `hover`, `focus`, or `press` states\n/// @param {map} $opacity-map - map specifying custom opacity of zero or more states\n/// @param {bool} $has-nested-focusable-element - whether the component contains a focusable element in the root\n/// @param {string} $ripple-target - the optional selector for the ripple element\n///\n@mixin states-opacities(\n  $opacity-map: (),\n  $has-nested-focusable-element: false,\n  $ripple-target: '&',\n  $query: feature-targeting-functions.all()\n) {\n  // Ensure sufficient specificity to override base state opacities\n  @if map.has-key($opacity-map, hover) {\n    @include states-hover-opacity(\n      map.get($opacity-map, hover),\n      $ripple-target: $ripple-target,\n      $query: $query\n    );\n  }\n\n  @if map.has-key($opacity-map, focus) {\n    @include states-focus-opacity(\n      map.get($opacity-map, focus),\n      $ripple-target: $ripple-target,\n      $has-nested-focusable-element: $has-nested-focusable-element,\n      $query: $query\n    );\n  }\n\n  @if map.has-key($opacity-map, press) {\n    @include states-press-opacity(\n      map.get($opacity-map, press),\n      $ripple-target: $ripple-target,\n      $query: $query\n    );\n  }\n}\n\n@mixin states-hover-opacity(\n  $opacity,\n  $query: feature-targeting-functions.all(),\n  $ripple-target: '&'\n) {\n  $feat-color: feature-targeting-functions.create-target($query, color);\n\n  // Background wash styles, for both CSS-only and upgraded stateful surfaces\n  &:hover {\n    #{$ripple-target}::before {\n      // Opacity falls under color because the chosen opacity is color-dependent in typical usage\n      @include feature-targeting-mixins.targets($feat-color) {\n        opacity: $opacity;\n      }\n    }\n  }\n}\n\n@mixin states-focus-opacity(\n  $opacity,\n  $has-nested-focusable-element: false,\n  $query: feature-targeting-functions.all(),\n  $ripple-target: '&'\n) {\n  // Focus overrides hover by reusing the ::before pseudo-element.\n  // :focus-within generally works on non-MS browsers and matches when a *child* of the element has focus.\n  // It is useful for cases where a component has a focusable element within the root node, e.g. text field,\n  // but undesirable in general in case of nested stateful components.\n  // We use a modifier class for JS-enabled surfaces to support all use cases in all browsers.\n  @if $has-nested-focusable-element {\n    // JS-enabled selectors.\n    &.mdc-ripple-upgraded--background-focused,\n    &.mdc-ripple-upgraded:focus-within,\n    // CSS-only selectors.\n    &:not(.mdc-ripple-upgraded):focus,\n    &:not(.mdc-ripple-upgraded):focus-within {\n      #{$ripple-target}::before {\n        @include states-focus-opacity-properties_(\n          $opacity: $opacity,\n          $query: $query\n        );\n      }\n    }\n  } @else {\n    // JS-enabled selectors.\n    &.mdc-ripple-upgraded--background-focused,\n    // CSS-only selectors.\n    &:not(.mdc-ripple-upgraded):focus {\n      #{$ripple-target}::before {\n        @include states-focus-opacity-properties_(\n          $opacity: $opacity,\n          $query: $query\n        );\n      }\n    }\n  }\n}\n\n@mixin states-focus-opacity-properties_($opacity, $query) {\n  $feat-animation: feature-targeting-functions.create-target($query, animation);\n  // Opacity falls under color because the chosen opacity is color-dependent in typical usage\n  $feat-color: feature-targeting-functions.create-target($query, color);\n\n  // Note that this duration is only effective on focus, not blur\n  @include feature-targeting-mixins.targets($feat-animation) {\n    transition-duration: 75ms;\n  }\n\n  @include feature-targeting-mixins.targets($feat-color) {\n    opacity: $opacity;\n  }\n}\n\n@mixin states-press-opacity(\n  $opacity,\n  $query: feature-targeting-functions.all(),\n  $ripple-target: '&'\n) {\n  $feat-animation: feature-targeting-functions.create-target($query, animation);\n  $feat-color: feature-targeting-functions.create-target($query, color);\n\n  // Styles for non-upgraded (CSS-only) stateful surfaces\n\n  &:not(.mdc-ripple-upgraded) {\n    // Apply press additively by using the ::after pseudo-element\n    #{$ripple-target}::after {\n      @include feature-targeting-mixins.targets($feat-animation) {\n        transition: opacity variables.$fade-out-duration linear;\n      }\n    }\n\n    &:active {\n      #{$ripple-target}::after {\n        @include feature-targeting-mixins.targets($feat-animation) {\n          transition-duration: variables.$fade-in-duration;\n        }\n\n        // Opacity falls under color because the chosen opacity is color-dependent in typical usage\n        @include feature-targeting-mixins.targets($feat-color) {\n          opacity: $opacity;\n        }\n      }\n    }\n  }\n\n  &.mdc-ripple-upgraded {\n    @include feature-targeting-mixins.targets($feat-color) {\n      --mdc-ripple-fg-opacity: #{$opacity};\n    }\n  }\n}\n\n// Simple mixin for base states which automatically selects opacity values based on whether the ink color is\n// light or dark.\n@mixin states(\n  $color: theme-variables.prop-value(on-surface),\n  $has-nested-focusable-element: false,\n  $query: feature-targeting-functions.all(),\n  $ripple-target: '&'\n) {\n  @include states-interactions_(\n    $color: $color,\n    $has-nested-focusable-element: $has-nested-focusable-element,\n    $query: $query,\n    $ripple-target: $ripple-target\n  );\n}\n\n// Simple mixin for activated states which automatically selects opacity values based on whether the ink color is\n// light or dark.\n@mixin states-activated(\n  $color,\n  $has-nested-focusable-element: false,\n  $query: feature-targeting-functions.all(),\n  $ripple-target: '&'\n) {\n  $feat-color: feature-targeting-functions.create-target($query, color);\n  $activated-opacity: functions.states-opacity($color, activated);\n\n  &--activated {\n    // Stylelint seems to think that '&' qualifies as a type selector here?\n    // stylelint-disable-next-line selector-max-type\n    #{$ripple-target}::before {\n      // Opacity falls under color because the chosen opacity is color-dependent.\n      @include feature-targeting-mixins.targets($feat-color) {\n        opacity: $activated-opacity;\n      }\n    }\n\n    @include states-interactions_(\n      $color: $color,\n      $has-nested-focusable-element: $has-nested-focusable-element,\n      $opacity-modifier: $activated-opacity,\n      $query: $query,\n      $ripple-target: $ripple-target\n    );\n  }\n}\n\n// Simple mixin for selected states which automatically selects opacity values based on whether the ink color is\n// light or dark.\n@mixin states-selected(\n  $color,\n  $has-nested-focusable-element: false,\n  $query: feature-targeting-functions.all(),\n  $ripple-target: '&'\n) {\n  $feat-color: feature-targeting-functions.create-target($query, color);\n  $selected-opacity: functions.states-opacity($color, selected);\n\n  &--selected {\n    // stylelint-disable-next-line selector-max-type\n    #{$ripple-target}::before {\n      // Opacity falls under color because the chosen opacity is color-dependent.\n      @include feature-targeting-mixins.targets($feat-color) {\n        opacity: $selected-opacity;\n      }\n    }\n\n    @include states-interactions_(\n      $color: $color,\n      $has-nested-focusable-element: $has-nested-focusable-element,\n      $opacity-modifier: $selected-opacity,\n      $query: $query,\n      $ripple-target: $ripple-target\n    );\n  }\n}\n\n@mixin radius-bounded(\n  $radius: 100%,\n  $query: feature-targeting-functions.all(),\n  $ripple-target: '&'\n) {\n  $feat-struture: feature-targeting-functions.create-target($query, structure);\n\n  #{$ripple-target}::before,\n  #{$ripple-target}::after {\n    @include feature-targeting-mixins.targets($feat-struture) {\n      top: calc(50% - #{$radius});\n      /* @noflip */\n      left: calc(50% - #{$radius});\n      width: $radius * 2;\n      height: $radius * 2;\n    }\n  }\n\n  &.mdc-ripple-upgraded {\n    #{$ripple-target}::after {\n      @include feature-targeting-mixins.targets($feat-struture) {\n        width: var(--mdc-ripple-fg-size, $radius);\n        height: var(--mdc-ripple-fg-size, $radius);\n      }\n    }\n  }\n}\n\n@mixin radius-unbounded(\n  $radius: 100%,\n  $query: feature-targeting-functions.all(),\n  $ripple-target: '&'\n) {\n  $feat-struture: feature-targeting-functions.create-target($query, structure);\n\n  #{$ripple-target}::before,\n  #{$ripple-target}::after {\n    @include feature-targeting-mixins.targets($feat-struture) {\n      top: calc(50% - #{$radius / 2});\n      /* @noflip */\n      left: calc(50% - #{$radius / 2});\n      width: $radius;\n      height: $radius;\n    }\n  }\n\n  &.mdc-ripple-upgraded {\n    #{$ripple-target}::before,\n    #{$ripple-target}::after {\n      @include feature-targeting-mixins.targets($feat-struture) {\n        top: var(--mdc-ripple-top, calc(50% - #{$radius / 2}));\n        /* @noflip */\n        left: var(--mdc-ripple-left, calc(50% - #{$radius / 2}));\n        width: var(--mdc-ripple-fg-size, $radius);\n        height: var(--mdc-ripple-fg-size, $radius);\n      }\n    }\n\n    #{$ripple-target}::after {\n      @include feature-targeting-mixins.targets($feat-struture) {\n        width: var(--mdc-ripple-fg-size, $radius);\n        height: var(--mdc-ripple-fg-size, $radius);\n      }\n    }\n  }\n}\n\n@mixin states-interactions_(\n  $color,\n  $has-nested-focusable-element,\n  $opacity-modifier: 0,\n  $query: feature-targeting-functions.all(),\n  $ripple-target: '&'\n) {\n  @include target-selector($ripple-target) {\n    @include states-base-color($color, $query);\n  }\n\n  $opacity-map: (\n    hover: functions.states-opacity($color, hover) + $opacity-modifier,\n    focus: functions.states-opacity($color, focus) + $opacity-modifier,\n    press: functions.states-opacity($color, press) + $opacity-modifier,\n  );\n\n  @include states-opacities(\n    $opacity-map,\n    $has-nested-focusable-element: $has-nested-focusable-element,\n    $ripple-target: $ripple-target,\n    $query: $query\n  );\n}\n\n// Wraps content in the `ripple-target` selector if it exists.\n@mixin target-selector($ripple-target: '&') {\n  @if $ripple-target == '&' {\n    @content;\n  } @else {\n    #{$ripple-target} {\n      @content;\n    }\n  }\n}\n\n// Common styles for a ripple target element.\n// Used for components which have an inner ripple target element.\n@mixin target-common($query: feature-targeting-functions.all()) {\n  $feat-structure: feature-targeting-functions.create-target($query, structure);\n\n  @include feature-targeting-mixins.targets($feat-structure) {\n    position: absolute;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n    // Necessary for clicks on other inner elements (e.g. close icon in chip)\n    // to go through.\n    pointer-events: none;\n  }\n}\n","//\n// Copyright 2016 Google Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n//\n\n$fade-in-duration: 75ms !default;\n$fade-out-duration: 150ms !default;\n$translate-duration: 225ms !default;\n$states-wash-duration: 15ms !default;\n\n// Notes on states:\n// * focus takes precedence over hover (i.e. if an element is both focused and hovered, only focus value applies)\n// * press state applies to a separate pseudo-element, so it has an additive effect on top of other states\n// * selected/activated are applied additively to hover/focus via calculations at preprocessing time\n\n$dark-ink-opacities: (\n  hover: 0.04,\n  focus: 0.12,\n  press: 0.12,\n  selected: 0.08,\n  activated: 0.12,\n) !default;\n\n$light-ink-opacities: (\n  hover: 0.08,\n  focus: 0.24,\n  press: 0.24,\n  selected: 0.16,\n  activated: 0.24,\n) !default;\n\n// Legacy\n\n$pressed-dark-ink-opacity: 0.16 !default;\n$pressed-light-ink-opacity: 0.32 !default;\n"],"sourceRoot":""}